   SensorE.lua

   Summary
   
   When writing lua scripts for the Jeti transmitters, telemetry
   sensors can be one of the most important sources of data for the
   script. If you develop lua scripts on the Jeti DC/DS-24 emulator as
   I do, it would be quite convenient to have a way to provide what
   look like actual sensor readings in the emulator. In the past, I
   had used a DEBUG variable, or I had queried the system routines to
   know I was running on the emulator, then would add lua code to my
   source files to insert computed values instead of calling the
   system telemetry routines. Typically I would use the analog sliders
   P5-P8 as data sources for this purpose. But the issue is that the
   code path for the debugging is then different than it is at
   runtime.

   For a long time I have wanted to have the ability to call the
   standard system routines (e.g. system.getSensorByID) and have them
   return values that are similar to what the lua app would encounter
   in actual flight. The tools described here are the first
   implementation of that vision. This tool, SensorE.lua can read a
   json file that describes a set of sensors, and the values they
   should return.

   The format of the json file (sensorEmulator.jsn) has the same
   structure as the json representation of the table that
   system.getSensors() returns in normal use, so it should be
   familiar.
   
   On its initialization this app replaces the system routines such as
   system.getSensors and system.getSensorByID with its own
   implementations, and returns values in a way that is specified in
   the json file. The file allows the creation of a range from min to
   max for each analog slider and also allows you to specify a lua
   expression that transforms this simple linear range to whatever you
   like.

   Since the DC/DS-24 emulator does not play audio files, the emulator
   also traps system.playFile() and system.playNumber() and prints out
   on the console what numbers and files would have been played via
   audio.

   The tool can also simulate GPS sensors by giving a lat,long origin
   and specifying the x and y values for a parametric equation that
   can do things such as generating an ellipse or lissajous figure
   flight path and return the appropriate GPS values in sensor.valGPS.
   This information is specified in a second json file
   sensorEmulatorGPS.jsn.

   There is also a separate tool SensorL.lua that reads a Jeti TX
   log file and plays back selected sensors (these sensors are defined
   in a json file) so that calls to the system telemetry routines work
   as if the lua script is "flying" that flight.

   Details
   
   The SensorE.lua app is intended to be used with the Jeti DC/DS-24
   emulator. It reads the file SensorE.jsn to see where it should find
   the actual config file (sensorEmulator.jsn) that defines a set of
   "pseudosensors" that can be created from the proportional controls
   (e.g. sliders) in the emulator or from arbitrary lua
   expressions. As a simple example, you can define a simple linear
   range of telemetry signal values that behave as standard telemetry
   sensors as the sliders move. A sample JSON file is included below.
   
   For more complex sensor behavior, you can specify a string of lua
   code that is interpreted as a lua expression (basically anything
   that could be after "return" in a function call). You specify this
   in the jsn file with key "luaExp" whose value is the expression to
   be evaluated by the lua interpreter (see example below). This
   expression is evaluated each time the sensor is "read".
   
   The environment in which that string is evaluated by the lua
   interpreter is set up with access to all the basic lua built-in
   functions (e.g. math library, string and table library). It is also
   set up with a few variables: t is the system time in seconds (t =
   system.getTimeCounter() / 1000), dt is time elapsed since this
   sensor was last read. You can see how the lua environment is set up
   by looking at the variable env.

   There is a one-time initialization lua string (initString, see
   example) that is put in the first block of the json file where the
   first sensor name is defined. It will be run when the
   system.getSensors () call is made. This string is not expected to
   return any value, and is typically used for declaration of
   variables, functions and any "require" statements to bring in
   external content.

   To get access to the analog sliders (P1-P8) use the function Pn
   where n = 1 to 8. The function takes two arguments a1 and a2, for
   example P1(10,200). P1 will return values from 10 to 200 as the
   slider is moved from full left to full right.  If only the first
   parameter is specified, it returns values from 0 to that parameter,
   for example P2(1000) will return values from 0 to 1000 as the P2
   slider is moved. If no parameters are specified you get the
   standard slider behavior varying from -1 to 1, for example P5().

   The emulator's switches are also available as functions, for
   example SA() returns the value of switch sa and can have the values
   of -1, 0 and 1.
   
   Also available are a triangle wave function tri() with a period of
   1s and a square wave function sq() with a period of 1s. The
   triangle and square wave functions have an amplitude of +/-1. For
   convenience we also have the trig functions with a period of 1:
   sin(), cos() and tan() .. this way you can use the same time
   argument as sq and tri .. e.g. sq(t/10) and sin1(t/10) will both
   have a period of 10 seconds. The regular trig functions (math.sin,
   math.cos ...)  have a period of 2*pi as expected.

   A time sequencing function is availble, tseq(t, table) where t is
   the time argument and the second parameter is a table. tseq()
   divides is period up into n equal time segments and steps through
   the entries in the table in order. The amplitude of the tseq
   function is equal to the table entry. For example seq(t/20,
   {1,2,3,4}) creates a 20 second period repeating "staircase"
   function. from t=0 to t=5 it has a value of 1, from t=5 to t=10 a
   value of 2, from t=10 to t=15 a value of 3 and from t=15 to t=20 a
   value of 4, at which point it wraps around back to 1.

   There is also a switch sequencing function where you may specify an
   emulator switch (e.g. SA, SB, ... SJ) and a table. Each time the
   switch changes state, the output of the function becomes the next
   value in the specified table. For example swseq("SA",
   {1,2,3,4,5,6}). Since the "a" key on the keyboard changes state of
   the SA switch in the emulator, as you repeatedly type "a" on the
   keyboard, the function returns 1 then 2 then 3 ... then 6 then 1
   then 2 ... you get the idea.

   Within the json block that defines each sensor paramater, you can
   specify a "luaExp" string. This string will be prepended with
   "return " and run by the lua interpreter each time the sensor is
   read, and its return value is what the system.getSensorByID()
   function will return to the lua script.

   For example "luaExp":"P2(10,100) * math.sin(2*pi*t/10)" gives a 10
   second period sine wave whose amplitude varies from 10 to 100 as the
   P2 slider is moved from left to right.

   "luaExp":"P2(10,100) * math.sin(2*pi*t/10) + P6(1) * math.random()
   gives the same sine wave with a variable anount of noise added from
   the math.random function, with the noise amplitude going from 0 to
   1 controlled by slider P6.

   In addition to specifying a luaExp for each individual sensor (each
   ID/param pair) you may also specify a luaFunc sting. The luaFunc
   string will be evaluated as a lua chunk, not as a return value
   which allows you total flexibility to actually "write code" in the
   string. You may include a "return x" statement in luaFunc if you
   wish, and skip luaExp. Since there is no numeric return from
   luaFunc, you must either explicitly include a return value or you
   can use a luaExp string in addition to luaFunc if you wish. luaFunc
   is evaluated before luaExp as you would expect.

   Example - for sensors emulating a battery monitor, for the current
   sensor you might have this block of json in sensorEmulator.jsn:
   
    {"id":16819272,
     "param": 10,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaFunc":"Current[1]=P1(0,-4000); if CapLeft[1] > 0 then
      return P1(0,-4000) + 200 * math.random() else return 0 end",
     "label": "Current",
     "unit": "mA"
    },

   We are presuming that the tables, such as Current{} were declared in the
   initString at the top of the jsn file, for example:

    {"id":16819272, "param": 0,"sensorName": "", "label": "IBP",
     "initString":"CapTotal={5000,2500}; CapLeft={5000,2500}; Current={0,0}"},
   
   Note the use of rand() to generate some noise for realism, and how
   it is setting a global variable (Current) so that other sensors
   json blocks can refer to it by the same name. 

   A further example from a battery monitor emulator file:
   
    {"id":16819272,
     "param": 6,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaFunc":"CapLeft[1] = math.max(0, CapLeft[1] + dt * Current[1]/3600); return CapLeft[1]",
     "label": "Cap. left",
     "unit": "mAh"
    },

   This assumes the pack capacity is specified in mAh. CapLeft is the
   number of mAh left in the pack, CapTotal is the mAh capacity of the
   pack, and Current is the discharge current in ma, with the
   convention that a negative value is a d ischarge. These variables
   would have been delcared at the top of the file in the
   initString. The variable dt is supplied and indicates the
   time in seconds since this sensor (the ID/param pair) was read. The
   pre-defined variable dt is in seconds so we divide by 3600 to get
   hours.

   Support for generating GPS sensor info has also been added, along
   with a companion jsn file sensorEmulatorGPS.jsn that contains the
   local origin specified as lat, lon, the radius of the earth in the
   desired units (e.g. ft, m), and strings for creating a parametric
   equation of x and y (e.g. a Lissajous figure) for testing GPS
   applications. This file is also intended to be in the app's own
   directory just like sensorEmulator.jsn. Note that the figure drawn
   as a parametric equation of x and y will then cause the emulator to
   create the lat,long values that create the same figure, at the
   given lat/long origin point. Also note that the earth radius sets
   the units.  Specify the earth radius in the correct local units
   (e.g. ft, meters).

   At present, several less common table entries (see source code) are
   not implemented e.g. date and time. Easy to add if desired, format
   of date and time values can be observed in SensorL.lua.
   
   Future enhancements could be the addition of switches to emulate
   the behavior of table entry <sensor.valid>. Currently we always
   return sensor.valid = true.  Perhaps to avoid excessive CPU load we
   might only return a new value (running the lua interpreter) every
   200 msec or so to simulate actual telemetry sensor behavior. This
   could be an option in the jsn file.
   
   There is a companion lua program SensorL.lua that is similar,
   except that it reads a Jeti TX log file and replays the log file
   and supplies sensor data for selected sensors as they occured
   during the flight. This allows you to debug a lua program with
   actual flight data from a prior flight with your lua code exactly
   as it would be when deployed on the TX.

   The app file SensorE.lua is intended to be in the /Apps
   directory along with the lua source files. The sensorEmulator.jsn
   file and its GPS counterpart (if used) is expected to be
   lua-program-specific so it resides in the lua program's own
   directory, e.g. Apps/DFM-Smoke/sensorEmulator.jsn for use with the
   lua program /Apps/DFM-Smoke.lua

   Usage: 

   Put the sourcecode file SensorE.lua in the /Apps directory.

   Put a copy of the sensorEmulator.jsn file into the directory for
   the lua function that is going to use it, and edit it as required
   for that lua app. Ditto for sensorEmulatorGPS.jsn. Edit SensorE.jsn
   to point to that directory.

   By putting the sensorEmulator.jsn file into the app's own
   directory each app can define its own sensor names, ranges, etc

   The app file SensorE.lua is intended to be in the /Apps
   directory along with the lua source files. The sensorEmulator.jsn
   file and its GPS counterpart (if used) is expected to be
   lua-program-specific so it resides in the lua program's own
   directory, e.g. Apps/DFM-Smoke/sensorEmulator.jsn for use with the
   lua program /Apps/DFM-Smoke.lua

   The app makes two telemetry windows where one window displays the
   current sensors and values being emulated. and the other one
   displays the variables defined in the lua enviornment.

   No changes are required to lua apps that run with SensorE.
   
   When SensorE.lua is running, system function calls for
   system.getSensors(), system.getSensorById() and
   system.getSensorValueById() are rerouted to instead be handled by
   the emulator app functions with the pseudosensor
   functionality. Your sourcecode does not change and still has the
   calls to the system names in any case which is very convenient for
   debugging.

   The luaExp capability is inspired by Jeti's (very cool!)
   V-sensor.lua app. Thanks to Martin F at Jeti for suggesting to move
   this from a "require" module to a standalone app.

   Dave McQueeney Dec 2019
   SensorE.lua and SensorL.lua released under the MIT license.

Example SensorE.jsn file:

{
"configDir":"Apps/DFM-Graph"
}


Example sensorEmulatorGPS.jsn file:

{
    "lat0":41.00,
    "lon0":-73.00,
    "rE":21220539.7,
    "xString":"300*sin(2*math.pi*t/5)",
    "yString":"200*cos(2*math.pi*t/7)"
}

Example sensorEmulator.jsn file:

[

    {"id":16819272, "param": 0,"sensorName": "", "label": "IBP",
     "initString":
     "CapTotal={5000,2500,2500,3500}; 
      CapLeft={5000,2500, 2500,3500}; 
      Current={0,0,0,0}; 
      A123=require('A123')"
    },

    {"id":16819272,
     "param": 1,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "SOC",
     "unit": "%",
     "luaFunc":"--print(SA(),swseq('SA', {1,2,3,4,5,6}) )",
     "luaExp":"100*CapLeft[1]/CapTotal[1]"
    },
    {"id":16819272,
     "param": 2,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cell 1",
     "unit": "mV",
     "luaExp":"A123.Volt(100*CapLeft[1]/CapTotal[1])*1000"
    },
    {"id":16819272,
     "param": 3,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cell 2",
     "unit": "mv",
     "luaExp":"A123.Volt(100*CapLeft[1]/CapTotal[1])*1000"     
    },
    {"id":16819272,
     "param": 4,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Pack",
     "unit": "mV",
     "luaExp":"2*A123.Volt(100*CapLeft[1]/CapTotal[1])*1000"     
    },
    {"id":16819272,
     "param": 5,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaExp":"15",
     "label": "Supply",
     "unit": "V"
    },
    {"id":16819272,
     "param": 6,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cap. left",
     "unit": "mAh",
     "luaFunc":
     "CapLeft[1] = math.max(0, CapLeft[1] + dt * Current[1]/36); return CapLeft[1]"
    },
    {"id":16819272,
     "param": 7,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaExp":"CapTotal[1]",
     "label": "Cap. total",
     "unit": "mAh"
    },
    {"id":16819272,
     "param": 8,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Temperature",
     "unit": "°C",
     "luaExp":"P8(0,100)"
    },
    {"id":16819272,
     "param": 9,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaFunc":
     "Current[1]=P1(0,-4000);if CapLeft[1] > 0 then return P1(0,-4000)+200*math.random() else return 0 end",
     "label": "Current",
     "unit": "mA"
    },

    {"id":17867848, "param": 0,"sensorName": "", "label": "IBP"},

    {"id":17867848,
     "param": 1,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "SOC",
     "unit": "%",
     "luaExp":"100*CapLeft[2]/CapTotal[2]"
    },
    {"id":17867848,
     "param": 2,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cell 1",
     "unit": "mV",
     "luaExp":"A123.Volt(100*CapLeft[2]/CapTotal[2])*1000"
    },
    {"id":17867848,
     "param": 3,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cell 2",
     "unit": "mv",
     "luaExp":"A123.Volt(100*CapLeft[2]/CapTotal[2])*1000"     
    },
    {"id":17867848,
     "param": 4,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cell 3",
     "unit": "mv",
     "luaExp":"A123.Volt(100*CapLeft[2]/CapTotal[2])*1000"     
    },
    {"id":17867848,
     "param": 5,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Pack",
     "unit": "mV",
     "luaExp":"3*A123.Volt(100*CapLeft[2]/CapTotal[2])*1000"     
    },
    {"id":17867848,
     "param": 6,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaExp":"15",
     "label": "Supply",
     "unit": "V"
    },
    {"id":17867848,
     "param": 7,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cap. left",
     "unit": "mAh",
     "luaFunc":
     "CapLeft[2] = math.max(0, CapLeft[2] + dt * Current[2]/36); return CapLeft[2]"
    },
    {"id":17867848,
     "param": 8,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaExp":"CapTotal[2]",
     "label": "Cap. total",
     "unit": "mAh"
    },
    {"id":17867848,
     "param": 9,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Temperature",
     "unit": "°C",
     "luaExp":"P8(0,100)"
    },
    {"id":17867848,
     "param": 10,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaFunc":
     "Current[2]=P2(0,-4000);if CapLeft[2] > 0 then return P2(0,-4000)+200*math.random() else return 0 end",
     "label": "Current",
     "unit": "mA"
    },

    {"id":19965000, "param": 0,"sensorName": "", "label": "IBP"},

    {"id":19965000,
     "param": 1,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "SOC",
     "unit": "%",
     "luaExp":"100*CapLeft[3]/CapTotal[3]"
    },
    {"id":19965000,
     "param": 2,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cell 1",
     "unit": "mV",
     "luaExp":"A123.Volt(100*CapLeft[3]/CapTotal[3])*1000"
    },
    {"id":19965000,
     "param": 3,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cell 2",
     "unit": "mv",
     "luaExp":"A123.Volt(100*CapLeft[3]/CapTotal[3])*1000"     
    },
    {"id":19965000,
     "param": 4,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Pack",
     "unit": "mV",
     "luaExp":"2*A123.Volt(100*CapLeft[3]/CapTotal[3])*1000"     
    },
    {"id":19965000,
     "param": 5,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaExp":"15",
     "label": "Supply",
     "unit": "V"
    },
    {"id":19965000,
     "param": 6,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cap. left",
     "unit": "mAh",
     "luaFunc":
     "CapLeft[3] = math.max(0, CapLeft[3] + dt * Current[3]/36); return CapLeft[3]"
    },
    {"id":19965000,
     "param": 7,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaExp":"CapTotal[3]",
     "label": "Cap. total",
     "unit": "mAh"
    },
    {"id":19965000,
     "param": 8,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Temperature",
     "unit": "°C",
     "luaExp":"P8(0,100)"
    },
    {"id":19965000,
     "param": 10,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaFunc":
     "Current[3]=P3(0,-4000);if CapLeft[3] > 0 then return P3(0,-4000)+200*math.random() else return 0 end",
     "label": "Current",
     "unit": "mA"
    },

    {"id":21013576, "param": 0,"sensorName": "", "label": "IBP"},

    {"id":21013576,
     "param": 1,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "SOC",
     "unit": "%",
     "luaExp":"100*CapLeft[4]/CapTotal[4]"
    },
    {"id":21013576,
     "param": 2,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cell 1",
     "unit": "mV",
     "luaExp":"A123.Volt(100*CapLeft[4]/CapTotal[4])*1000"
    },
    {"id":21013576,
     "param": 3,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cell 2",
     "unit": "mv",
     "luaExp":"A123.Volt(100*CapLeft[4]/CapTotal[4])*1000"     
    },
    {"id":21013576,
     "param": 4,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Pack",
     "unit": "mV",
     "luaExp":"2*A123.Volt(100*CapLeft[4]/CapTotal[4])*1000"     
    },
    {"id":21013576,
     "param": 5,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaExp":"15",
     "label": "Supply",
     "unit": "V"
    },
    {"id":21013576,
     "param": 6,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Cap. left",
     "unit": "mAh",
     "luaFunc":
     "CapLeft[4] = math.max(0, CapLeft[4] + dt * Current[4]/36); return CapLeft[4]"
    },
    {"id":21013576,
     "param": 7,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaExp":"CapTotal[4]",
     "label": "Cap. total",
     "unit": "mAh"
    },
    {"id":21013576,
     "param": 8,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "label": "Temperature",
     "unit": "°C",
     "luaExp":"P8(0,100)"
    },
    {"id":21013576,
     "param": 10,
     "decimals": 0,
     "type": 1,
     "sensorName": "IBP",
     "luaFunc":
     "Current[4]=P4(0,-4000);if CapLeft[4] > 0 then return P4(0,-4000)+200*math.random() else return 0 end",
     "label": "Current",
     "unit": "mA"
    }

]

