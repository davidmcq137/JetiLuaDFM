--[[

----------------------------------------------------------------------------
   DFM-Chute.lua
   
   Manages deployment of a braking parachute with safety features to prevent
   unintended deployment. Inspired by the stand-alone product once produced 
   by Dan Gill
    
   Requires transmitter firmware 4.22 or higher.
    
----------------------------------------------------------------------------
	Released under MIT-license by DFM 2019
----------------------------------------------------------------------------

--]]

collectgarbage()

--------------------------------------------------------------------------------

-- Locals for application

--local trans11

local chuteCCVersion

local armSwitch, swa
local relSwitch, swr

local sensorLalist = { "..." }
local sensorIdlist = { "..." }
local sensorPalist = { "..." }

local wheelSe
local wheelSeId
local wheelSePa

local modelProps = {}

local nLoop = 0
local appStartTime
local baseLineLPS, loopsPerSecond = 47, 47

local DEBUG = false
--------------------------------------------------------------------------------

-- Read and set translations

local function setLanguage()
--[[
   local lng=system.getLocale()
   local file = io.readall("Apps/Lang/RCT-SpdA.jsn")
   local obj = json.decode(file)
   if(obj) then
      trans11 = obj[lng] or obj[obj.default]
   end
--]]
end

--------------------------------------------------------------------------------

-- Actions when settings changed

local function armSwitchChanged(value)
   armSwitch = value
   system.pSave("armSwitch", armSwitch)
end

local function relSwitchChanged(value)
   relSwitch = value
   system.pSave("relSwitch", relSwitch)
end

local function sensorChanged(value)
   wheelSe = value
   wheelSeId = sensorIdlist[wheelSe]
   wheelSePa = sensorPalist[wheelSe]
   if (wheelSeId == "...") then
      wheelSeId = 0
      wheelSePa = 0 
   end
   system.pSave("wheelSe", wheelSe)
   system.pSave("wheelSeId", wheelSeId)
   system.pSave("wheelSePa", wheelSePa)
end



--------------------------------------------------------------------------------

-- Draw the main form (Application inteface)

local function initForm()

   local fw = tonumber(system.getVersion())

   if (fw >= 4.22) then

      form.addRow(2)
      form.addLabel({label="Select Arming Switch", width=220})
      form.addInputbox(armSwitch, false, armSwitchChanged)

      form.addRow(2)
      form.addLabel({label="Select Release Switch", width=220})
      form.addInputbox(relSwitch, false, relSwitchChanged)

      form.addRow(2)
      form.addLabel({label="Select Wheel Sensor", width=220})
      form.addSelectbox(sensorLalist, wheelSe, true, sensorChanged)
      
      form.addRow(1)
      form.addLabel({label="DFM-Chute.lua Version "..chuteCCVersion.." ", font=FONT_MINI, alignRight=true})
   else
      form.addRow(1)
      form.addLabel({label="Please update, min. fw 4.22 required!"})
   end
end


--------------------------------------------------------------------------------

local throttleAuth, brakeAuth, flapAuth
local swa, swr

local function loop()

   
   if not appStartTime then appStartTime = system.getTimeCounter() end
      
   nLoop = nLoop + 1
   if nLoop >= 100 then
      loopsPerSecond = 1000 * nLoop / (system.getTimeCounter() - appStartTime)
      appStartTime = system.getTimeCounter()
      nLoop = 0
      --print("Loops per second:", loopsPerSecond)
   end
   
   -- first read the configuration from the switches that have been assigned

   swa = system.getInputsVal(armSwitch)
   swr = system.getInputsVal(relSwitch)

   -- next check all defined "auth" channels
   
   if modelProps.throttleChannel then
      if modelProps.throttleIdle > 0 then
	 throttleAuth = system.getInputs(modelProps.throttleChannel) > modelProps.throttleIdle
      else
	 throttleAuth = system.getInputs(modelProps.throttleChannel) < modelProps.throttleIdle
      end
   else
      throttleAuth = true
   end

   if modelProps.brakeChannel then
      if modelProps.brakeOn > 0 then
	 brakeAuth = system.getInputs(modelProps.brakeChannel) > modelProps.brakeOn
      else
	 brakeAuth = system.getInputs(modelProps.brakeChannel) < modelProps.brake
      end
   else
      brakeAuth = true
   end
   
   if modelProps.flapChannel then
      if modelProps.flapFull > 0 then
	 flapAuth = system.getInputs(modelProps.flapChannel) > modelProps.flapFull
      else
	 flapAuth = system.getInputs(modelProps.flapChannel) < modelProps.flapFull
      end
   else
      flapAuth = true
   end

   if throttleAuth then
      system.setControl(releaseIdx, -1)
   else
      system.setControl(releaseIdx,  1)
   end
   
end

local function chuteCB(w,h)
   lcd.drawText(5,  5, math.floor(0) .. " " .. "unit")
   lcd.drawText(5, 15, math.floor(1) .. " " .. "unit")
   lcd.drawText(5, 25, math.floor(2) .. " " .. "unit")
   
end

local function chute2CB(w,h)
   lcd.drawText(5, 5, math.floor(0) .. " " .. "unit")
end

-- Read available sensors for user to select

local function readSensors()
   local sensors = system.getSensors()
   for _, sensor in ipairs(sensors) do
      if (sensor.label ~= "") then
	 table.insert(sensorLalist, sensor.label)
	 table.insert(sensorIdlist, sensor.id)
	 table.insert(sensorPalist, sensor.param)
      end
   end
end


local function init()


   armSwitch = system.pLoad("armSwitch")
   relSwitch = system.pLoad("relSwitch")
   
   system.registerForm(1, MENU_APPS, "AutoChute Controller", initForm)

   system.registerTelemetry(1, "AutoChute",  4, chuteCB)
   system.registerTelemetry(2, "AutoChute2", 1, chute2CB)

   fg = io.readall("Apps/DFM-"..string.gsub(system.getProperty("Model")..".jsn", " ", "_"))
   if fg then modelProps=json.decode(fg) end

   print("modelProps.brakeChannel:", modelProps.brakeChannel)
   
   readsensors()
   
   releaseIdx = system.registerControl(1, "ChuteRelease", "P01")
   loadIdx =    system.registerControl(2, "ChuteLoad",    "P02")
   doorIdx =    system.registerControl(3, "ChuteDoor",    "P03")   

   print("dooridx:", dooridx)

   system.playFile('/Apps/DFM-Auto/Chute_Active.wav', AUDIO_QUEUE)
   
end

--------------------------------------------------------------------------------

chuteCCVersion = "0.0"
setLanguage()

collectgarbage()

return {init=init, loop=loop, author="DFM", version=chuteCCVersion,
	name="Auto Chute Controller"}
