{"version":3,"sources":["shadow/cljs/devtools/client/browser.cljs"],"mappings":"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","names":["var_args","args__4777__auto__","len__4771__auto__","i__4772__auto__","argseq__4778__auto__","cljs.core/IndexedSeq","shadow.cljs.devtools.client.browser/devtools-msg","seq51585","G__51586","cljs.core/first","cljs.core/next","self__4758__auto__","msg","args","shadow.cljs.devtools.client.env/log","cljs.core/seq","shadow.cljs.devtools.client.env/log-style","js/console.log.apply","js/console","cljs.core.into_array","cljs.core.into","shadow.cljs.devtools.client.browser/script-eval","code","js/goog.globalEval","shadow.cljs.devtools.client.browser/do-js-load","sources","seq__51594","chunk__51595","count__51596","i__51597","map__51602","cljs.core/--destructure-map","cljs.core.get","temp__5804__auto__","cljs.core/chunked-seq?","c__4591__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__51620","resource-id","output-name","resource-name","js","src","js/$CLJS.SHADOW_ENV.setLoaded","shadow.cljs.devtools.client.browser.devtools_msg","shadow.cljs.devtools.client.env/before-load-src","e51612","e51621","js/$CLJS.SHADOW_ENV.scriptBase","e","js/console.error","js/Error","shadow.cljs.devtools.client.browser/do-js-reload","complete-fn","failure-fn","shadow.cljs.devtools.client.env.do_js_reload","cljs.core.assoc","fn-sym","shadow.cljs.devtools.client.browser/do-js-requires","js-requires","seq__51662","chunk__51663","count__51664","i__51665","js-ns","require-str","p__51679","map__51680","shadow.cljs.devtools.client.browser/handle-build-complete","runtime","info","reload-info","warnings","iter__4564__auto__","s__51682","cljs.core/LazySeq","xs__6360__auto__","map__51687","iterys__4560__auto__","s__51684","c__4562__auto__","size__4563__auto__","b__51686","cljs.core/chunk-buffer","i__51685","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__51683","cljs.core/cons","cljs.core/rest","fs__4561__auto__","cljs.core.concat","iter__51681","cljs.core/not","warning","cljs.core.distinct","seq__51695","chunk__51696","count__51697","i__51698","map__51713","map__51717","line","column","w","js/console.warn","shadow.cljs.devtools.client.env/autoload","shadow.cljs.devtools.client.hud/load-end-success","cljs.core/empty?","shadow.cljs.devtools.client.env/ignore-warnings","sources-to-get","shadow.cljs.devtools.client.env/filter-reload-sources","cljs.core.get_in","p1__51678#","shadow.cljs.devtools.client.shared/load-sources","shadow.cljs.devtools.client.hud/load-failure","shadow.cljs.devtools.client.browser/page-load-uri","js/goog.global.document","goog.Uri/parse","js/document.location.href","shadow.cljs.devtools.client.browser/match-paths","old","new","cljs.core._EQ_","rel-new","cljs.core.subs","clojure.string/starts-with?","node-uri","node-uri-resolved","node-abs","p__51725","map__51726","shadow.cljs.devtools.client.browser/handle-asset-update","updates","seq__51727","chunk__51729","count__51730","i__51731","path","clojure.string/ends-with?","seq__51836","chunk__51840","count__51841","i__51842","seq__51850","chunk__51854","count__51855","i__51856","node","cljs.core.array_seq","js/document.querySelectorAll","path-match","new-link","G__51848","G__51849","G__51862","G__51863","cljs.core.rand","goog.dom/removeNode","goog.dom/insertSiblingAfter","shadow.cljs.devtools.client.browser/global-eval","cljs.core.not_EQ_","js/eval","p__51864","map__51865","shadow.cljs.devtools.client.browser/repl-init","repl-state","cljs.core.remove","shadow.cljs.devtools.client.env/src-is-loaded?","shadow.cljs.devtools.client.browser/runtime-info","js/SHADOW_CONFIG","shadow.json.to_clj","shadow.cljs.devtools.client.browser/client-info","cljs.core.merge","goog.userAgent/OPERA","goog.userAgent.product/CHROME","goog.userAgent/IE","goog.userAgent/EDGE","goog.userAgent/GECKO","goog.userAgent/SAFARI","goog.userAgent/WEBKIT","goog.userAgent/VERSION","goog.userAgent/PLATFORM","js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.browser","js/shadow.cljs.devtools.client.browser.ws-was-welcome-ref","shadow.cljs.devtools.client.browser/ws-was-welcome-ref","cljs.core.atom","shadow.cljs.devtools.client.env/enabled","shadow.cljs.devtools.client.env/worker-client-id","cljs.core/PROTOCOL_SENTINEL","shadow.cljs.devtools.client.shared/Runtime","this","p__51872","map__51873","_","p__51877","map__51878","repl-sources","done","error","p__51880","map__51881","reload-namespaces","sources-to-load","p__51882","map__51883","provides","and__4149__auto__","cljs.core/some","G__51884","shadow.remote.runtime.shared.call","cljs.core.map","p__51885","map__51886","e51887","ex","shadow.cljs.devtools.client.shared/add-plugin!","p__51888","map__51889","env","svc","shadow.remote.runtime.api/add-extension","cljs.core/reset!","shadow.cljs.devtools.client.hud/connection-error-clear!","shadow.cljs.devtools.client.env/patch-goog!","cljs.core/deref","shadow.cljs.devtools.client.hud/connection-error","p__51890","map__51891","shadow.cljs.devtools.client.hud/hud-hide","shadow.cljs.devtools.client.hud/load-start","shadow.cljs.devtools.client.env/run-custom-notify!","shadow.cljs.devtools.client.env/add-warnings-to-info","shadow.cljs.devtools.client.hud/hud-warnings","shadow.cljs.devtools.client.hud/load-end","shadow.cljs.devtools.client.hud/hud-error","p__51892","map__51893","event-op","client-id","p__51894","map__51895","shadow.remote.runtime.api/del-extension","shadow.cljs.devtools.client.shared/init-runtime!","shadow.cljs.devtools.client.websocket/start","shadow.cljs.devtools.client.websocket/send","shadow.cljs.devtools.client.websocket/stop"],"sourcesContent":["(ns shadow.cljs.devtools.client.browser\n  (:require\n    [clojure.string :as str]\n    [goog.dom :as gdom]\n    [goog.userAgent :as ua]\n    [goog.userAgent.product :as uap]\n    [goog.Uri]\n    [shadow.json :as j]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.cljs.devtools.client.console]\n    [shadow.cljs.devtools.client.hud :as hud]\n    [shadow.cljs.devtools.client.websocket :as ws]\n    [shadow.cljs.devtools.client.shared :as cljs-shared]\n    [shadow.remote.runtime.api :as api]\n    [shadow.remote.runtime.shared :as shared]))\n\n(defn devtools-msg [msg & args]\n  (when env/log\n    (if (seq env/log-style)\n      (js/console.log.apply js/console (into-array (into [(str \"%cshadow-cljs: \" msg) env/log-style] args)))\n      (js/console.log.apply js/console (into-array (into [(str \"shadow-cljs: \" msg)] args))))))\n\n(defn script-eval [code]\n  (js/goog.globalEval code))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-id output-name resource-name js] :as src} sources]\n    ;; should really stop using this and rather maintain our own record\n    ;; but without this hot-reload will reload shadow-js files with each cycle\n    ;; since they don't set it\n    (js/$CLJS.SHADOW_ENV.setLoaded output-name)\n\n    (devtools-msg \"load JS\" resource-name)\n    (env/before-load-src src)\n    (try\n      (script-eval (str js \"\\n//# sourceURL=\" js/$CLJS.SHADOW_ENV.scriptBase output-name))\n      (catch :default e\n        (when env/log\n          (js/console.error (str \"Failed to load \" resource-name) e))\n        (throw (js/Error. (str \"Failed to load \" resource-name \": \" (.-message e))))))))\n\n(defn do-js-reload [msg sources complete-fn failure-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      ;; FIXME: this gets noisy when using web-workers and either main or the workers not having certain code loaded\n      ;; should properly filter hook-fns and only attempt to call those that actually apply\n      ;; but thats a bit of work since we don't currently track the namespaces that are loaded.\n      (fn [fn-sym]\n        #_(devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn\n    failure-fn))\n\n(defn do-js-requires\n  \"when (require '[\\\"some-str\\\" :as x]) is done at the REPL we need to manually call the shadow.js.require for it\n   since the file only adds the shadow$provide. only need to do this for shadow-js.\"\n  [js-requires]\n  (doseq [js-ns js-requires]\n    (let [require-str (str \"var \" js-ns \" = shadow.js.require(\\\"\" js-ns \"\\\");\")]\n      (script-eval require-str))))\n\n(defn handle-build-complete [runtime {:keys [info reload-info] :as msg}]\n  (let [warnings\n        (->> (for [{:keys [resource-name warnings] :as src} (:sources info)\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (when env/log\n      (doseq [{:keys [msg line column resource-name] :as w} warnings]\n        (js/console.warn (str \"BUILD-WARNING in \" resource-name \" at [\" line \":\" column \"]\\n\\t\" msg))))\n\n    (if-not env/autoload\n      (hud/load-end-success)\n      (when (or (empty? warnings) env/ignore-warnings)\n        (let [sources-to-get\n              (env/filter-reload-sources info reload-info)]\n\n          (if-not (seq sources-to-get)\n            (hud/load-end-success)\n            (do (when-not (seq (get-in msg [:reload-info :after-load]))\n                  (devtools-msg \"reloading code but no :after-load hooks are configured!\"\n                    \"https://shadow-cljs.github.io/docs/UsersGuide.html#_lifecycle_hooks\"))\n                (cljs-shared/load-sources runtime sources-to-get #(do-js-reload msg % hud/load-end-success hud/load-failure)))\n            ))))))\n\n;; capture this once because the path may change via pushState\n(def ^goog page-load-uri\n  (when js/goog.global.document\n    (goog.Uri/parse js/document.location.href)))\n\n(defn match-paths [old new]\n  (if (= \"file\" (.getScheme page-load-uri))\n    ;; new is always an absolute path, strip first /\n    ;; FIXME: assuming that old is always relative\n    (let [rel-new (subs new 1)]\n      (when (or (= old rel-new)\n                (str/starts-with? old (str rel-new \"?\")))\n        rel-new))\n    ;; special handling for browsers including relative css\n    (let [^goog node-uri (goog.Uri/parse old)\n          node-uri-resolved (.resolve page-load-uri node-uri)\n          node-abs (.getPath ^goog node-uri-resolved)]\n\n      (and (or (= (.hasSameDomainAs page-load-uri node-uri))\n               (not (.hasDomain node-uri)))\n           (= node-abs new)\n           new))))\n\n(defn handle-asset-update [{:keys [updates] :as msg}]\n  (doseq [path updates\n          ;; FIXME: could support images?\n          :when (str/ends-with? path \"css\")]\n    (doseq [^js node (array-seq (js/document.querySelectorAll \"link[rel=\\\"stylesheet\\\"]\"))\n            :when (not (.-shadow$old node))\n            :let [path-match (match-paths (.getAttribute node \"href\") path)]\n            :when path-match]\n\n      (let [new-link\n            (doto (.cloneNode node true)\n              (.setAttribute \"href\" (str path-match \"?r=\" (rand))))]\n\n        ;; safeguard to prevent duplicating nodes in case a second css update happens\n        ;; before the first onload triggers.\n        (set! node -shadow$old true)\n\n        (set! (.-onload new-link)\n          (fn [e]\n            (gdom/removeNode node)))\n\n        (devtools-msg \"load CSS\" path-match)\n        (gdom/insertSiblingAfter new-link node)\n        ))))\n\n(defn global-eval [js]\n  (if (not= \"undefined\" (js* \"typeof(module)\"))\n    ;; don't eval in the global scope in case of :npm-module builds running in webpack\n    (js/eval js)\n    ;; hack to force eval in global scope\n    ;; goog.globalEval doesn't have a return value so can't use that for REPL invokes\n    (js* \"(0,eval)(~{});\" js)))\n\n(defn repl-init [runtime {:keys [repl-state]}]\n  (cljs-shared/load-sources\n    runtime\n    ;; maybe need to load some missing files to init REPL\n    (->> (:repl-sources repl-state)\n         (remove env/src-is-loaded?)\n         (into []))\n    (fn [sources]\n      (do-js-load sources)\n      (devtools-msg \"ready!\"))))\n\n(def runtime-info\n  (when (exists? js/SHADOW_CONFIG)\n    (j/to-clj js/SHADOW_CONFIG)))\n\n(def client-info\n  (merge\n    runtime-info\n    {:host (if js/goog.global.document\n             :browser\n             :browser-worker)\n     :user-agent\n     (str\n       (cond\n         ua/OPERA\n         \"Opera\"\n         uap/CHROME\n         \"Chrome\"\n         ua/IE\n         \"MSIE\"\n         ua/EDGE\n         \"Edge\"\n         ua/GECKO\n         \"Firefox\"\n         ua/SAFARI\n         \"Safari\"\n         ua/WEBKIT\n         \"Webkit\")\n       \" \" ua/VERSION\n       \" [\" ua/PLATFORM \"]\")\n\n     :dom (some? js/goog.global.document)}))\n\n(defonce ws-was-welcome-ref (atom false))\n\n(when (and env/enabled (pos? env/worker-client-id))\n\n  (extend-type cljs-shared/Runtime\n    api/IEvalJS\n    (-js-eval [this code]\n      (global-eval code))\n\n    cljs-shared/IHostSpecific\n    (do-invoke [this {:keys [js] :as _}]\n      (global-eval js))\n\n    (do-repl-init [runtime {:keys [repl-sources]} done error]\n      (cljs-shared/load-sources\n        runtime\n        ;; maybe need to load some missing files to init REPL\n        (->> repl-sources\n             (remove env/src-is-loaded?)\n             (into []))\n        (fn [sources]\n          (do-js-load sources)\n          (done))))\n\n    (do-repl-require [runtime {:keys [sources reload-namespaces js-requires] :as msg} done error]\n      (let [sources-to-load\n            (->> sources\n                 (remove (fn [{:keys [provides] :as src}]\n                           (and (env/src-is-loaded? src)\n                                (not (some reload-namespaces provides)))))\n                 (into []))]\n\n        (if-not (seq sources-to-load)\n          (done [])\n          (shared/call runtime\n            {:op :cljs-load-sources\n             :to env/worker-client-id\n             :sources (into [] (map :resource-id) sources-to-load)}\n\n            {:cljs-sources\n             (fn [{:keys [sources] :as msg}]\n               (try\n                 (do-js-load sources)\n                 (when (seq js-requires)\n                   (do-js-requires js-requires))\n                 (done sources-to-load)\n                 (catch :default ex\n                   (error ex))))})))))\n\n  (cljs-shared/add-plugin! ::client #{}\n    (fn [{:keys [runtime] :as env}]\n      (let [svc {:runtime runtime}]\n\n        (api/add-extension runtime ::client\n          {:on-welcome\n           (fn []\n             ;; FIXME: why does this break stuff when done when the namespace is loaded?\n             ;; why does it have to wait until the websocket is connected?\n             (reset! ws-was-welcome-ref true)\n             (hud/connection-error-clear!)\n             (env/patch-goog!)\n             (devtools-msg (str \"#\" (-> runtime :state-ref deref :client-id) \" ready!\")))\n\n           :on-disconnect\n           (fn [e]\n             ;; don't show error if connection was denied\n             ;; that already shows an error\n             (when @ws-was-welcome-ref\n               (hud/connection-error \"The Websocket connection was closed!\")\n\n               (reset! ws-was-welcome-ref false)\n               ))\n\n           :on-reconnect\n           (fn [e]\n             (hud/connection-error \"Reconnecting ...\"))\n\n           :ops\n           {:access-denied\n            (fn [msg]\n              (reset! ws-was-welcome-ref false)\n              (hud/connection-error\n                (str \"Stale Output! Your loaded JS was not produced by the running shadow-cljs instance.\"\n                     \" Is the watch for this build running?\")))\n\n            :cljs-runtime-init\n            (fn [msg]\n              (repl-init runtime msg))\n\n            :cljs-asset-update\n            (fn [{:keys [updates] :as msg}]\n              ;; (js/console.log \"cljs-asset-update\" msg)\n              (handle-asset-update msg))\n\n            :cljs-build-configure\n            (fn [msg])\n\n            :cljs-build-start\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-start\" msg)\n              (hud/hud-hide)\n              (hud/load-start)\n              (env/run-custom-notify! (assoc msg :type :build-start)))\n\n            :cljs-build-complete\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-complete\" msg)\n              (let [msg (env/add-warnings-to-info msg)]\n                (hud/hud-warnings msg)\n                (handle-build-complete runtime msg)\n                (env/run-custom-notify! (assoc msg :type :build-complete))))\n\n            :cljs-build-failure\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-failure\" msg)\n              (hud/load-end)\n              (hud/hud-error msg)\n              (env/run-custom-notify! (assoc msg :type :build-failure)))\n\n            ::env/worker-notify\n            (fn [{:keys [event-op client-id]}]\n              (cond\n                (and (= :client-disconnect event-op)\n                     (= client-id env/worker-client-id))\n                (do (hud/connection-error-clear!)\n                    (hud/connection-error \"The watch for this build was stopped!\"))\n\n                (= :client-connect event-op)\n                (do (hud/connection-error-clear!)\n                    (hud/connection-error \"The watch for this build was restarted. Reload required!\"))\n                ))}})\n        svc))\n\n    (fn [{:keys [runtime] :as svc}]\n      (api/del-extension runtime ::client)))\n\n  (cljs-shared/init-runtime! client-info ws/start ws/send ws/stop))"]}