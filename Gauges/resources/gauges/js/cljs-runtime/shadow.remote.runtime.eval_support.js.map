{"version":3,"sources":["shadow/remote/runtime/eval_support.cljs"],"mappings":"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","names":["shadow.remote.runtime.eval-support/obj-support-inst","shadow.remote.runtime.eval-support/get-ref","oid","cljs.core.ex_info","shadow.remote.runtime.obj-support/get-ref","p__51358","p__51359","map__51360","cljs.core/--destructure-map","cljs.core.get","map__51361","shadow.remote.runtime.eval-support/cljs-eval","runtime","obj-support","svc","input","msg","shadow.remote.runtime.api/cljs-eval","p__51362","map__51363","result","info","G__51366","cljs.core/Keyword","map__51367","ex-client-id","ex-oid","report","shadow.remote.runtime.shared/reply","map__51372","ex","shadow.remote.runtime.obj-support/register","map__51373","warnings","map__51378","results","time-start","time-finish","val","cljs.core._EQ_","cljs.core/count","cljs.core/first","ref-oid","js/console.error","p__51385","p__51386","map__51390","map__51391","shadow.remote.runtime.eval-support/js-eval","code","e51395","res","shadow.remote.runtime.api/js-eval","e","shadow.remote.runtime.eval-support/start","p1__51396#","p1__51397#","shadow.remote.runtime.shared/add-extension","p__51399","map__51400","shadow.remote.runtime.eval-support/stop","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.eval-support\n  (:require\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.obj-support :as obj-support]\n    ))\n\n(def ^:dynamic obj-support-inst nil)\n\n(defn get-ref [oid]\n  (when-not obj-support-inst\n    (throw (ex-info \"obj-support not bound, can only call this from eval\" {:oid oid})))\n  (obj-support/get-ref obj-support-inst oid))\n\n(defn cljs-eval\n  [{:keys [^Runtime runtime obj-support] :as svc} {:keys [input] :as msg}]\n  ;; can't use binding because this has to go async\n  ;; required for $o in the UI to work, would be good to have a cleaner API for this\n  (set! obj-support-inst obj-support)\n  (p/cljs-eval runtime input\n    ;; {:code \"1 2 3\"} would trigger 3 results\n    (fn [{:keys [result] :as info}]\n      (set! obj-support-inst nil) ;; cleanup\n\n      ;; (js/console.log \"cljs-eval\" info msg)\n\n      (case result\n        :compile-error\n        (let [{:keys [ex-client-id ex-oid report]} info]\n          (shared/reply runtime msg\n            {:op :eval-compile-error\n             :ex-client-id ex-client-id\n             :ex-oid ex-oid\n             :report report}))\n\n        :runtime-error\n        (let [{:keys [ex]} info\n              ex-oid (obj-support/register obj-support ex {:msg input})]\n          (shared/reply runtime msg\n            {:op :eval-runtime-error\n             :ex-oid ex-oid}))\n\n        :warnings\n        (let [{:keys [warnings]} info]\n          (shared/reply runtime msg\n            {:op :eval-compile-warnings\n             :warnings warnings}))\n\n        :ok\n        (let [{:keys [results warnings time-start time-finish]} info\n              val\n              (if (= 1 (count results))\n                (first results)\n                results)]\n          ;; pretending to be one result always\n          ;; don't want to send multiple results in case code contained multiple forms\n          (let [ref-oid (obj-support/register obj-support val {:msg input})]\n            (shared/reply runtime msg\n              {:op :eval-result-ref\n               :ref-oid ref-oid\n               :eval-ms (- time-finish time-start)\n               :eval-ns (:ns info)\n               :warnings warnings})))\n\n        (js/console.error \"Unhandled cljs-eval result\" info)))))\n\n(defn js-eval\n  [{:keys [^Runtime runtime obj-support] :as svc} {:keys [code] :as msg}]\n\n  (try\n    (let [res (p/js-eval runtime code)\n          ref-oid (obj-support/register obj-support res {:js-code code})]\n\n      (shared/reply runtime msg\n        ;; FIXME: separate result ops for :cljs-eval :js-eval :clj-eval?\n        {:op :eval-result-ref\n         :ref-oid ref-oid}))\n\n    (catch :default e\n      (shared/reply runtime msg\n        {:op :eval-error\n         :e (.-message e)}))))\n\n(defn start [runtime obj-support]\n  (let [svc\n        {:runtime runtime\n         :obj-support obj-support}]\n\n    (shared/add-extension runtime\n      ::ext\n      {:ops\n       {:js-eval #(js-eval svc %)\n        :cljs-eval #(cljs-eval svc %)}})\n\n    svc))\n\n(defn stop [{:keys [runtime] :as svc}]\n  (p/del-extension runtime ::ext))"]}