{"version":3,"sources":["shadow/remote/runtime/tap_support.cljc"],"mappings":";AAMA,AAAA,AAAAA,AAAAC,AAAMK;AAAN,AAAA,AAAAJ,AAAAF;AAAAE,AAAA,AAAAC,AAAAD;AAAAA,AAC6CQ;AAD7C,AAAAN,AAAAF,AAAA,AACWK;AADX,AAAAH,AAAAF,AAAA,AACoBM;AADpB,AAAAJ,AAAAF,AAAA,AACgCO;AADhCJ,AAAAJ;AAAAI,AAAA,AAAAF,AAAAE;AAAAA,AAEsDU;AAFtD,AAAAX,AAAAC,AAAA,AAEWM;AAFX,AAAAP,AAAAC,AAAA,AAEgBO;AAFhB,AAAAR,AAAAC,AAAA,AAEwBQ;AAFxB,AAAAT,AAAAC,AAAA,AAAA,AAEgCS;AAFhC,AAGE,AAACE,AAAMT,AAASU,AAAMN,AAAKI;;AAS3B,AAAMF;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAACK,AAAaT,AAAQM,AAIL,AAACK,AAAI,AAAKC,AACV,AAAA,AAACE;AADI,AAAA,AAAA,AAAA,AAAgBF,AAAa,AAACC,AAAkBd,AAAYa;AAFjE,AAACF,AAAoBX,AAAYM;;AAHpD;;;AAQF,AAAA,AAAAU,AAAAC,AAAMG;AAAN,AAAA,AAAAF,AAAAF;AAAAE,AAAA,AAAAvB,AAAAuB;AAAA,AAAAtB,AAAAsB,AAAA,AACWnB;AADXoB,AAAAF;AAAAE,AAAA,AAAAxB,AAAAwB;AAAA,AAAAvB,AAAAuB,AAAA,AAC8BhB;AAD9B,AAEE,AAACK,AAAMT,AAASsB,AAAOlB;;AAEzB,AAAA,AAAAmB,AAAAC,AAAMG;AAAN,AAAA,AAAAF,AAAAF;AAAAE,AAAA,AAAA7B,AAAA6B;AAAA,AAAA5B,AAAA4B,AAAA,AACWxB;AADX,AAAAJ,AAAA4B,AAAA,AACuBvB;AADvBwB,AAAAF;AAAAE,AAAA,AAAA9B,AAAA8B;AAAAA,AAEiClB;AAFjC,AAAAX,AAAA6B,AAAA,AAAA,AAEWnB;AAFX,AAGE,AAAMqB,AAAQ,AAAChB,AAAoBX,AAAYM;AAA/C,AACE,AAAA,AAAA,AAAA,AAAA,AAACI,AAAaT,AAAQM,AACWoB;;AAErC,AAAA,AAAAC,AAAME,AACwBC;AAD9B,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAAlC,AAAAkC;AAAAA,AACyB3B;AADzB,AAAAN,AAAAiC,AAAA,AACW9B;AADX,AAEE,AAACS,AAAMT,AAASsB,AAAOU;;AAEzB,AAAA,AAAMC,AAAO/B,AAAQD;AAArB,AACE,AAAMD,AACA,AAAA,AAACkC;AAEDC,AACA,AAAiBC;AAAjB,AACE,AAAM,AAAA,AAAA,AAAOA;AAAb,AACE,AAAMtB,AAAI,AAAA,AAAA,AAAA,AAACuB,AAAapC,AAAYmC;AAApC,AACE,AAAAE,AAAA,AAAAC,AAAA,AAAAC,AAA0BxC;AAA1ByC,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASZ;AAAT,AAAAa,AAAAD,AAAA,AAAA,AAAaW;AAAb,AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAYtD,AAAsB8B,AAASlB;;AAD9C;AAAA,AAAAwB;AAAAG;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAG,AAAA,AAAAP,AAAAD;AAAA,AAAA,AAAAQ;AAAA,AAAA,AAAAR,AAAAQ;AAAA,AAAA,AAAA,AAAAC,AAAAT;AAAA,AAAAU,AAAA,AAAAC,AAAAX;AAAA,AAAA,AAAA,AAAAY,AAAAZ;AAAAU;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAAI,AAAA,AAAAC,AAAAf;AAAA,AAAAO,AAAAO,AAAA,AAAA,AAASpB;AAAT,AAAAa,AAAAO,AAAA,AAAA,AAAaG;AAAb,AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAYtD,AAAsB8B,AAASlB;;AAD9C;AAAA,AAAA,AAAAwC,AAAAhB;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAFJ;;;AALR,AAAA,AAAA,AAAA,AAAA,AAUMnC,AACUD,AACID,AACLkC,AACEnC;AAdjB,AAgBE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAyD,AAACI,AAAgB3D;AAAjB,AAOoB,AAAAuD,AAAC1D,AAAcI;AAPnC,AAAA,AAAAuD;AAAA,AAQsB,AAAAA,AAACrC,AAAgBlB;AARvC,AAAA,AAAAwD;AAAA,AAS0B,AAAAA,AAAChC,AAAoBxB;AAT/C,AAAA,AAAAyD;AAAA,AAUwB,AAAAA,AAAC7B,AAAgB5B;;;AAEzC,AAAC2D,AAAQ3B;;AACThC;;AAEJ,AAAA,AAAA4D,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAApE,AAAAoE;AAAAA,AAAwC7D;AAAxC,AAAAN,AAAAmE,AAAA,AAAoB7B;AAApB,AAAAtC,AAAAmE,AAAA,AAA2B9D;AAA3B,AACE,AAACgE,AAAW/B;;AACZ,AAAA,AAACgC,AAAgBjE","names":["p__51346","p__51347","map__51348","cljs.core/--destructure-map","cljs.core.get","map__51349","shadow.remote.runtime.tap-support/tap-subscribe","subs-ref","obj-support","runtime","svc","from","summary","history","num","msg","cljs.core.swap_BANG_","cljs.core/assoc","shadow.remote.runtime.shared/reply","shadow.remote.runtime.obj-support/get-tap-history","cljs.core.map","oid","shadow.remote.runtime.obj-support/obj-describe*","cljs.core.into","p__51350","p__51351","map__51352","map__51353","shadow.remote.runtime.tap-support/tap-unsubscribe","cljs.core/dissoc","p__51354","p__51355","map__51356","map__51357","shadow.remote.runtime.tap-support/request-tap-history","tap-ids","p__51364","map__51365","shadow.remote.runtime.tap-support/tool-disconnect","tid","shadow.remote.runtime.tap-support/start","cljs.core.atom","tap-fn","obj","shadow.remote.runtime.obj-support/register","seq__51374","cljs.core/seq","cljs.core/deref","chunk__51375","count__51376","i__51377","vec__51387","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__4591__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__51392","cljs.core/first","cljs.core/next","tap-config","shadow.remote.runtime.api/relay-msg","p1__51368#","p1__51369#","p1__51370#","p1__51371#","shadow.remote.runtime.api/add-extension","cljs.core/add-tap","p__51398","map__51404","shadow.remote.runtime.tap-support/stop","cljs.core/remove-tap","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.tap-support\n  (:require\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.obj-support :as obj]))\n\n(defn tap-subscribe\n  [{:keys [subs-ref obj-support runtime] :as svc}\n   {:keys [from summary history num] :or {num 10} :as msg}]\n  (swap! subs-ref assoc from msg)\n  ;; FIXME: should this always confirm?\n  ;; tool may want to do stuff even if it didn't request a history?\n  ;; but it can do so optimistically and just receive taps?\n\n  ;; we need an option to send out the history because of concurrency issues\n  ;; otherwise it may do a :request-tap-history before :tap-subscribe\n  ;; which may cause it to miss taps inbetween\n  ;; or after which means it may have received taps before receiving the history\n  (when history\n    (shared/reply runtime msg\n      {:op :tap-subscribed\n       :history (->> (obj/get-tap-history obj-support num)\n                     ;; FIXME: only send summary if requested\n                     (map (fn [oid] {:oid oid :summary (obj/obj-describe* obj-support oid)}))\n                     (into []))})))\n\n(defn tap-unsubscribe\n  [{:keys [subs-ref]} {:keys [from]}]\n  (swap! subs-ref dissoc from))\n\n(defn request-tap-history\n  [{:keys [obj-support runtime]}\n   {:keys [num] :or {num 10} :as msg}]\n  (let [tap-ids (obj/get-tap-history obj-support num)]\n    (shared/reply runtime msg {:op :tap-history\n                               :oids tap-ids})))\n\n(defn tool-disconnect\n  [{:keys [subs-ref] :as svc} tid]\n  (swap! subs-ref dissoc tid))\n\n(defn start [runtime obj-support]\n  (let [subs-ref\n        (atom {})\n\n        tap-fn\n        (fn runtime-tap [obj]\n          (when (some? obj)\n            (let [oid (obj/register obj-support obj {:from :tap})]\n              (doseq [[tid tap-config] @subs-ref]\n                (p/relay-msg runtime {:op :tap :to tid :oid oid})))))\n\n        svc\n        {:runtime runtime\n         :obj-support obj-support\n         :tap-fn tap-fn\n         :subs-ref subs-ref}]\n\n    (p/add-extension runtime\n      ::ext\n      {:ops\n       ;; would be nicer to just pass tap-subscribe and have the runtime\n       ;; automatically pass extra args. but this makes everything REPL unfriendly\n       ;; and will require a runtime restart for every op change\n       ;; this way only adding ops requires a restart\n       {:tap-subscribe #(tap-subscribe svc %)\n        :tap-unsubscribe #(tap-unsubscribe svc %)\n        :request-tap-history #(request-tap-history svc %)}\n       :on-tool-disconnect #(tool-disconnect svc %)})\n\n    (add-tap tap-fn)\n    svc))\n\n(defn stop [{:keys [tap-fn runtime] :as svc}]\n  (remove-tap tap-fn)\n  (p/del-extension runtime ::ext))\n"]}