{"version":3,"sources":["dynamic_repo.cljs"],"mappings":"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","names":["dynamic-repo/new-random-token","n-random-bytes","alphabet","bs","G__53299","js/Uint8Array","js/window.crypto.getRandomValues","cljs.core.apply","cljs.core/str","iter__4564__auto__","s__53301","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4562__auto__","size__4563__auto__","cljs.core/count","b__53303","cljs.core/chunk-buffer","i__53302","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__53300","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","cljs.core.nth","dynamic-repo/get-or-create-token!","key","or__4160__auto__","js/window.localStorage","t","dynamic-repo/apps-request-result","cljs.core.atom","dynamic-repo/modal-state","dynamic-repo/send-dynamic-repo-request!","json-data","cljs.core/reset!","xhr","js/goog.net.XhrIo","goog.net.EventType/COMPLETE","_","js/JSON","rum.core/lazy-build","rum.core/build-defc","daiquiri.interpreter/interpret","dynamic-repo/repo-result-modal","rum.core/reactive","st","rum.core/react","G__53321","cljs.core/Keyword","res","repo_url","G__53322","error","G__53323","cljs.core.pr_str","cljs.core/chunk-first"],"sourcesContent":["(ns dynamic-repo\n  (:require [rum.core :as rum])\n  (:import [goog.net XhrIo]\n           [goog.net EventType]))\n\n(defn new-random-token [n-random-bytes]\n  (let [alphabet \"234679CDFGHJRTWX\"\n        bs (doto (js/Uint8Array. n-random-bytes)\n             (js/window.crypto.getRandomValues))]\n    (apply str\n           (for [i (range (.-length bs))]\n             (str (nth alphabet (bit-shift-right (bit-and (aget bs i) 2r00001111) 0))\n                  (nth alphabet (bit-shift-right (bit-and (aget bs i) 2r11110000) 4)))))))\n\n(defn get-or-create-token! []\n  (let [key  \"user-id-token\"]\n    (or (.getItem js/window.localStorage key)\n        (let [t (new-random-token 4)]\n          (.setItem js/window.localStorage key t)\n          t))))\n\n(def apps-request-result (atom nil))\n(def modal-state (atom nil))\n\n(defn send-dynamic-repo-request! [json-data]\n  (reset! modal-state :repo-request)\n  (let [xhr (XhrIo.)]\n    (.listen xhr EventType/COMPLETE\n             (fn [_]\n               (reset! apps-request-result (.getResponseJson xhr))))\n    (.send xhr (str \"/dynamic-repo-v2?token=\" (get-or-create-token!))\n           \"POST\"\n           (.stringify js/JSON json-data nil 2)\n           #js {\"Content-Type\" \"application/json;charset=UTF-8\"})))\n\n(rum/defc repo-result-modal < rum/reactive\n  [] \n  (when-let [st (rum/react modal-state)]\n    [:div.modal\n     [:div.modal-content\n      [:span.close {:on-click #(reset! modal-state nil)} \"\\u00d7\"]\n      (case st\n        :repo-request (let [res (rum/react apps-request-result)\n                            repo_url (some-> res (aget \"repo_url\"))\n                            error (some-> res (aget \"error\"))]\n                        [:div\n                         \"Dynamic repo request\"\n                         (cond\n                           (nil? res) [:span \"Waiting for server...\"]\n                           error [:p \"Server error.\"]\n                           repo_url [:code [:pre repo_url]])])\n        (str \"Weird modal state:\" (pr-str st) ))\n      [:div [:button {:on-click #(reset! modal-state nil)} \"Close\"]]]]))\n\n"]}