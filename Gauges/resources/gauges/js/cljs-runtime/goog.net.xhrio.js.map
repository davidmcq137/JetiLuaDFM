{
"version":3,
"file":"goog.net.xhrio.js",
"lineCount":478,
"mappings":"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",
"sources":["goog/net/xhrio.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Wrapper class for handling XmlHttpRequests.\n *\n * One off requests can be sent through goog.net.XhrIo.send() or an\n * instance can be created to send multiple requests.  Each request uses its\n * own XmlHttpRequest object and handles clearing of the event callback to\n * ensure no leaks.\n *\n * XhrIo is event based, it dispatches events on success, failure, finishing,\n * ready-state change, or progress (download and upload).\n *\n * The ready-state or timeout event fires first, followed by\n * a generic completed event. Then the abort, error, or success event\n * is fired as appropriate. Progress events are fired as they are\n * received. Lastly, the ready event will fire to indicate that the\n * object may be used to make another request.\n *\n * The error event may also be called before completed and\n * ready-state-change if the XmlHttpRequest.open() or .send() methods throw.\n *\n * This class does not support multiple requests, queuing, or prioritization.\n *\n * When progress events are supported by the browser, and progress is\n * enabled via .setProgressEventsEnabled(true), the\n * goog.net.EventType.PROGRESS event will be the re-dispatched browser\n * progress event. Additionally, a DOWNLOAD_PROGRESS or UPLOAD_PROGRESS event\n * will be fired for download and upload progress respectively.\n */\n\n\ngoog.provide('goog.net.XhrIo');\ngoog.provide('goog.net.XhrIo.ResponseType');\n\ngoog.require('goog.Timer');\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.debug.entryPointRegistry');\ngoog.require('goog.events.EventTarget');\ngoog.require('goog.json.hybrid');\ngoog.require('goog.log');\ngoog.require('goog.net.ErrorCode');\ngoog.require('goog.net.EventType');\ngoog.require('goog.net.HttpStatus');\ngoog.require('goog.net.XmlHttp');\ngoog.require('goog.object');\ngoog.require('goog.string');\ngoog.require('goog.structs');\ngoog.require('goog.structs.Map');\ngoog.require('goog.uri.utils');\ngoog.require('goog.userAgent');\ngoog.requireType('goog.Uri');\ngoog.requireType('goog.debug.ErrorHandler');\ngoog.requireType('goog.net.XhrLike');\ngoog.requireType('goog.net.XmlHttpFactory');\n\ngoog.scope(function() {\n\n'use strict';\n/**\n * Basic class for handling XMLHttpRequests.\n * @param {goog.net.XmlHttpFactory=} opt_xmlHttpFactory Factory to use when\n *     creating XMLHttpRequest objects.\n * @constructor\n * @extends {goog.events.EventTarget}\n */\ngoog.net.XhrIo = function(opt_xmlHttpFactory) {\n  'use strict';\n  XhrIo.base(this, 'constructor');\n\n  /**\n   * Map of default headers to add to every request, use:\n   * XhrIo.headers.set(name, value)\n   * @type {!goog.structs.Map}\n   */\n  this.headers = new goog.structs.Map();\n\n  /**\n   * Optional XmlHttpFactory\n   * @private {goog.net.XmlHttpFactory}\n   */\n  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;\n\n  /**\n   * Whether XMLHttpRequest is active.  A request is active from the time send()\n   * is called until onReadyStateChange() is complete, or error() or abort()\n   * is called.\n   * @private {boolean}\n   */\n  this.active_ = false;\n\n  /**\n   * The XMLHttpRequest object that is being used for the transfer.\n   * @private {?goog.net.XhrLike.OrNative}\n   */\n  this.xhr_ = null;\n\n  /**\n   * The options to use with the current XMLHttpRequest object.\n   * @private {?Object}\n   */\n  this.xhrOptions_ = null;\n\n  /**\n   * Last URL that was requested.\n   * @private {string|goog.Uri}\n   */\n  this.lastUri_ = '';\n\n  /**\n   * Method for the last request.\n   * @private {string}\n   */\n  this.lastMethod_ = '';\n\n  /**\n   * Last error code.\n   * @private {!goog.net.ErrorCode}\n   */\n  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;\n\n  /**\n   * Last error message.\n   * @private {Error|string}\n   */\n  this.lastError_ = '';\n\n  /**\n   * Used to ensure that we don't dispatch an multiple ERROR events. This can\n   * happen in IE when it does a synchronous load and one error is handled in\n   * the ready state change and one is handled due to send() throwing an\n   * exception.\n   * @private {boolean}\n   */\n  this.errorDispatched_ = false;\n\n  /**\n   * Used to make sure we don't fire the complete event from inside a send call.\n   * @private {boolean}\n   */\n  this.inSend_ = false;\n\n  /**\n   * Used in determining if a call to {@link #onReadyStateChange_} is from\n   * within a call to this.xhr_.open.\n   * @private {boolean}\n   */\n  this.inOpen_ = false;\n\n  /**\n   * Used in determining if a call to {@link #onReadyStateChange_} is from\n   * within a call to this.xhr_.abort.\n   * @private {boolean}\n   */\n  this.inAbort_ = false;\n\n  /**\n   * Number of milliseconds after which an incomplete request will be aborted\n   * and a {@link goog.net.EventType.TIMEOUT} event raised; 0 means no timeout\n   * is set.\n   * @private {number}\n   */\n  this.timeoutInterval_ = 0;\n\n  /**\n   * Timer to track request timeout.\n   * @private {?number}\n   */\n  this.timeoutId_ = null;\n\n  /**\n   * The requested type for the response. The empty string means use the default\n   * XHR behavior.\n   * @private {goog.net.XhrIo.ResponseType}\n   */\n  this.responseType_ = ResponseType.DEFAULT;\n\n  /**\n   * Whether a \"credentialed\" request is to be sent (one that is aware of\n   * cookies and authentication). This is applicable only for cross-domain\n   * requests and more recent browsers that support this part of the HTTP Access\n   * Control standard.\n   *\n   * @see http://www.w3.org/TR/XMLHttpRequest/#the-withcredentials-attribute\n   *\n   * @private {boolean}\n   */\n  this.withCredentials_ = false;\n\n  /**\n   * Whether progress events are enabled for this request. This is\n   * disabled by default because setting a progress event handler\n   * causes pre-flight OPTIONS requests to be sent for CORS requests,\n   * even in cases where a pre-flight request would not otherwise be\n   * sent.\n   *\n   * @see http://xhr.spec.whatwg.org/#security-considerations\n   *\n   * Note that this can cause problems for Firefox 22 and below, as an\n   * older \"LSProgressEvent\" will be dispatched by the browser. That\n   * progress event is no longer supported, and can lead to failures,\n   * including throwing exceptions.\n   *\n   * @see http://bugzilla.mozilla.org/show_bug.cgi?id=845631\n   * @see b/23469793\n   *\n   * @private {boolean}\n   */\n  this.progressEventsEnabled_ = false;\n\n  /**\n   * True if we can use XMLHttpRequest's timeout directly.\n   * @private {boolean}\n   */\n  this.useXhr2Timeout_ = false;\n};\ngoog.inherits(goog.net.XhrIo, goog.events.EventTarget);\n\nconst XhrIo = goog.net.XhrIo;\n\n/**\n * Response types that may be requested for XMLHttpRequests.\n * @enum {string}\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute\n */\ngoog.net.XhrIo.ResponseType = {\n  DEFAULT: '',\n  TEXT: 'text',\n  DOCUMENT: 'document',\n  // Not supported as of Chrome 10.0.612.1 dev\n  BLOB: 'blob',\n  ARRAY_BUFFER: 'arraybuffer',\n};\n\nconst ResponseType = goog.net.XhrIo.ResponseType;\n\n\n/**\n * A reference to the XhrIo logger\n * @private {?goog.log.Logger}\n * @const\n */\ngoog.net.XhrIo.prototype.logger_ = goog.log.getLogger('goog.net.XhrIo');\n\n\n/**\n * The Content-Type HTTP header name\n * @type {string}\n */\ngoog.net.XhrIo.CONTENT_TYPE_HEADER = 'Content-Type';\n\n\n/**\n * The Content-Transfer-Encoding HTTP header name\n * @type {string}\n */\ngoog.net.XhrIo.CONTENT_TRANSFER_ENCODING = 'Content-Transfer-Encoding';\n\n\n/**\n * The pattern matching the 'http' and 'https' URI schemes\n * @type {!RegExp}\n */\ngoog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;\n\n\n/**\n * The methods that typically come along with form data.  We set different\n * headers depending on whether the HTTP action is one of these.\n * @type {!Array<string>}\n */\ngoog.net.XhrIo.METHODS_WITH_FORM_DATA = ['POST', 'PUT'];\n\n\n/**\n * The Content-Type HTTP header value for a url-encoded form\n * @type {string}\n */\ngoog.net.XhrIo.FORM_CONTENT_TYPE =\n    'application/x-www-form-urlencoded;charset=utf-8';\n\n\n/**\n * The XMLHttpRequest Level two timeout delay ms property name.\n *\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\n *\n * @private {string}\n * @const\n */\ngoog.net.XhrIo.XHR2_TIMEOUT_ = 'timeout';\n\n\n/**\n * The XMLHttpRequest Level two ontimeout handler property name.\n *\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\n *\n * @private {string}\n * @const\n */\ngoog.net.XhrIo.XHR2_ON_TIMEOUT_ = 'ontimeout';\n\n\n/**\n * All non-disposed instances of goog.net.XhrIo created\n * by {@link goog.net.XhrIo.send} are in this Array.\n * @see goog.net.XhrIo.cleanup\n * @private {!Array<!goog.net.XhrIo>}\n */\ngoog.net.XhrIo.sendInstances_ = [];\n\n\n/**\n * Static send that creates a short lived instance of XhrIo to send the\n * request.\n * @see goog.net.XhrIo.cleanup\n * @param {string|goog.Uri} url Uri to make request to.\n * @param {?function(this:goog.net.XhrIo, ?)=} opt_callback Callback function\n *     for when request is complete.\n * @param {string=} opt_method Send method, default: GET.\n * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string=}\n *     opt_content Body data.\n * @param {Object|goog.structs.Map=} opt_headers Map of headers to add to the\n *     request.\n * @param {number=} opt_timeoutInterval Number of milliseconds after which an\n *     incomplete request will be aborted; 0 means no timeout is set.\n * @param {boolean=} opt_withCredentials Whether to send credentials with the\n *     request. Default to false. See {@link goog.net.XhrIo#setWithCredentials}.\n * @return {!goog.net.XhrIo} The sent XhrIo.\n */\ngoog.net.XhrIo.send = function(\n    url, opt_callback, opt_method, opt_content, opt_headers,\n    opt_timeoutInterval, opt_withCredentials) {\n  'use strict';\n  const x = new goog.net.XhrIo();\n  goog.net.XhrIo.sendInstances_.push(x);\n  if (opt_callback) {\n    x.listen(goog.net.EventType.COMPLETE, opt_callback);\n  }\n  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);\n  if (opt_timeoutInterval) {\n    x.setTimeoutInterval(opt_timeoutInterval);\n  }\n  if (opt_withCredentials) {\n    x.setWithCredentials(opt_withCredentials);\n  }\n  x.send(url, opt_method, opt_content, opt_headers);\n  return x;\n};\n\n\n/**\n * Disposes all non-disposed instances of goog.net.XhrIo created by\n * {@link goog.net.XhrIo.send}.\n * {@link goog.net.XhrIo.send} cleans up the goog.net.XhrIo instance\n * it creates when the request completes or fails.  However, if\n * the request never completes, then the goog.net.XhrIo is not disposed.\n * This can occur if the window is unloaded before the request completes.\n * We could have {@link goog.net.XhrIo.send} return the goog.net.XhrIo\n * it creates and make the client of {@link goog.net.XhrIo.send} be\n * responsible for disposing it in this case.  However, this makes things\n * significantly more complicated for the client, and the whole point\n * of {@link goog.net.XhrIo.send} is that it's simple and easy to use.\n * Clients of {@link goog.net.XhrIo.send} should call\n * {@link goog.net.XhrIo.cleanup} when doing final\n * cleanup on window unload.\n */\ngoog.net.XhrIo.cleanup = function() {\n  'use strict';\n  const instances = goog.net.XhrIo.sendInstances_;\n  while (instances.length) {\n    instances.pop().dispose();\n  }\n};\n\n\n/**\n * Installs exception protection for all entry point introduced by\n * goog.net.XhrIo instances which are not protected by\n * {@link goog.debug.ErrorHandler#protectWindowSetTimeout},\n * {@link goog.debug.ErrorHandler#protectWindowSetInterval}, or\n * {@link goog.events.protectBrowserEventEntryPoint}.\n *\n * @param {goog.debug.ErrorHandler} errorHandler Error handler with which to\n *     protect the entry point(s).\n */\ngoog.net.XhrIo.protectEntryPoints = function(errorHandler) {\n  'use strict';\n  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ =\n      errorHandler.protectEntryPoint(\n          goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);\n};\n\n\n/**\n * Disposes of the specified goog.net.XhrIo created by\n * {@link goog.net.XhrIo.send} and removes it from\n * {@link goog.net.XhrIo.pendingStaticSendInstances_}.\n * @private\n */\ngoog.net.XhrIo.prototype.cleanupSend_ = function() {\n  'use strict';\n  this.dispose();\n  goog.array.remove(goog.net.XhrIo.sendInstances_, this);\n};\n\n\n/**\n * Returns the number of milliseconds after which an incomplete request will be\n * aborted, or 0 if no timeout is set.\n * @return {number} Timeout interval in milliseconds.\n */\ngoog.net.XhrIo.prototype.getTimeoutInterval = function() {\n  'use strict';\n  return this.timeoutInterval_;\n};\n\n\n/**\n * Sets the number of milliseconds after which an incomplete request will be\n * aborted and a {@link goog.net.EventType.TIMEOUT} event raised; 0 means no\n * timeout is set.\n * @param {number} ms Timeout interval in milliseconds; 0 means none.\n */\ngoog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {\n  'use strict';\n  this.timeoutInterval_ = Math.max(0, ms);\n};\n\n\n/**\n * Sets the desired type for the response. At time of writing, this is only\n * supported in very recent versions of WebKit (10.0.612.1 dev and later).\n *\n * If this is used, the response may only be accessed via {@link #getResponse}.\n *\n * @param {goog.net.XhrIo.ResponseType} type The desired type for the response.\n */\ngoog.net.XhrIo.prototype.setResponseType = function(type) {\n  'use strict';\n  this.responseType_ = type;\n};\n\n\n/**\n * Gets the desired type for the response.\n * @return {goog.net.XhrIo.ResponseType} The desired type for the response.\n */\ngoog.net.XhrIo.prototype.getResponseType = function() {\n  'use strict';\n  return this.responseType_;\n};\n\n\n/**\n * Sets whether a \"credentialed\" request that is aware of cookie and\n * authentication information should be made. This option is only supported by\n * browsers that support HTTP Access Control. As of this writing, this option\n * is not supported in IE.\n *\n * @param {boolean} withCredentials Whether this should be a \"credentialed\"\n *     request.\n */\ngoog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {\n  'use strict';\n  this.withCredentials_ = withCredentials;\n};\n\n\n/**\n * Gets whether a \"credentialed\" request is to be sent.\n * @return {boolean} The desired type for the response.\n */\ngoog.net.XhrIo.prototype.getWithCredentials = function() {\n  'use strict';\n  return this.withCredentials_;\n};\n\n\n/**\n * Sets whether progress events are enabled for this request. Note\n * that progress events require pre-flight OPTIONS request handling\n * for CORS requests, and may cause trouble with older browsers. See\n * progressEventsEnabled_ for details.\n * @param {boolean} enabled Whether progress events should be enabled.\n */\ngoog.net.XhrIo.prototype.setProgressEventsEnabled = function(enabled) {\n  'use strict';\n  this.progressEventsEnabled_ = enabled;\n};\n\n\n/**\n * Gets whether progress events are enabled.\n * @return {boolean} Whether progress events are enabled for this request.\n */\ngoog.net.XhrIo.prototype.getProgressEventsEnabled = function() {\n  'use strict';\n  return this.progressEventsEnabled_;\n};\n\n\n/**\n * Instance send that actually uses XMLHttpRequest to make a server call.\n * @param {string|goog.Uri} url Uri to make request to.\n * @param {string=} opt_method Send method, default: GET.\n * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string=}\n *     opt_content Body data.\n * @param {Object|goog.structs.Map=} opt_headers Map of headers to add to the\n *     request.\n * @suppress {deprecated} Use deprecated goog.structs.forEach to allow different\n * types of parameters for opt_headers.\n */\ngoog.net.XhrIo.prototype.send = function(\n    url, opt_method, opt_content, opt_headers) {\n  'use strict';\n  if (this.xhr_) {\n    throw new Error(\n        '[goog.net.XhrIo] Object is active with another request=' +\n        this.lastUri_ + '; newUri=' + url);\n  }\n\n  const method = opt_method ? opt_method.toUpperCase() : 'GET';\n\n  this.lastUri_ = url;\n  this.lastError_ = '';\n  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;\n  this.lastMethod_ = method;\n  this.errorDispatched_ = false;\n  this.active_ = true;\n\n  // Use the factory to create the XHR object and options\n  this.xhr_ = this.createXhr();\n  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() :\n                                            goog.net.XmlHttp.getOptions();\n\n  // Set up the onreadystatechange callback\n  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);\n\n  // Set up upload/download progress events, if progress events are supported.\n  if (this.getProgressEventsEnabled() && 'onprogress' in this.xhr_) {\n    this.xhr_.onprogress = goog.bind(function(e) {\n      'use strict';\n      this.onProgressHandler_(e, true);\n    }, this);\n    if (this.xhr_.upload) {\n      this.xhr_.upload.onprogress = goog.bind(this.onProgressHandler_, this);\n    }\n  }\n\n  /**\n   * Try to open the XMLHttpRequest (always async), if an error occurs here it\n   * is generally permission denied\n   */\n  try {\n    goog.log.fine(this.logger_, this.formatMsg_('Opening Xhr'));\n    this.inOpen_ = true;\n    this.xhr_.open(method, String(url), true);  // Always async!\n    this.inOpen_ = false;\n  } catch (err) {\n    goog.log.fine(\n        this.logger_, this.formatMsg_('Error opening Xhr: ' + err.message));\n    this.error_(goog.net.ErrorCode.EXCEPTION, err);\n    return;\n  }\n\n  // We can't use null since this won't allow requests with form data to have a\n  // content length specified which will cause some proxies to return a 411\n  // error.\n  const content = opt_content || '';\n\n  const headers = this.headers.clone();\n\n  // Add headers specific to this request\n  if (opt_headers) {\n    goog.structs.forEach(opt_headers, function(value, key) {\n      'use strict';\n      headers.set(key, value);\n    });\n  }\n\n  // Find whether a content type header is set, ignoring case.\n  // HTTP header names are case-insensitive.  See:\n  // http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n  const contentTypeKey =\n      goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);\n\n  const contentIsFormData =\n      (goog.global['FormData'] && (content instanceof goog.global['FormData']));\n  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) &&\n      !contentTypeKey && !contentIsFormData) {\n    // For requests typically with form data, default to the url-encoded form\n    // content type unless this is a FormData request.  For FormData,\n    // the browser will automatically add a multipart/form-data content type\n    // with an appropriate multipart boundary.\n    headers.set(\n        goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);\n  }\n\n  // Add the headers to the Xhr object\n  headers.forEach(function(value, key) {\n    'use strict';\n    this.xhr_.setRequestHeader(key, value);\n  }, this);\n\n  if (this.responseType_) {\n    this.xhr_.responseType = this.responseType_;\n  }\n  // Set xhr_.withCredentials only when the value is different, or else in\n  // synchronous XMLHtppRequest.open Firefox will throw an exception.\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=736340\n  if ('withCredentials' in this.xhr_ &&\n      this.xhr_.withCredentials !== this.withCredentials_) {\n    this.xhr_.withCredentials = this.withCredentials_;\n  }\n\n  /**\n   * Try to send the request, or other wise report an error (404 not found).\n   */\n  try {\n    this.cleanUpTimeoutTimer_();  // Paranoid, should never be running.\n    if (this.timeoutInterval_ > 0) {\n      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);\n      goog.log.fine(\n          this.logger_, this.formatMsg_(\n                            'Will abort after ' + this.timeoutInterval_ +\n                            'ms if incomplete, xhr2 ' + this.useXhr2Timeout_));\n      if (this.useXhr2Timeout_) {\n        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;\n        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] =\n            goog.bind(this.timeout_, this);\n      } else {\n        this.timeoutId_ =\n            goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);\n      }\n    }\n    goog.log.fine(this.logger_, this.formatMsg_('Sending request'));\n    this.inSend_ = true;\n    this.xhr_.send(content);\n    this.inSend_ = false;\n\n  } catch (err) {\n    goog.log.fine(this.logger_, this.formatMsg_('Send error: ' + err.message));\n    this.error_(goog.net.ErrorCode.EXCEPTION, err);\n  }\n};\n\n\n/**\n * Determines if the argument is an XMLHttpRequest that supports the level 2\n * timeout value and event.\n *\n * Currently, FF 21.0 OS X has the fields but won't actually call the timeout\n * handler.  Perhaps the confusion in the bug referenced below hasn't\n * entirely been resolved.\n *\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=525816\n *\n * @param {!goog.net.XhrLike.OrNative} xhr The request.\n * @return {boolean} True if the request supports level 2 timeout.\n * @private\n */\ngoog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {\n  'use strict';\n  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) &&\n      typeof xhr[goog.net.XhrIo.XHR2_TIMEOUT_] === 'number' &&\n      xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_] !== undefined;\n};\n\n\n/**\n * @param {string} header An HTTP header key.\n * @return {boolean} Whether the key is a content type header (ignoring\n *     case.\n * @private\n */\ngoog.net.XhrIo.isContentTypeHeader_ = function(header) {\n  'use strict';\n  return goog.string.caseInsensitiveEquals(\n      goog.net.XhrIo.CONTENT_TYPE_HEADER, header);\n};\n\n\n/**\n * Creates a new XHR object.\n * @return {!goog.net.XhrLike.OrNative} The newly created XHR object.\n * @protected\n */\ngoog.net.XhrIo.prototype.createXhr = function() {\n  'use strict';\n  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() :\n                                goog.net.XmlHttp();\n};\n\n\n/**\n * The request didn't complete after {@link goog.net.XhrIo#timeoutInterval_}\n * milliseconds; raises a {@link goog.net.EventType.TIMEOUT} event and aborts\n * the request.\n * @private\n */\ngoog.net.XhrIo.prototype.timeout_ = function() {\n  'use strict';\n  if (typeof goog == 'undefined') {\n    // If goog is undefined then the callback has occurred as the application\n    // is unloading and will error.  Thus we let it silently fail.\n  } else if (this.xhr_) {\n    this.lastError_ =\n        'Timed out after ' + this.timeoutInterval_ + 'ms, aborting';\n    this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;\n    goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));\n    this.dispatchEvent(goog.net.EventType.TIMEOUT);\n    this.abort(goog.net.ErrorCode.TIMEOUT);\n  }\n};\n\n\n/**\n * Something errorred, so inactivate, fire error callback and clean up\n * @param {goog.net.ErrorCode} errorCode The error code.\n * @param {Error} err The error object.\n * @private\n */\ngoog.net.XhrIo.prototype.error_ = function(errorCode, err) {\n  'use strict';\n  this.active_ = false;\n  if (this.xhr_) {\n    this.inAbort_ = true;\n    this.xhr_.abort();  // Ensures XHR isn't hung (FF)\n    this.inAbort_ = false;\n  }\n  this.lastError_ = err;\n  this.lastErrorCode_ = errorCode;\n  this.dispatchErrors_();\n  this.cleanUpXhr_();\n};\n\n\n/**\n * Dispatches COMPLETE and ERROR in case of an error. This ensures that we do\n * not dispatch multiple error events.\n * @private\n */\ngoog.net.XhrIo.prototype.dispatchErrors_ = function() {\n  'use strict';\n  if (!this.errorDispatched_) {\n    this.errorDispatched_ = true;\n    this.dispatchEvent(goog.net.EventType.COMPLETE);\n    this.dispatchEvent(goog.net.EventType.ERROR);\n  }\n};\n\n\n/**\n * Abort the current XMLHttpRequest\n * @param {goog.net.ErrorCode=} opt_failureCode Optional error code to use -\n *     defaults to ABORT.\n */\ngoog.net.XhrIo.prototype.abort = function(opt_failureCode) {\n  'use strict';\n  if (this.xhr_ && this.active_) {\n    goog.log.fine(this.logger_, this.formatMsg_('Aborting'));\n    this.active_ = false;\n    this.inAbort_ = true;\n    this.xhr_.abort();\n    this.inAbort_ = false;\n    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;\n    this.dispatchEvent(goog.net.EventType.COMPLETE);\n    this.dispatchEvent(goog.net.EventType.ABORT);\n    this.cleanUpXhr_();\n  }\n};\n\n\n/**\n * Nullifies all callbacks to reduce risks of leaks.\n * @override\n * @protected\n */\ngoog.net.XhrIo.prototype.disposeInternal = function() {\n  'use strict';\n  if (this.xhr_) {\n    // We explicitly do not call xhr_.abort() unless active_ is still true.\n    // This is to avoid unnecessarily aborting a successful request when\n    // dispose() is called in a callback triggered by a complete response, but\n    // in which browser cleanup has not yet finished.\n    // (See http://b/issue?id=1684217.)\n    if (this.active_) {\n      this.active_ = false;\n      this.inAbort_ = true;\n      this.xhr_.abort();\n      this.inAbort_ = false;\n    }\n    this.cleanUpXhr_(true);\n  }\n\n  XhrIo.base(this, 'disposeInternal');\n};\n\n\n/**\n * Internal handler for the XHR object's readystatechange event.  This method\n * checks the status and the readystate and fires the correct callbacks.\n * If the request has ended, the handlers are cleaned up and the XHR object is\n * nullified.\n * @private\n */\ngoog.net.XhrIo.prototype.onReadyStateChange_ = function() {\n  'use strict';\n  if (this.isDisposed()) {\n    // This method is the target of an untracked goog.Timer.callOnce().\n    return;\n  }\n  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {\n    // Were not being called from within a call to this.xhr_.send\n    // this.xhr_.abort, or this.xhr_.open, so this is an entry point\n    this.onReadyStateChangeEntryPoint_();\n  } else {\n    this.onReadyStateChangeHelper_();\n  }\n};\n\n\n/**\n * Used to protect the onreadystatechange handler entry point.  Necessary\n * as {#onReadyStateChange_} maybe called from within send or abort, this\n * method is only called when {#onReadyStateChange_} is called as an\n * entry point.\n * {@see #protectEntryPoints}\n * @private\n */\ngoog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {\n  'use strict';\n  this.onReadyStateChangeHelper_();\n};\n\n\n/**\n * Helper for {@link #onReadyStateChange_}.  This is used so that\n * entry point calls to {@link #onReadyStateChange_} can be routed through\n * {@link #onReadyStateChangeEntryPoint_}.\n * @private\n */\ngoog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {\n  'use strict';\n  if (!this.active_) {\n    // can get called inside abort call\n    return;\n  }\n\n  if (typeof goog == 'undefined') {\n    // NOTE(user): If goog is undefined then the callback has occurred as the\n    // application is unloading and will error.  Thus we let it silently fail.\n\n  } else if (\n      this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] &&\n      this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE &&\n      this.getStatus() == 2) {\n    // NOTE(user): In IE if send() errors on a *local* request the readystate\n    // is still changed to COMPLETE.  We need to ignore it and allow the\n    // try/catch around send() to pick up the error.\n    goog.log.fine(\n        this.logger_,\n        this.formatMsg_('Local request error detected and ignored'));\n\n  } else {\n    // In IE when the response has been cached we sometimes get the callback\n    // from inside the send call and this usually breaks code that assumes that\n    // XhrIo is asynchronous.  If that is the case we delay the callback\n    // using a timer.\n    if (this.inSend_ &&\n        this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {\n      goog.Timer.callOnce(this.onReadyStateChange_, 0, this);\n      return;\n    }\n\n    this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);\n\n    // readyState indicates the transfer has finished\n    if (this.isComplete()) {\n      goog.log.fine(this.logger_, this.formatMsg_('Request complete'));\n\n      this.active_ = false;\n\n      try {\n        // Call the specific callbacks for success or failure. Only call the\n        // success if the status is 200 (HTTP_OK) or 304 (HTTP_CACHED)\n        if (this.isSuccess()) {\n          this.dispatchEvent(goog.net.EventType.COMPLETE);\n          this.dispatchEvent(goog.net.EventType.SUCCESS);\n        } else {\n          this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;\n          this.lastError_ =\n              this.getStatusText() + ' [' + this.getStatus() + ']';\n          this.dispatchErrors_();\n        }\n      } finally {\n        this.cleanUpXhr_();\n      }\n    }\n  }\n};\n\n\n/**\n * Internal handler for the XHR object's onprogress event. Fires both a generic\n * PROGRESS event and either a DOWNLOAD_PROGRESS or UPLOAD_PROGRESS event to\n * allow specific binding for each XHR progress event.\n * @param {!ProgressEvent} e XHR progress event.\n * @param {boolean=} opt_isDownload Whether the current progress event is from a\n *     download. Used to determine whether DOWNLOAD_PROGRESS or UPLOAD_PROGRESS\n *     event should be dispatched.\n * @private\n */\ngoog.net.XhrIo.prototype.onProgressHandler_ = function(e, opt_isDownload) {\n  'use strict';\n  goog.asserts.assert(\n      e.type === goog.net.EventType.PROGRESS,\n      'goog.net.EventType.PROGRESS is of the same type as raw XHR progress.');\n  this.dispatchEvent(\n      goog.net.XhrIo.buildProgressEvent_(e, goog.net.EventType.PROGRESS));\n  this.dispatchEvent(\n      goog.net.XhrIo.buildProgressEvent_(\n          e, opt_isDownload ? goog.net.EventType.DOWNLOAD_PROGRESS :\n                              goog.net.EventType.UPLOAD_PROGRESS));\n};\n\n\n/**\n * Creates a representation of the native ProgressEvent. IE doesn't support\n * constructing ProgressEvent via \"new\", and the alternatives (e.g.,\n * ProgressEvent.initProgressEvent) are non-standard or deprecated.\n * @param {!ProgressEvent} e XHR progress event.\n * @param {!goog.net.EventType} eventType The type of the event.\n * @return {!ProgressEvent} The progress event.\n * @private\n */\ngoog.net.XhrIo.buildProgressEvent_ = function(e, eventType) {\n  'use strict';\n  return /** @type {!ProgressEvent} */ ({\n    type: eventType,\n    lengthComputable: e.lengthComputable,\n    loaded: e.loaded,\n    total: e.total,\n  });\n};\n\n\n/**\n * Remove the listener to protect against leaks, and nullify the XMLHttpRequest\n * object.\n * @param {boolean=} opt_fromDispose If this is from the dispose (don't want to\n *     fire any events).\n * @private\n */\ngoog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {\n  'use strict';\n  if (this.xhr_) {\n    // Cancel any pending timeout event handler.\n    this.cleanUpTimeoutTimer_();\n\n    // Save reference so we can mark it as closed after the READY event.  The\n    // READY event may trigger another request, thus we must nullify this.xhr_\n    const xhr = this.xhr_;\n    const clearedOnReadyStateChange =\n        this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ?\n        goog.nullFunction :\n        null;\n    this.xhr_ = null;\n    this.xhrOptions_ = null;\n\n    if (!opt_fromDispose) {\n      this.dispatchEvent(goog.net.EventType.READY);\n    }\n\n    try {\n      // NOTE(user): Not nullifying in FireFox can still leak if the callbacks\n      // are defined in the same scope as the instance of XhrIo. But, IE doesn't\n      // allow you to set the onreadystatechange to NULL so nullFunction is\n      // used.\n      xhr.onreadystatechange = clearedOnReadyStateChange;\n    } catch (e) {\n      // This seems to occur with a Gears HTTP request. Delayed the setting of\n      // this onreadystatechange until after READY is sent out and catching the\n      // error to see if we can track down the problem.\n      goog.log.error(\n          this.logger_,\n          'Problem encountered resetting onreadystatechange: ' + e.message);\n    }\n  }\n};\n\n\n/**\n * Make sure the timeout timer isn't running.\n * @private\n */\ngoog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {\n  'use strict';\n  if (this.xhr_ && this.useXhr2Timeout_) {\n    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;\n  }\n  if (this.timeoutId_) {\n    goog.Timer.clear(this.timeoutId_);\n    this.timeoutId_ = null;\n  }\n};\n\n\n/**\n * @return {boolean} Whether there is an active request.\n */\ngoog.net.XhrIo.prototype.isActive = function() {\n  'use strict';\n  return !!this.xhr_;\n};\n\n\n/**\n * @return {boolean} Whether the request has completed.\n */\ngoog.net.XhrIo.prototype.isComplete = function() {\n  'use strict';\n  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;\n};\n\n\n/**\n * @return {boolean} Whether the request completed with a success.\n */\ngoog.net.XhrIo.prototype.isSuccess = function() {\n  'use strict';\n  const status = this.getStatus();\n  // A zero status code is considered successful for local files.\n  return goog.net.HttpStatus.isSuccess(status) ||\n      status === 0 && !this.isLastUriEffectiveSchemeHttp_();\n};\n\n\n/**\n * @return {boolean} whether the effective scheme of the last URI that was\n *     fetched was 'http' or 'https'.\n * @private\n */\ngoog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {\n  'use strict';\n  const scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));\n  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);\n};\n\n\n/**\n * Get the readystate from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {goog.net.XmlHttp.ReadyState} goog.net.XmlHttp.ReadyState.*.\n */\ngoog.net.XhrIo.prototype.getReadyState = function() {\n  'use strict';\n  return this.xhr_ ?\n      /** @type {goog.net.XmlHttp.ReadyState} */ (this.xhr_.readyState) :\n      goog.net.XmlHttp.ReadyState.UNINITIALIZED;\n};\n\n\n/**\n * Get the status from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {number} Http status.\n */\ngoog.net.XhrIo.prototype.getStatus = function() {\n  'use strict';\n  /**\n   * IE doesn't like you checking status until the readystate is greater than 2\n   * (i.e. it is receiving or complete).  The try/catch is used for when the\n   * page is unloading and an ERROR_NOT_AVAILABLE may occur when accessing xhr_.\n   */\n  try {\n    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ?\n        this.xhr_.status :\n        -1;\n  } catch (e) {\n    return -1;\n  }\n};\n\n\n/**\n * Get the status text from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {string} Status text.\n */\ngoog.net.XhrIo.prototype.getStatusText = function() {\n  'use strict';\n  /**\n   * IE doesn't like you checking status until the readystate is greater than 2\n   * (i.e. it is receiving or complete).  The try/catch is used for when the\n   * page is unloading and an ERROR_NOT_AVAILABLE may occur when accessing xhr_.\n   */\n  try {\n    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ?\n        this.xhr_.statusText :\n        '';\n  } catch (e) {\n    goog.log.fine(this.logger_, 'Can not get status: ' + e.message);\n    return '';\n  }\n};\n\n\n/**\n * Get the last Uri that was requested\n * @return {string} Last Uri.\n */\ngoog.net.XhrIo.prototype.getLastUri = function() {\n  'use strict';\n  return String(this.lastUri_);\n};\n\n\n/**\n * Get the response text from the Xhr object\n * Will only return correct result when called from the context of a callback.\n * @return {string} Result from the server, or '' if no result available.\n */\ngoog.net.XhrIo.prototype.getResponseText = function() {\n  'use strict';\n  try {\n    return this.xhr_ ? this.xhr_.responseText : '';\n  } catch (e) {\n    // http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute\n    // states that responseText should return '' (and responseXML null)\n    // when the state is not LOADING or DONE. Instead, IE can\n    // throw unexpected exceptions, for example when a request is aborted\n    // or no data is available yet.\n    goog.log.fine(this.logger_, 'Can not get responseText: ' + e.message);\n    return '';\n  }\n};\n\n\n/**\n * Get the response body from the Xhr object. This property is only available\n * in IE since version 7 according to MSDN:\n * http://msdn.microsoft.com/en-us/library/ie/ms534368(v=vs.85).aspx\n * Will only return correct result when called from the context of a callback.\n *\n * One option is to construct a VBArray from the returned object and convert\n * it to a JavaScript array using the toArray method:\n * `(new window['VBArray'](xhrIo.getResponseBody())).toArray()`\n * This will result in an array of numbers in the range of [0..255]\n *\n * Another option is to use the VBScript CStr method to convert it into a\n * string as outlined in http://stackoverflow.com/questions/1919972\n *\n * @return {Object} Binary result from the server or null if not available.\n */\ngoog.net.XhrIo.prototype.getResponseBody = function() {\n  'use strict';\n  try {\n    if (this.xhr_ && 'responseBody' in this.xhr_) {\n      return this.xhr_['responseBody'];\n    }\n  } catch (e) {\n    // IE can throw unexpected exceptions, for example when a request is aborted\n    // or no data is yet available.\n    goog.log.fine(this.logger_, 'Can not get responseBody: ' + e.message);\n  }\n  return null;\n};\n\n\n/**\n * Get the response XML from the Xhr object\n * Will only return correct result when called from the context of a callback.\n * @return {Document} The DOM Document representing the XML file, or null\n * if no result available.\n */\ngoog.net.XhrIo.prototype.getResponseXml = function() {\n  'use strict';\n  try {\n    return this.xhr_ ? this.xhr_.responseXML : null;\n  } catch (e) {\n    goog.log.fine(this.logger_, 'Can not get responseXML: ' + e.message);\n    return null;\n  }\n};\n\n\n/**\n * Get the response and evaluates it as JSON from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @param {string=} opt_xssiPrefix Optional XSSI prefix string to use for\n *     stripping of the response before parsing. This needs to be set only if\n *     your backend server prepends the same prefix string to the JSON response.\n * @throws Error if the response text is invalid JSON.\n * @return {Object|undefined} JavaScript object.\n */\ngoog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {\n  'use strict';\n  if (!this.xhr_) {\n    return undefined;\n  }\n\n  let responseText = this.xhr_.responseText;\n  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {\n    responseText = responseText.substring(opt_xssiPrefix.length);\n  }\n\n  return goog.json.hybrid.parse(responseText);\n};\n\n\n/**\n * Get the response as the type specificed by {@link #setResponseType}. At time\n * of writing, this is only directly supported in very recent versions of WebKit\n * (10.0.612.1 dev and later). If the field is not supported directly, we will\n * try to emulate it.\n *\n * Emulating the response means following the rules laid out at\n * http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute\n *\n * On browsers with no support for this (Chrome < 10, Firefox < 4, etc), only\n * response types of DEFAULT or TEXT may be used, and the response returned will\n * be the text response.\n *\n * On browsers with Mozilla's draft support for array buffers (Firefox 4, 5),\n * only response types of DEFAULT, TEXT, and ARRAY_BUFFER may be used, and the\n * response returned will be either the text response or the Mozilla\n * implementation of the array buffer response.\n *\n * On browsers will full support, any valid response type supported by the\n * browser may be used, and the response provided by the browser will be\n * returned.\n *\n * @return {*} The response.\n */\ngoog.net.XhrIo.prototype.getResponse = function() {\n  'use strict';\n  try {\n    if (!this.xhr_) {\n      return null;\n    }\n    if ('response' in this.xhr_) {\n      return this.xhr_.response;\n    }\n    switch (this.responseType_) {\n      case ResponseType.DEFAULT:\n      case ResponseType.TEXT:\n        return this.xhr_.responseText;\n      // DOCUMENT and BLOB don't need to be handled here because they are\n      // introduced in the same spec that adds the .response field, and would\n      // have been caught above.\n      // ARRAY_BUFFER needs an implementation for Firefox 4, where it was\n      // implemented using a draft spec rather than the final spec.\n      case ResponseType.ARRAY_BUFFER:\n        if ('mozResponseArrayBuffer' in this.xhr_) {\n          return this.xhr_.mozResponseArrayBuffer;\n        }\n    }\n    // Fell through to a response type that is not supported on this browser.\n    goog.log.error(\n        this.logger_, 'Response type ' + this.responseType_ + ' is not ' +\n            'supported on this browser');\n    return null;\n  } catch (e) {\n    goog.log.fine(this.logger_, 'Can not get response: ' + e.message);\n    return null;\n  }\n};\n\n\n/**\n * Get the value of the response-header with the given name from the Xhr object\n * Will only return correct result when called from the context of a callback\n * and the request has completed\n * @param {string} key The name of the response-header to retrieve.\n * @return {string|undefined} The value of the response-header named key.\n */\ngoog.net.XhrIo.prototype.getResponseHeader = function(key) {\n  'use strict';\n  if (!this.xhr_ || !this.isComplete()) {\n    return undefined;\n  }\n\n  const value = this.xhr_.getResponseHeader(key);\n  return value === null ? undefined : value;\n};\n\n\n/**\n * Gets the text of all the headers in the response.\n * Will only return correct result when called from the context of a callback\n * and the request has completed.\n * @return {string} The value of the response headers or empty string.\n */\ngoog.net.XhrIo.prototype.getAllResponseHeaders = function() {\n  'use strict';\n  // getAllResponseHeaders can return null if no response has been received,\n  // ensure we always return an empty string.\n  return this.xhr_ && this.isComplete() ?\n      (this.xhr_.getAllResponseHeaders() || '') :\n      '';\n};\n\n\n/**\n * Returns all response headers as a key-value map.\n * Multiple values for the same header key can be combined into one,\n * separated by a comma and a space.\n * Note that the native getResponseHeader method for retrieving a single header\n * does a case insensitive match on the header name. This method does not\n * include any case normalization logic, it will just return a key-value\n * representation of the headers.\n * See: http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n * @return {!Object<string, string>} An object with the header keys as keys\n *     and header values as values.\n */\ngoog.net.XhrIo.prototype.getResponseHeaders = function() {\n  'use strict';\n  // TODO(user): Make this function parse headers as per the spec\n  // (https://tools.ietf.org/html/rfc2616#section-4.2).\n\n  const headersObject = {};\n  const headersArray = this.getAllResponseHeaders().split('\\r\\n');\n  for (let i = 0; i < headersArray.length; i++) {\n    if (goog.string.isEmptyOrWhitespace(headersArray[i])) {\n      continue;\n    }\n    const keyValue =\n        goog.string.splitLimit(headersArray[i], ':', /* maxSplitCount= */ 1);\n    const key = keyValue[0];\n    let value = keyValue[1];\n\n    if (typeof value !== 'string') {\n      // There must be a value but it can be the empty string.\n      continue;\n    }\n\n    // Whitespace at the start and end of the value is meaningless.\n    value = value.trim();\n    // The key should not contain whitespace but we currently ignore that.\n\n    const values = headersObject[key] || [];\n    headersObject[key] = values;\n    values.push(value);\n  }\n\n  return goog.object.map(headersObject, function(values) {\n    'use strict';\n    return values.join(', ');\n  });\n};\n\n\n/**\n * Get the value of the response-header with the given name from the Xhr object.\n * As opposed to {@link #getResponseHeader}, this method does not require that\n * the request has completed.\n * @param {string} key The name of the response-header to retrieve.\n * @return {?string} The value of the response-header, or null if it is\n *     unavailable.\n */\ngoog.net.XhrIo.prototype.getStreamingResponseHeader = function(key) {\n  'use strict';\n  return this.xhr_ ? this.xhr_.getResponseHeader(key) : null;\n};\n\n\n/**\n * Gets the text of all the headers in the response. As opposed to\n * {@link #getAllResponseHeaders}, this method does not require that the request\n * has completed.\n * @return {string} The value of the response headers or empty string.\n */\ngoog.net.XhrIo.prototype.getAllStreamingResponseHeaders = function() {\n  'use strict';\n  return this.xhr_ ? this.xhr_.getAllResponseHeaders() : '';\n};\n\n\n/**\n * Get the last error message\n * @return {!goog.net.ErrorCode} Last error code.\n */\ngoog.net.XhrIo.prototype.getLastErrorCode = function() {\n  'use strict';\n  return this.lastErrorCode_;\n};\n\n\n/**\n * Get the last error message\n * @return {string} Last error message.\n */\ngoog.net.XhrIo.prototype.getLastError = function() {\n  'use strict';\n  return typeof this.lastError_ === 'string' ? this.lastError_ :\n                                               String(this.lastError_);\n};\n\n\n/**\n * Adds the last method, status and URI to the message.  This is used to add\n * this information to the logging calls.\n * @param {string} msg The message text that we want to add the extra text to.\n * @return {string} The message with the extra text appended.\n * @private\n */\ngoog.net.XhrIo.prototype.formatMsg_ = function(msg) {\n  'use strict';\n  return msg + ' [' + this.lastMethod_ + ' ' + this.lastUri_ + ' ' +\n      this.getStatus() + ']';\n};\n\n\n// Register the xhr handler as an entry point, so that\n// it can be monitored for exception handling, etc.\ngoog.debug.entryPointRegistry.register(\n    /**\n     * @param {function(!Function): !Function} transformer The transforming\n     *     function.\n     */\n    function(transformer) {\n      'use strict';\n      goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ =\n          transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);\n    });\n});  // goog.scope\n"],
"names":["goog","provide","require","requireType","scope","net","XhrIo","goog.net.XhrIo","opt_xmlHttpFactory","base","headers","structs","Map","xmlHttpFactory_","active_","xhr_","xhrOptions_","lastUri_","lastMethod_","lastErrorCode_","ErrorCode","NO_ERROR","lastError_","errorDispatched_","inSend_","inOpen_","inAbort_","timeoutInterval_","timeoutId_","responseType_","ResponseType","DEFAULT","withCredentials_","progressEventsEnabled_","useXhr2Timeout_","inherits","events","EventTarget","TEXT","DOCUMENT","BLOB","ARRAY_BUFFER","prototype","logger_","log","getLogger","CONTENT_TYPE_HEADER","CONTENT_TRANSFER_ENCODING","HTTP_SCHEME_PATTERN","METHODS_WITH_FORM_DATA","FORM_CONTENT_TYPE","XHR2_TIMEOUT_","XHR2_ON_TIMEOUT_","sendInstances_","send","goog.net.XhrIo.send","url","opt_callback","opt_method","opt_content","opt_headers","opt_timeoutInterval","opt_withCredentials","x","push","listen","EventType","COMPLETE","listenOnce","READY","cleanupSend_","setTimeoutInterval","setWithCredentials","cleanup","goog.net.XhrIo.cleanup","instances","length","pop","dispose","protectEntryPoints","goog.net.XhrIo.protectEntryPoints","errorHandler","onReadyStateChangeEntryPoint_","protectEntryPoint","goog.net.XhrIo.prototype.cleanupSend_","array","remove","getTimeoutInterval","goog.net.XhrIo.prototype.getTimeoutInterval","goog.net.XhrIo.prototype.setTimeoutInterval","ms","Math","max","setResponseType","goog.net.XhrIo.prototype.setResponseType","type","getResponseType","goog.net.XhrIo.prototype.getResponseType","goog.net.XhrIo.prototype.setWithCredentials","withCredentials","getWithCredentials","goog.net.XhrIo.prototype.getWithCredentials","setProgressEventsEnabled","goog.net.XhrIo.prototype.setProgressEventsEnabled","enabled","getProgressEventsEnabled","goog.net.XhrIo.prototype.getProgressEventsEnabled","goog.net.XhrIo.prototype.send","Error","method","toUpperCase","createXhr","getOptions","XmlHttp","onreadystatechange","bind","onReadyStateChange_","onprogress","e","onProgressHandler_","upload","fine","formatMsg_","open","String","err","message","error_","EXCEPTION","content","clone","forEach","value","key","set","contentTypeKey","find","getKeys","isContentTypeHeader_","contentIsFormData","global","contains","setRequestHeader","responseType","cleanUpTimeoutTimer_","shouldUseXhr2Timeout_","timeout_","Timer","callOnce","goog.net.XhrIo.shouldUseXhr2Timeout_","xhr","userAgent","IE","isVersionOrHigher","undefined","goog.net.XhrIo.isContentTypeHeader_","header","string","caseInsensitiveEquals","goog.net.XhrIo.prototype.createXhr","createInstance","goog.net.XhrIo.prototype.timeout_","TIMEOUT","dispatchEvent","abort","goog.net.XhrIo.prototype.error_","errorCode","dispatchErrors_","cleanUpXhr_","goog.net.XhrIo.prototype.dispatchErrors_","ERROR","goog.net.XhrIo.prototype.abort","opt_failureCode","ABORT","disposeInternal","goog.net.XhrIo.prototype.disposeInternal","goog.net.XhrIo.prototype.onReadyStateChange_","isDisposed","onReadyStateChangeHelper_","goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_","goog.net.XhrIo.prototype.onReadyStateChangeHelper_","OptionType","LOCAL_REQUEST_ERROR","getReadyState","ReadyState","getStatus","READY_STATE_CHANGE","isComplete","isSuccess","SUCCESS","HTTP_ERROR","getStatusText","goog.net.XhrIo.prototype.onProgressHandler_","opt_isDownload","asserts","assert","PROGRESS","buildProgressEvent_","DOWNLOAD_PROGRESS","UPLOAD_PROGRESS","goog.net.XhrIo.buildProgressEvent_","eventType","lengthComputable","loaded","total","goog.net.XhrIo.prototype.cleanUpXhr_","opt_fromDispose","clearedOnReadyStateChange","USE_NULL_FUNCTION","nullFunction","error","goog.net.XhrIo.prototype.cleanUpTimeoutTimer_","clear","isActive","goog.net.XhrIo.prototype.isActive","goog.net.XhrIo.prototype.isComplete","goog.net.XhrIo.prototype.isSuccess","status","HttpStatus","isLastUriEffectiveSchemeHttp_","goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_","scheme","uri","utils","getEffectiveScheme","test","goog.net.XhrIo.prototype.getReadyState","readyState","UNINITIALIZED","goog.net.XhrIo.prototype.getStatus","LOADED","goog.net.XhrIo.prototype.getStatusText","statusText","getLastUri","goog.net.XhrIo.prototype.getLastUri","getResponseText","goog.net.XhrIo.prototype.getResponseText","responseText","getResponseBody","goog.net.XhrIo.prototype.getResponseBody","getResponseXml","goog.net.XhrIo.prototype.getResponseXml","responseXML","getResponseJson","goog.net.XhrIo.prototype.getResponseJson","opt_xssiPrefix","indexOf","substring","json","hybrid","parse","getResponse","goog.net.XhrIo.prototype.getResponse","response","mozResponseArrayBuffer","getResponseHeader","goog.net.XhrIo.prototype.getResponseHeader","getAllResponseHeaders","goog.net.XhrIo.prototype.getAllResponseHeaders","getResponseHeaders","goog.net.XhrIo.prototype.getResponseHeaders","headersObject","headersArray","split","i","isEmptyOrWhitespace","keyValue","splitLimit","trim","values","object","map","join","getStreamingResponseHeader","goog.net.XhrIo.prototype.getStreamingResponseHeader","getAllStreamingResponseHeaders","goog.net.XhrIo.prototype.getAllStreamingResponseHeaders","getLastErrorCode","goog.net.XhrIo.prototype.getLastErrorCode","getLastError","goog.net.XhrIo.prototype.getLastError","goog.net.XhrIo.prototype.formatMsg_","msg","debug","entryPointRegistry","register","transformer"]
}
