{"version":3,"sources":["gauge.cljs"],"mappings":";AAYA,AAAA,AAAKA;AAEL,AAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAG,AAAA,AAACC;;AAEb,AAAKC,AAAY,AAACC,AAAQ,AAACC,AAAc;AAEzC,AAAA,AAAKC;AAEL,AAAKC,AACH,AAAA,AAAA,AAAI,AAAK,AAAA,AAAQC,AACR,AAAA,AAAOC;AAIlB,AAAA,AAAKC;AACL,AAAA,AAAKC;AAEL,AAAA,AAAAC,AAAMI;AAAN,AAAA,AAAAH,AAAAD;AAAAC,AAAA,AAAAC,AAAAD;AAAAA,AAC0CS;AAD1C,AAAAP,AAAAF,AAAA,AACWI;AADX,AAAAF,AAAAF,AAAA,AACkBK;AADlB,AAAAH,AAAAF,AAAA,AACqBM;AADrB,AAAAJ,AAAAF,AAAA,AACwBO;AADxB,AAAAL,AAAAF,AAAA,AAC8BQ;AAD9B,AAEE,AACE,AAAAE,AAAKH;AAAL,AAAA,AAAAG;AAAA,AAAAA,AAAWF;AAAX,AAAA,AAAAE;AAAA,AAAAA,AAAkBL;AAAlB,AAAA,AAAAK;AAAqBJ;;AAArBI;;;AAAAA;;;AAAAA;;;AACA,AAAMC,AAAM,AAAA,AAAOJ;AACbK,AAAM,AAAA,AAAOJ;AADnB,AAAA,AAEG,AAAGH,AAAGM,AAAO,AAAGL,AAAGM,AAAOL,AAAMC;;AAJrC,AAME,AAAAE,AAAKN;AAAL,AAAA,AAAAM;AAAA,AAAAA,AAAYL;AAAZ,AAAA,AAAAK;AAAeJ;;AAAfI;;;AAAAA;;;AACA,AAAMG,AAAE,AAAA,AAAKT;AAAb,AAAA,AACG,AAAGC,AAAGD,AAAQ,AAAGE,AAAGF,AAAQS,AAAEA;;AARnC,AAUQ,AAAA,AAACC,AAAiDL;;;;;AAG5D,AAAA,AAAAM,AAAAC,AAAA,AAAUI,AACPC,AAAKC,AAAGC,AAAGC;AADd,AAAA,AAAA,AAEQC,AAAK,AAACC;AAFdT,AAGiE,AAAA,AAACe;AAHlEd,AAAA,AAAAC,AAAAF,AAAA,AAAA;AAAAC,AAAA,AAAAjB,AAAAiB;AAAAA,AAGoCY;AAHpC,AAAA5B,AAAAgB,AAAA,AAGiBS;AAHjB,AAAAzB,AAAAgB,AAAA,AAGmBU;AAHnB,AAAA1B,AAAAgB,AAAA,AAGqBW;AAHrB,AAAAV,AAAAF,AAAA,AAAA,AAGgDc;AACxCE,AAAQ,AAAK,AAAAC,AAAIN;AAAJ,AAAA,AAAAM;AAAAA;;AAAMX;;AAAX;AACRY,AAAS,AAAK,AAAAD,AAAIP;AAAJ,AAAA,AAAAO;AAAAA;;AAAMZ;;AAAX;AACTc,AAAS,AAACC,AACA,AAAG,AAAG,AAAG,AAAAH,AAAIP;AAAJ,AAAA,AAAAO;AAAAA;;AAAMZ;;AAAI5B,AACb,AAAA,AAAO,AAAS2B,AACnB5B;AACb6C,AAAS,AAACD,AACA,AAAG,AAAG,AAAG,AAAAH,AAAIN;AAAJ,AAAA,AAAAM;AAAAA;;AAAMX;;AAAI7B,AACb,AAAA,AAAO,AAAU2B,AACpB5B;AAbrB,AAcI,AAAC8C,AACA;AAAA,AACE,AAAMC,AAAI,AAACC,AAAUhB;AACfiB,AAAI,AAAA,AAAaF;AADvB,AAEE,AAAA,AAAA,AAAYE,AAAQ,AAASrB,AAAM,AAAUA;;AAC7C,AAAA,AAAA,AAAYqB,AAAIrB;AALrB,AAMEA;;AACF,AAAAsB,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AACOf,AAGWI,AACCE,AACf,AAAA,AAAKC,AAAaE,AAENb,AACE,AAASJ,AACR,AAAUA,AAGH,AAAG3B,AAAW,AAAS2B,AACtB,AAAG3B,AAAW,AAAU2B,AAEvB,AAAA,AAAAwB,AAAA,AAAA,AAAQhB,AACZI,AACCE,AACG,AAAA,AAAA,AAAIN,AACA,AAAA,AAAA,AAAIA,AACZ,AAASiB;AAAT,AACE,AAAMC,AAAG,AAAW,AAAeD;AAC7BE,AAAG,AAAW,AAAeF;AAC7BG,AAAG,AAAWH;AACdI,AAAG,AAAWJ;AAHpB,AAIE,AAAAK,AAAiB,AAAA,AAAA,AAAA,AAAA,AAACC,AAAMtB,AAEOmB,AACAC;AAH/B,AAAA,AAAAC,AAAAA,AAACpB,AAAAA,AAAAA;AAIL,AAASe;AAAT,AACE,AAAMjB;AAAN,AACE,AAAMwB,AAAG,AAAG,AAAA,AAAQvB,AACR,AAAWgB;AACjBQ,AAAG,AAAG,AAAA,AAAQxB,AACR,AAAWgB;AAHvB,AAIE,AAAAS,AAAiB,AAAA,AAAA,AAAA,AAAA,AAACH,AAAMtB,AACG,AAAG,AAAc,AAAUgB,AACxBO,AACH,AAAG,AAAa,AAAUP,AACvBQ,AACC,AAAWR,AACX,AAAWA;AAN1C,AAAA,AAAAS,AAAAA,AAACxB,AAAAA,AAAAA;;AALL;;AAYJ,AAASe;AAAT,AACE,AAAAU,AAAiB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACJ,AAAMtB;AAAxB,AAAA,AAAA0B,AAAAA,AAACzB,AAAAA,AAAAA;;AACD,AAAM,AAAArB,AAAKiB;AAAL,AAAA,AAAAjB;AAAOkB;;AAAPlB;;;AAAN,AACE,AAAA,AAAA,AAAA,AAAC+C,AAAMrE,AAAGsE,AAAUlC,AAAEmC,AAAeC,AACzBxB,AACAE;;AAHd;;AA7CxB;AArBJ,AAAA;AAuEA,AAAA,AAAA,AAAAuB,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AACO,AAACC,AAAcD,AAAExE;;;AADxB,AAAA,AAAA,AAAMsE,AAEFE,AAAEE;AAFN,AAGG,AAAAC,AAAyB,AAACjE,AAAY8D;AAAtC,AAAA9C,AAAAiD,AAAA,AAAA,AAAOzC;AAAP,AAAAR,AAAAiD,AAAA,AAAA,AAASxC;AAAT,AAAAT,AAAAiD,AAAA,AAAA,AAAWC;AAAX,AAAAlD,AAAAiD,AAAA,AAAA,AAAaE;AAAbF,AAAmBG;AACbC,AAAE,AAAAC,AAAM,AAAA,AAACC;AAAP,AAAA,AAAAD,AAAA,AACgB,AAAGJ,AAAEF;;AADrB,AAAAM,AAAA,AAEiB,AAAGH,AAAEH;;AAFtBM;;AAGF/B,AAAI,AAAAiC,AAAM,AAAA,AAAaH;AAAnB,AAAA,AAAAG,AACUR,AAAIA;;AADd,AAAAQ,AAEc,AAAGhD,AAAG,AAAGC;;AAFvB+C;;AAJV,AAOE,AAAA,AACE,AAACE,AAAenC,AAAI,AAACoC,AAAQb;AAD/B,AAAAW,AAEkBG;AAFlB,AAEqB,AAAA,AAACC,AAAkCD;;AAT1D,AAAA,AAAA,AAUWP,AACAP;;;AAdd,AAAA,AAAA,AAAMF;;AAAN,AAgBA,AAAA,AAAAhD,AAAAC,AAAA,AAAUiE,AACP5D;AADH,AAAA,AAAA,AAEQI,AAAK,AAACC;AAFd,AAGI,AAACa,AACA;AAAA,AACE,AAAM,AAACE,AAAUhB;AAAjB,AACC,AAAMe,AAAI,AAACC,AAAUhB;AACfiB,AAAI,AAAA,AAAaF;AADvB,AAEE,AAAA,AAAA,AAAYE,AAAQ,AAASrB,AAAM,AAAUA;;AAC7C,AAAA,AAAA,AAAYqB,AAAIrB;;AAJnB;;AAFH,AAOEA;;AAVN,AAAAuB,AAAA,AAAA,AAAA,AAWmBnB,AACE,AAASJ,AACR,AAAUA;AAbhC,AAAA;AAeA,AAAA,AAAA,AAAAwC,AAAMsB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI;;;;;AAAA,AAAA,AAAA,AAAMJ,AACFc,AAAEC;AADN,AACS,AAACzC,AAAMwC,AAAE,AAAKE;AAAL,AAAS,AAACC,AAAMD,AAAG,AAACjC,AAAc,AAAAmC,AAAG,AAAA,AAASF;AAAZ,AAAA,AAAAE,AAAAA,AAACH,AAAAA,AAAAA;;;;;AADrD,AAAA,AAAA,AAAMf,AAEFc,AAAEC,AAAE1E,AAAE8E;AAFV,AAEa,AAAC7C,AAAMwC,AAAE,AAAKE;AAAL,AAAS,AAACC,AAAMD,AAAG,AAACjC,AAAc,AAAAqC,AAAG,AAAA,AAASJ;AAAZK,AAAgBhF;AAAhBiF,AAAkBH;AAAlB,AAAA,AAAAC,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACP,AAAAA,AAAAA;;;;;AAFzD,AAAA,AAAA,AAAA,AAAMf,AAGFc,AAAEC,AAAE1E,AAAE8E,AAAII;AAHd,AAIG,AAACjD,AAAMwC,AAAE,AAAKE;AAAL,AAAS,AAACC,AAAMD,AAAG,AAACjC,AAAc,AAACyC,AAAMT,AAAE,AAAA,AAASC,AAAI,AAACS,AAAMpF,AAAE8E,AAAEI;;;;AAJ/E;AAAA,AAAA,AAAA,AAAAjB,AAAMN;AAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAK,AAAA,AAAAH,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAM,AAAA,AAAAJ,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAO,AAAA;AAAA,AAAA,AAAAA,AAAAN,AAAAG,AAAAC,AAAAC,AAAAN;;;AAAA,AAAA,AAAA,AAAMN;;AAAN,AAqBA,AAAA,AAAApE,AAAAC,AAAA,AAAUkG,AAEPE,AAAG5F,AAAE6F;AAFR,AAAA,AAAA,AAAAR,AAGgC,AAACU,AAAUH;AAH3CP,AAAA,AAAA5G,AAAA4G;AAAAA,AAG6BhG;AAH7B,AAAAX,AAAA2G,AAAA,AAGgBS;AACRhB,AAAE,AAACpG,AAAIoH,AAAO9F;AAJtB,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAkE,AAWY,AAAKR,AAEX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACF,AAIQ,AAAAlE,AAAIoE;AAAJ,AAAA,AAAApE;AAAAA;;AAAA;;AAJT,AAKY,AAASY;AAAT,AACE,AAAC0E,AAAcJ,AAAGxD,AAAMpC,AAAE,AAACiG,AAAc,AAAS,AAAU3E;AACzEuE;AApBP,AAAA,AAAAzE,AAAA,AAAA,AAAA,AAAAmE,AAAAD,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAA,AAAA,AAAAG,AAAAH;;AAAA,AAAA,AACIK;AAsBJ,AAAA,AAAApG,AAAAC,AAAA,AAAU2G,AACPP,AAAG5F;AADN,AAAA,AAAA,AAAAkG,AAE+B,AAACH,AAAUH;AAF1CM,AAAA,AAAAzH,AAAAyH;AAAAA,AAE4B7G;AAF5B,AAAAX,AAAAwH,AAAA,AAEgBJ;AACRhB,AAAE,AAACpG,AAAIoH,AAAO9F;AAHtB,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAKoB,AAAAV,AAAIoE;AAAJ,AAAA,AAAApE;AAAAA;;AAAA;;AACG,AAASY;AAAT,AACE,AAAC0E,AAAcJ,AAAGxD,AAAMpC,AAAE,AAAS,AAAUsB;AAPtE;AAAA,AAAA,AAA4BqE;AAU5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKS;AAEL,AAAA,AAAA7G,AAAAC,AAAA,AAAUmI,AAEP/B,AAAG5F;AAFN,AAAA,AAAA,AAAAqG,AAGgC,AAACN,AAAUH;AAH3CS,AAAA,AAAA5H,AAAA4H;AAAAA,AAG6BhH;AAH7B,AAAAX,AAAA2H,AAAA,AAGgBP;AACRhB,AAAE,AAACpG,AAAIoH,AAAO9F;AAJtB,AAAA,AAAAoB,AAAA,AAAA,AAMa,AAAAV,AAAIoE;AAAJ,AAAA,AAAApE;AAAAA;;AAAA;;AANb,AAAA,AAAA,AASgB,AAAKY;AAAL,AACE,AAAC0E,AAAcJ,AAAGxD,AAAMpC,AAAE,AAAS,AAAUsB;AAV/D,AAAA,AAAAgF,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAgwEmD,AAAAsa,AAAA3a;AAhwEnDM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAWWU;AAXX,AAAA,AAAA,AAAAR,AAAAJ,AAAA,AAAA5F,AAAA,AAAA,AAAA,AAAA,AAAAqE,AAYsBmC,AAAWA,AAAIA;;AAZrC,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAA7C,AAAAqC,AAWWoB;AAXX,AAAA,AAAAH,AAAA,AAAArG,AAAA,AAAA,AAAA,AAAA,AAAAqE,AAAA,AAAA8B,AAAA,AAAAG,AAAAlB,AAYsBoB,AAAWA,AAAIA;;;AAZrC;;;;AAAA,AAAA;;AAAA,AAAA,AAAArB,AAWcH;;AAXd,AAAA,AACIT;AAaJ,AAAA,AAAApG,AAAAC,AAAA,AAAAqI,AAAUS,AAEP1C,AAAG5F;AAFN,AAAA,AAAA8H,AAAAD;AAAAC,AAAA,AAAArJ,AAAAqJ;AAAA,AAAApJ,AAAAoJ,AAAA,AAEgBS;AAFhB,AAAA7J,AAAAoJ,AAAA,AAEwBU;AAFxB,AAAA,AAAA,AAAAT,AAGgC,AAAChC,AAAUH;AAH3CmC,AAAA,AAAAtJ,AAAAsJ;AAAAA,AAG6B1I;AAH7B,AAAAX,AAAAqJ,AAAA,AAGgBjC;AACRhB,AAAE,AAACpG,AAAIoH,AAAO9F;AAJtB,AAAA,AAAAoB,AAAA,AAAA,AAMa,AAAAV,AAAIoE;AAAJ,AAAA,AAAApE;AAAAA;;AAAM8H;;AANnB,AAAA,AAAA,AASgB,AAAKlH;AAAL,AACE,AAAC0E,AAAcJ,AAAGxD,AAAMpC,AAAE,AAAS,AAAUsB;AAV/D,AAAA,AAAAgF,AAAA,AAAAC,AAAA,AAAAyB;AAAA,AAAA,AAAAvB,AAAA,AAAA;AAAA,AAAA,AAAAuB,AAAAA;;AAAA,AAAA,AAAAtB,AAAA,AAAAC,AAAAqB;AAAA,AAAA,AAAAtB;AAAA,AAAA,AAAAsB,AAAAtB;AAAA,AAAA,AAAA,AAAAE,AAAAoB;AAAA,AAAAnB,AAkvEmD,AAAAsa,AAAAnZ;AAlvEnDlB,AAAA,AAAAC,AAAAF;AAAAoB,AAAA,AAAAhB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAoB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAApB;AAAA,AAAA,AAAAK,AAAAN,AAAAqB,AAWWO;AAXX,AAAA,AAAA,AAAArB,AAAAa,AAAA,AAAA,AAAA7G,AAAA,AAAA,AAAA,AAAA,AAAA+G,AAYW,AAASM,AACIA,AAAUA,AAAGA,AACAA;AAdrCN,AAAA,AAAA1J,AAAA0J;AAAA,AAAAzJ,AAAAyJ,AAAA,AAcuBO;AAdvB,AAAAhK,AAAAyJ,AAAA,AAc6BQ;AAd7B,AAAA,AAAAvH,AAAA,AAAA,AAAA,AAAA,AAAAqE,AAe0BiD,AAAaA,AAAOC;;;AAf9C,AAAA,AAAAT,AAAA;;;;AAAA;;;;;AAAA,AAAAb,AAAA,AAAAC,AAAAW,AAAA,AAAAG,AAAA,AAAAZ,AAAAQ;;AAAA,AAAAX,AAAA,AAAAC,AAAAW,AAAA;;;AAAA,AAAA,AAAA9D,AAAA6D,AAWWS;AAXX,AAAA,AAAAhB,AAAA,AAAA,AAAArG,AAAA,AAAA,AAAA,AAAA,AAAAiH,AAYW,AAASI,AACIA,AAAUA,AAAGA,AACAA;AAdrCJ,AAAA,AAAA5J,AAAA4J;AAAA,AAAA3J,AAAA2J,AAAA,AAcuBK;AAdvB,AAAAhK,AAAA2J,AAAA,AAc6BM;AAd7B,AAAA,AAAAvH,AAAA,AAAA,AAAA,AAAA,AAAAqE,AAe0BiD,AAAaA,AAAOC;AAf9C,AAAAP,AAAA,AAAAV,AAAAM;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAzB,AAWagC;;AAXb,AAAA,AACI5C;AAgBJ,AAAA,AAAApG,AAAAC,AAAA,AAAAoJ,AAAUI;AAAV,AAAA,AAAAH,AAAAD;AAAAC,AAAA,AAAApK,AAAAoK;AAAA,AAAAnK,AAAAmK,AAAA,AACWH;AADX,AAAAhK,AAAAmK,AAAA,AACiBI;AADjB,AAAAvK,AAAAmK,AAAA,AAAA,AAC2BK;AAD3B,AAAA,AAAA,AAAAJ,AAE+C,AAAA,AAAA,AAAA,AAAA,AAACtI,AAAqBkI;AAFrEK,AAAA,AAAApJ,AAAAmJ,AAAA,AAAA;AAAAC,AAAA,AAAAtK,AAAAsK;AAAAA,AAEiCM;AAFjC,AAAA3K,AAAAqK,AAAA,AAEiBI;AAFjB,AAAAzK,AAAAqK,AAAA,AAEsBK;AAFtB,AAAAzJ,AAAAmJ,AAAA,AAAA,AAEsCQ;AAFtC,AAGI,AAACvI,AACA;AAAA,AACE,AAAMwI,AAAG,AAAUb,AAAMQ;AACnBM,AAAG,AAACvD,AAAcsD;AAClBlK,AAAE,AAAGmK,AAAG,AAACvD,AAAckD;AAF7B,AAGE,AAAM,AAAAzI,AAAI,AAAC+I,AAASpK;AAAd,AAAA,AAAAqB;AAAAA;;AACI,AAAG,AAACgJ,AAAYrK,AAAG,AAAA,AAAO,AAAA,AAACsK,AAAeT;;;AADpD,AAEE,AAAAU,AAAA,AAAA,AAAA,AAAA,AACoBL,AACA,AAAA,AAAA,AAACM,AACD,AAAA,AAAA,AAACA;AAHrB,AAAA,AAAAD,AAAAA,AAACN,AAAAA,AAAAA;;AAFH;;AAJJ;AADD,AAYEZ;;AAfN,AAAAtH,AAAA,AAAA,AAAA,AAAA,AAiBoB+H,AACU,AAAA,AAAA,AAAIC,AACV,AAAS9H;AAAT,AACE,AAAMwI,AAAE,AAAC7D,AAAc,AAAS,AAAU3E;AACpCyI,AAAG,AAAC1I,AAAI,AAACoI,AAASK;AADxB,AAEE,AAAAE,AAAA,AAAA,AAAA,AAAgB,AAAS,AAAU1I,AAClByI;AADjB,AAAA,AAAAC,AAAAA,AAACV,AAAAA,AAAAA;;AAED,AAAMS;AAAN,AAAS,AAACd,AAAAA,AAAAA,AAAUa,AAAAA;;AAApB;;AAxB5B;AAAA,AAAA;AA0BA,AAAA,AAAAvK,AAAAC,AAAA,AAAAyK,AAAUG,AACPxE,AAAG5F;AADN,AAAA,AAAAkK,AAAAD;AAAAC,AAAA,AAAAzL,AAAAyL;AAAAA,AACiCG;AADjC,AAAA3L,AAAAwL,AAAA,AAAA,AACgB7K;AADhB,AAAA,AAAA,AAAA8K,AAEyB,AAACpE,AAAUH;AAFpCuE,AAAA,AAAA1L,AAAA0L;AAAA,AAAAzL,AAAAyL,AAAA,AAEgBrE;AACRhB,AAAE,AAACwF,AAAOxE,AAAO9F;AAHzB,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAOwB,AAAC4E,AAAcJ,AAAG1D,AAAUlC,AAAEuK;AAPtD,AASK,AAAA,AAAA,AAACvB,AAAoB,AAAAtI,AAAIoE;AAAJ,AAAA,AAAApE;AAAAA;;AAAA;;AAArB,AAAA,AAAA8J;AAAA,AAC0B,AAAAA,AAACxE,AAAcJ,AAAG6E,AAASzK;AAV1D,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAcwB,AAAC4E,AAAcJ,AAAG1D,AAAUlC,AAAE0K;AAdtD;AAAA,AAAA,AAAiC/E;AAgBjC,AAAA,AAAApG,AAAAC,AAAA,AAAAmL,AAAUG,AACPlF,AAAG5F;AADN,AAAA,AAAA4K,AAAAD;AAAAC,AAAA,AAAAnM,AAAAmM;AAAAA,AACiCP;AADjC,AAAA3L,AAAAkM,AAAA,AAAA,AACgBvL;AADhB,AAAA,AAAA,AAAAwL,AAEyB,AAAC9E,AAAUH;AAFpCiF,AAAA,AAAApM,AAAAoM;AAAA,AAAAnM,AAAAmM,AAAA,AAEgB/E;AACRhB,AAAE,AAACpG,AAAIoH,AAAO9F;AAHtB,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAOwB,AAAC4E,AAAcJ,AAAGzD,AAAOnC,AAAEuK;AAPnD,AASK,AAAA,AAAA,AAACvB,AAAoB,AAAAtI,AAAIoE;AAAJ,AAAA,AAAApE;AAAAA;;AAAA;;AAArB,AAAA,AAAAqK;AAAA,AAC0B,AAAAA,AAAC/E,AAAcJ,AAAGxD,AAAMpC;AAVvD,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAcwB,AAAC4E,AAAcJ,AAAGzD,AAAOnC,AAAE0K;AAdnD;AAAA,AAAA,AAAuC/E;AAgBvC,AAAA,AAAApG,AAAAC,AAAA,AAAUyL,AACPrF,AAAG5F;AADN,AAAA,AAAA,AAAAgL,AAEyB,AAACjF,AAAUH;AAFpCoF,AAAA,AAAAvM,AAAAuM;AAAA,AAAAtM,AAAAsM,AAAA,AAEgBlF;AACRhB,AAAE,AAACpG,AAAIoH,AAAO9F;AAHtB,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAUS,AAAA,AAAC8J,AAAoBlL,AAGdA,AACG,AAAKsB;AAAL,AACE,AAAC0E,AAAcJ,AAAGxD,AAAMpC,AAAE,AAAS,AAAUsB;AAflE,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAmBmC0D,AAIrB,AAAApE,AAAIoE;AAAJ,AAAA,AAAApE;AAAAA;;AAAA;;AACG,AAASY;AAAT,AACE,AAAC0E,AAAcJ,AAAGxD,AAAMpC,AAAE,AAAS,AAAUsB;AAzBhE;AAAA,AAAA,AAA6BqE;AA2B7B,AAAA,AAAApG,AAAAC,AAAA,AAAU0M,AAEPtG;AAFH,AAAA,AAAA,AAAAuF,AAGyB,AAACpF,AAAUH;AAHpCuF,AAAA,AAAA1M,AAAA0M;AAAA,AAAAzM,AAAAyM,AAAA,AAGgBrF;AAHhBsF,AAI2BtF;AAJ3BsF,AAAA,AAAA3M,AAAA2M;AAAA,AAAA1M,AAAA0M,AAAA,AAIgBe;AACRrC,AAAE,AAAC/C,AAAMoF;AALjB,AAAA,AAAA/K,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkF,AAAA,AAAAC,AAAA,AAAA8E;AAAA,AAAA,AAAA5E,AAAA,AAAA;AAAA,AAAA,AAAA4E,AAAAA;;AAAA,AAAA,AAAA3E,AAAA,AAAAC,AAAA0E;AAAA,AAAA,AAAA3E;AAAA,AAAA,AAAA4E,AAAA5E;AAAA,AAAA,AAAA,AAAAvC,AAAAmH,AAOW7I;AAPX,AAAA,AAAA8I,AAAA;AAAAC;AAAA,AAAA,AAAA/E,AAAA,AAAA;;AAAA,AAAA,AAAA+E,AAAAA;;AAAA,AAAA,AAAA9E,AAAA,AAAAC,AAAA6E;AAAA,AAAA,AAAA9E;AAAA,AAAA,AAAA8E,AAAA9E;AAAA,AAAA,AAAA,AAAAE,AAAA4E;AAAA,AAAA3E,AA4oEmD,AAAAsa,AAAA3V;AA5oEnD1E,AAAA,AAAAC,AAAAF;AAAA4E,AAAA,AAAAxE,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA4E,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA5E;AAAA,AAAA,AAAAK,AAAAN,AAAA6E,AAQWW;AARX,AAAA,AASiBC,AAAM,AAAC3M,AAAIwM,AAAS1J;AATrC,AAAA,AAAA,AAAA2E,AAAAqE,AAAA,AAAAE,AAUaU;AAVbV,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAYa,AAAA,AAACT,AAAoBoB;AAZlC,AAAAlL,AAAA,AAAA,AAAA,AAeoBkL,AACF,AAAA,AAAU7J,AACL;AAAKnB;AAAL,AACE,AAAA,AAAA,AAAC0E,AAAcJ,AAAG6E,AACShI,AACZ,AAAS,AAAUnB;;AApB3D;;AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAsBkB,AAAA,AAASqB,AAIY6J;;;;AA1BvC;AAAA,AAAAlL,AAAA,AAAA,AAAA,AA6BuB,AAAA,AAASqB,AACP6J,AACG;AAAShL;AAAT,AACE,AAAA,AAAA,AAAC0E,AAAcJ,AAAG6E,AACShI,AACZ,AAAS,AAAUnB;;AAlChE;;;AAAA;AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAsCwB,AAAA,AAASqB,AACJ,AAAA,AAAGqH,AACJ;;AAAA,AACE,AAAA,AAAC9D,AAAcJ,AAAGzD,AACH;AAAK2C;AAAL,AACE,AAAI,AAAA,AAAGgF;AACLhF;;AACA,AAACyH,AAAI,AAACP,AAAO,AAACQ,AAAK/J,AAAEqC,AACR,AAAC2H,AAAK,AAAA,AAAKhK,AAAGqC;;;;;AA9C5E,AAAA;;;;AAAA,AAAA,AAAAtC,AAAA,AAAA,AAAAmJ;;;;;AAAA,AAAA,AAAAD,AAAA;;;;AAAA;;;;;AAAA,AAAArE,AAAA,AAAAC,AAAAmE,AAAA,AAAAI,AAAA,AAAArE,AAAAgE;;AAAA,AAAAnE,AAAA,AAAAC,AAAAmE,AAAA;;;AAAA,AAAA,AAAAtH,AAAAqH,AAQWa;AARX,AAAA,AASiBC,AAAM,AAAC3M,AAAIwM,AAAS1J;AATrC,AAAA,AAAAgF,AAAA,AAAAqE,AAUaO;AAVbP,AAAA,AAAA,AAAAA,AAAAF,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAYa,AAAA,AAACZ,AAAoBoB;AAZlC,AAAAlL,AAAA,AAAA,AAAA,AAeoBkL,AACF,AAAA,AAAU7J,AACL;AAAKnB;AAAL,AACE,AAAA,AAAA,AAAC0E,AAAcJ,AAAG6E,AACShI,AACZ,AAAS,AAAUnB;;AApB3D;;AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAsBkB,AAAA,AAASqB,AAIY6J;;;;AA1BvC;AAAA,AAAAlL,AAAA,AAAA,AAAA,AA6BuB,AAAA,AAASqB,AACP6J,AACG;AAAShL;AAAT,AACE,AAAA,AAAA,AAAC0E,AAAcJ,AAAG6E,AACShI,AACZ,AAAS,AAAUnB;;AAlChE;;;AAAA;AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAsCwB,AAAA,AAASqB,AACJ,AAAA,AAAGqH,AACJ;;AAAA,AACE,AAAA,AAAC9D,AAAcJ,AAAGzD,AACH;AAAK2C;AAAL,AACE,AAAI,AAAA,AAAGgF;AACLhF;;AACA,AAACyH,AAAI,AAACP,AAAO,AAACQ,AAAK/J,AAAEqC,AACR,AAAC2H,AAAK,AAAA,AAAKhK,AAAGqC;;;;;AA9C5E,AAAA;;;;AAAA,AAAA,AAAAtC,AAAA,AAAA,AAAAsJ;;;AAAA,AAAAD,AAAA,AAAAnE,AAAA8D;;;AAAA;;;;;AAAA,AAAA;;;AAAAO,AAAA,AAAApF,AAAA,AAAA4E,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAQ;AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAA,AAAAvE,AAAA2D;;AAAA,AAAA,AAAA3D,AAAA2D;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAA9E,AAOa,AAAC6F,AAAMtC;AAPpB,AAAA1I,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAkDiB,AAAA,AAAA,AAAC4E,AAAcJ,AAAGzD,AAAkBuK;AAlDrD;AAAA,AAAA,AACI/G;AAmDJ,AAAA,AAAApG,AAAAC,AAAA,AAAU+N,AAEP3H;AAFH,AAAA,AAAA,AAAA+G,AAGyB,AAAC5G,AAAUH;AAHpC+G,AAAA,AAAAlO,AAAAkO;AAAA,AAAAjO,AAAAiO,AAAA,AAGgB7G;AACR9E,AAAI,AAAA,AAACtC,AAAIoH;AACTgE,AAAE,AAAC/C,AAAM/F;AALjB,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkF,AAAA,AAAAC,AAAA,AAAAqG;AAAA,AAAA,AAAAnG,AAAA,AAAA;AAAA,AAAA,AAAAmG,AAAAA;;AAAA,AAAA,AAAAlG,AAAA,AAAAC,AAAAiG;AAAA,AAAA,AAAAlG;AAAA,AAAA,AAAA4E,AAAA5E;AAAA,AAAA,AAAA,AAAAvC,AAAAmH,AAOW7I;AAPX,AAAA,AAAAoK,AAQqC,AAAClN,AAAIqB,AAAIyB;AAR9CoK,AAAA,AAAApO,AAAAoO;AAAA,AAAAnO,AAAAmO,AAAA,AAQyBW;AARzB,AAAA9O,AAAAmO,AAAA,AAQ6BP;AACZmB,AAAK,AAAI,AAAA,AAACC,AAAEjL,AACL,AAAA,AAAC/D,AAAIoH,AACL,AAAA,AAACpH,AAAI,AAACiB,AAAIqB,AAAI,AAAA,AAAKyB;AAC1BkL,AAAK,AAAI,AAACD,AAAEjL,AAAE,AAAA,AAAKqH,AACZ,AAAA,AAACpL,AAAIoH,AACL,AAAA,AAACpH,AAAI,AAACiB,AAAIqB,AAAI,AAAA,AAAKyB;AAd3C,AAAA,AAAA8I,AAAA;AAAAuB;AAAA,AAAA,AAAArG,AAAA,AAAA;;AAAA,AAAA,AAAAqG,AAAAA;;AAAA,AAAA,AAAApG,AAAA,AAAAC,AAAAmG;AAAA,AAAA,AAAApG;AAAA,AAAA,AAAAoG,AAAApG;AAAA,AAAA,AAAA,AAAAE,AAAAkG;AAAA,AAAAjG,AAwlEmD,AAAAsa,AAAArU;AAxlEnDhG,AAAA,AAAAC,AAAAF;AAAAkG,AAAA,AAAA9F,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAkG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAlG;AAAA,AAAA,AAAAK,AAAAN,AAAAmG,AAeWX;AAfX,AAAA,AAAA,AAAAjF,AAAA2F,AAAA,AAAAE,AAgBaZ;AAhBbY,AAAA,AAAA,AAAAA,AAAArB,AAAA,AAAAqB,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAA7L,AAAA,AAAA,AAAA,AAAA,AAmBwB,AAAA,AAASqB,AAEJ,AAAA,AAAGqH,AACJ;;AAAA,AACE,AAAA,AAAC9D,AAAcJ,AACAzD,AACA;AAAK2C;AAAL,AACE,AAAI,AAAA,AAAGgF;AACLhF;;AACA,AAACyH,AAAI,AAACP,AAAO,AAACQ,AAAK/J,AAAEqC,AACR,AAAC2H,AAAK,AAAA,AAAKhK,AAAGqC;;;;;AA7B5E,AAAA;;;AAAA;AAAA,AAAA1D,AAAA,AAAA,AAAA,AA8B4B,AAAA,AAASqB,AAChB,AAAA,AAAU+K,AACV,AAAA,AAAA,AAAC3D,AACD,AAAA,AAAA,AAACA;;;AAjCtB;AAAA,AAAAzI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAoCwB,AAAA,AAASqB,AAGY6J;;;AAvC7C;AAAA,AAAAlL,AAAA,AAAA,AAAA,AA0CuB,AAAA,AAASqB,AACP6J,AACG;AAAShL;AAAT,AACE,AAAA,AAAA,AAAA,AAAC0E,AAAcJ,AAAG6E,AACUhI,AACb,AAAS,AAAUnB;;AA/ChE;;;AAAA;AAAA,AAAA4L,AAgDyDpH;AAhDzDoH,AAAA,AAAAzO,AAAAyO;AAAA,AAAAxO,AAAAwO,AAAA,AAgD+BU;AAhD/B,AAAAlP,AAAAwO,AAAA,AAgDmCW;AAhDnC,AAAAnP,AAAAwO,AAAA,AAgDuCY;AAhDvC,AAAApP,AAAAwO,AAAA,AAgD+Ca;AACxBC,AAAK,AAAG,AAAGJ,AAAIC,AACN,AAAGC,AAAQC;AAlD3C,AAAA,AAAA3M,AAAA,AAAA,AAAA,AAqD0B,AAAA,AAASqB,AACTgL,AACAE,AACCK,AACCR,AACG;AAASlM;AAAT,AACE,AAAA,AAAA,AAAA,AAAC0E,AAAcJ,AAAG6E,AACUhI,AACb,AAACwD,AAAc,AAAS,AAAU3E;;AA7DlF;;;;AAAA,AAAA,AAAAkB,AAAA,AAAA,AAAAyK;;;;;AAAA,AAAA,AAAAD,AAAA;;;;AAAA;;;;;AAAA,AAAA3F,AAAA,AAAAC,AAAAyF,AAAA,AAAAI,AAAA,AAAA3F,AAAAsF;;AAAA,AAAAzF,AAAA,AAAAC,AAAAyF,AAAA;;;AAAA,AAAA,AAAA5I,AAAA2I,AAeWT;AAfX,AAAA,AAAA5E,AAAA,AAAA2F,AAgBaf;AAhBbe,AAAA,AAAA,AAAAA,AAAAxB,AAAA,AAAAwB,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAhM,AAAA,AAAA,AAAA,AAAA,AAmBwB,AAAA,AAASqB,AAEJ,AAAA,AAAGqH,AACJ;;AAAA,AACE,AAAA,AAAC9D,AAAcJ,AACAzD,AACA;AAAK2C;AAAL,AACE,AAAI,AAAA,AAAGgF;AACLhF;;AACA,AAACyH,AAAI,AAACP,AAAO,AAACQ,AAAK/J,AAAEqC,AACR,AAAC2H,AAAK,AAAA,AAAKhK,AAAGqC;;;;;AA7B5E,AAAA;;;AAAA;AAAA,AAAA1D,AAAA,AAAA,AAAA,AA8B4B,AAAA,AAASqB,AAChB,AAAA,AAAU+K,AACV,AAAA,AAAA,AAAC3D,AACD,AAAA,AAAA,AAACA;;;AAjCtB;AAAA,AAAAzI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAoCwB,AAAA,AAASqB,AAGY6J;;;AAvC7C;AAAA,AAAAlL,AAAA,AAAA,AAAA,AA0CuB,AAAA,AAASqB,AACP6J,AACG;AAAShL;AAAT,AACE,AAAA,AAAA,AAAA,AAAC0E,AAAcJ,AAAG6E,AACUhI,AACb,AAAS,AAAUnB;;AA/ChE;;;AAAA;AAAA,AAAA+L,AAgDyDvH;AAhDzDuH,AAAA,AAAA5O,AAAA4O;AAAA,AAAA3O,AAAA2O,AAAA,AAgD+BO;AAhD/B,AAAAlP,AAAA2O,AAAA,AAgDmCQ;AAhDnC,AAAAnP,AAAA2O,AAAA,AAgDuCS;AAhDvC,AAAApP,AAAA2O,AAAA,AAgD+CU;AACxBC,AAAK,AAAG,AAAGJ,AAAIC,AACN,AAAGC,AAAQC;AAlD3C,AAAA,AAAA3M,AAAA,AAAA,AAAA,AAqD0B,AAAA,AAASqB,AACTgL,AACAE,AACCK,AACCR,AACG;AAASlM;AAAT,AACE,AAAA,AAAA,AAAA,AAAC0E,AAAcJ,AAAG6E,AACUhI,AACb,AAACwD,AAAc,AAAS,AAAU3E;;AA7DlF;;;;AAAA,AAAA,AAAAkB,AAAA,AAAA,AAAA4K;;;AAAA,AAAAD,AAAA,AAAAzF,AAAAoF;;;AAAA;;;;;AAAA,AAAA;;;AAAAf,AAAA,AAAApF,AAAA,AAAA4E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAQ;AAAA,AAAAC,AAAAD,AAAA,AAAAuB,AAAA,AAAA5F,AAAAkF;;AAAA,AAAA,AAAAlF,AAAAkF;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAArG,AAOa,AAAC6F,AAAMtC;AAPpB,AAAA1I,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAkEQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC4E,AAAcJ,AAAGzD,AAAmBuK,AAEf,AAAA,AAAChO,AAAIoH;AApEnC,AAAA;AAAA,AAAA,AACIH;AAqEJ,AAAA,AAAApG,AAAAC,AAAA,AAAU2O,AACPvI;AADH,AAAA,AAAA,AAAAqI,AAE+B,AAAClI,AAAUH;AAF1CqI,AAAA,AAAAxP,AAAAwP;AAAAA,AAE4B5O;AAF5B,AAAAX,AAAAuP,AAAA,AAEgBnI;AAFhBoI,AAGoDpI;AAHpDoI,AAAA,AAAAzP,AAAAyP;AAAAA,AAGgDG;AAHhD,AAAA3P,AAAAwP,AAAA,AAGgBE;AAHhB,AAAA1P,AAAAwP,AAAA,AAG0B/B;AAH1B,AAAAzN,AAAAwP,AAAA,AAGmCL;AAHnC,AAAAnP,AAAAwP,AAAA,AAGuCN;AAHvC,AAAA,AAKMQ;AAAU,AAAAjN,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAMa,AAASE;AAAT,AACE,AAAA,AAAAgN,AAACtI,AAAcJ;AAAf,AAEoB,AAAA0I,AAAA,AAACC,AACD,AAAA,AAAC3M,AACM,AAAA4M,AAAQ,AAAAjI,AAAA,AAAAkI;AAAA,AAAA,AAAAhI,AAAA,AAAA;AAAA,AAAA,AAAAgI,AAAAA;;AAAA,AAAA,AAAA/H,AAAA,AAAAC,AAAA8H;AAAA,AAAA,AAAA/H;AAAA,AAAA,AAAA+H,AAAA/H;AAAA,AAAA,AAAA,AAAAE,AAAA6H;AAAA,AAAA5H,AAkgEf,AAAAsa,AAAA1S;AAlgEe3H,AAAA,AAAAC,AAAAF;AAAA6H,AAAA,AAAAzH,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA6H,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA7H;AAAA,AAAA,AAAAK,AAAAN,AAAA8H,AAAM3L;AAAN,AAAA,AAAA,AAAAoE,AAAAsH,AACE,AAAA,AAAChQ,AAAIsE;;AADP,AAAA,AAAA2L,AAAA;;;;AAAA;;;;;AAAA,AAAAtH,AAAA,AAAAC,AAAAoH,AAAA,AAAAE,AAAA,AAAApH,AAAAiH;;AAAA,AAAApH,AAAA,AAAAC,AAAAoH,AAAA;;;AAAA,AAAA,AAAAvK,AAAAsK,AAAMzL;AAAN,AAAA,AAAAyE,AAAA,AAAAmH,AAAA,AAAAlH,AAAA+G,AACE,AAAA,AAAC/P,AAAIsE;;;AADP;;;;AAAA,AAAA;;AAAA,AAAA,AAAAuD,AAAQ6H;;AAAhBI,AAAA,AAAA,AAAAA,AAEOjC;;AAFP,AAAA,AAGE,AAAGqB,AAAIC;AAHT,AAAAW,AAGcK;;AAHdL;;;;AAX1C,AAeC,AAACjB,AAAe3H;;AApBjC,AAsBMuG;AAAS,AAAAhL,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAMa,AAASE;AAAT,AACE,AAAA,AAAAwN,AAAC9I,AAAcJ;AAAf,AAEoB,AAAAkJ,AAAA,AAACP,AACD,AAAA,AAAC3M,AACM,AAAC7D,AACA,AAACgR,AACA,AAACzL,AAAQ6I,AACT,AAAA,AAACzN,AAAIoH,AACL,AAAA,AAACpH,AAAIoH;;AAfjD,AAAA,AAAA,AAiBC,AAACoG,AAActG;;AAvC/B,AAAA;;;;AAAA,AAAA,AAAkCD;AA2ClC,AAAA,AAAApG,AAAAyP,AAAA,AAAAC,AAAWI,AACiBzJ;AAD5B,AAAA,AAAAsJ,AAAAD;AAAAC,AAAA,AAAAzQ,AAAAyQ;AAAAA,AACuBK;AADvB,AAAA7Q,AAAAwQ,AAAA,AACYxG;AADZ,AAAA,AAAA,AAAAyG,AAEyB,AAACpJ,AAAUH;AAFpCuJ,AAAA,AAAA1Q,AAAA0Q;AAAA,AAAAzQ,AAAAyQ,AAAA,AAEgBrJ;AAFhBsJ,AAGuBtJ;AAHvBsJ,AAAA,AAAA3Q,AAAA2Q;AAAA,AAAA1Q,AAAA0Q,AAAA,AAGgBjG;AAHhB,AAAA,AAAA/H,AAAA,AAAA,AAKY,AAAC2F,AAAMoC,AACN,AAAAzI,AAAI,AAAC8O,AAAU,AAAAC,AAAQ/G;AAAR,AAAA,AAAA,AAAA+G,AAAA;AAAA;;AAAA,AAAAA,AAAcC;;;AAA7B,AAAA,AAAAhP;AAAAA;;AACE,AAAA,AAACiP,AAAiBxG;;AACjB,AAAS7H;AAAT,AACE,AAAMwD,AAAE,AAAS,AAAUxD;AAA3B,AACE,AAAAsO,AAAQlH;AAAR,AAAA,AAAA,AAAAkH,AAAA;AAAA;AAAc,AAAAA,AAACC,AAAO/K;;;AACtB,AAAA,AAACkB,AAAcJ,AAAGxD,AACH,AAAA,AAAC0N,AAAahL;AAZjD;AAAA,AAAA,AAA4Ba,AAAa,AAAA,AAAA,AAAC2J;AAc1C,AAAA,AAAA/P,AAAAC,AAAA,AAAUwQ,AACPpK;AADH,AAAA,AAAA,AAAAmK,AAEgC,AAAChK,AAAUH;AAF3CmK,AAAA,AAAAtR,AAAAsR;AAAAA,AAE6B1Q;AAF7B,AAAAX,AAAAqR,AAAA,AAEgBjK;AAFhB,AAAA,AAAA1E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKuB,AAAA,AAACsM,AAAqB,AAAA,AAAChP,AAAIoH;AALlD,AAMuB,AAAA,AAAA,AAACE,AAAcJ,AAAGxD;AANzC,AAAA,AAAAhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAQuB,AAAA,AAAA,AAAI,AAAA,AAACsM,AAAmB,AAAA,AAAChP,AAAIoH;AARpD,AASuB,AAAA,AAAA,AAACE,AAAcJ,AAAGxD;AATzC;AAAA,AAAA,AAAkCuD;AAWlC,AAAKsK,AAAiB,AAAClS,AAAQ,AAACmS;AAEhC,AAAA,AAAMC,AACH9D;AADH,AAEE,AAAM+D,AAAI,AAAC1R,AAAIuR,AAAiB5D;AAC1BzE,AAAG,AAAA,AAAQ,AAASwI,AACfA,AACA,AAAC1R,AAAIuR,AAAiBG;AAHjC,AAIE,AAAUxI;AAAV;AAAA,AACE,AAAO,AAAA,AAAA,AAACyI,AAAQ,AAAA,AAAyBD,AAAS/D;;;AACpDzE;;AAEJ,AAAA,AAAArI,AAAAC,AAAA,AAAA8Q,AAAUE,AACP5K;AADH,AAAA,AAAA2K,AAAAD;AAAAC,AAAA,AAAA9R,AAAA8R;AAAA,AAAA7R,AAAA6R,AAAA,AACcE;AADd,AAAA/R,AAAA6R,AAAA,AACkB5H;AADlB,AAAAjK,AAAA6R,AAAA,AACwBG;AADxB,AAAAhS,AAAA6R,AAAA,AAC6B1K;AAD7B,AAAA,AAEE,AAAA1E,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAqE,AAAA,AAAA,AAAAkL,AACOhI,AACMA,AACN+H;AAHP,AAAA,AAAAC;AAAA;AAIe,AAAC7F,AAA2BlF,AAAG6K;;;AAJ9C;AAKe,AAAC9I,AAAoB/B,AAAG6K;;;AALvC;AAMe,AAAC/K,AAAkBE,AAAG6K,AAAI5K;;;AANzC;AAOe,AAACoF,AAAiBrF,AAAG6K;;;AAPpC;AAQe,AAACnI,AAAkB1C,AAAG6K,AAAI5K;;;AARzC;AAU2B,AAACwJ,AAAezJ;;;AAV3C;AAW2B,AAACoK,AAAsBpK;;;AAXlD;AAY2B,AAACuI,AAAsBvI;;;;AAZlD,AAcO,AAAA,AAACtG,AAAkCoR;;AAd1C;;;;AAFF,AAAA;AAmBA,AAAA,AAAAnR,AAAAC,AAAA,AAAUqR,AACPjL;AADH,AAAA,AAAA,AAAAgL,AAE+B,AAAC7K,AAAUH;AAF1CgL,AAAA,AAAAnS,AAAAmS;AAAAA,AAE4BvR;AAF5B,AAAAX,AAAAkS,AAAA,AAEgB9K;AACRgL,AAAG,AAAA,AAACpS,AAAIoH;AACR8B,AAAG,AAACuI,AAAaW;AAJzB,AAKI,AAAU,AAACnK,AAAIiB;AAAf;AAAA,AACE,AAAA,AAACtI,AAAyCwG;;;AAC5C,AAAA3E,AAAA,AAAAA,AAAA,AAAA,AAAAmF,AAAA,AAAAC,AAAA,AAAAwK;AAAA,AAAA,AAAAtK,AAAA,AAAA;AAAA,AAAA,AAAAsK,AAAAA;;AAAA,AAAA,AAAArK,AAAA,AAAAC,AAAAoK;AAAA,AAAA,AAAArK;AAAA,AAAA,AAAAqK,AAAArK;AAAA,AAAA,AAAA,AAAAE,AAAAmK;AAAA,AAAAlK,AAw6D+C,AAAAsa,AAAApQ;AAx6D/CjK,AAAA,AAAAC,AAAAF;AAAAmK,AAAA,AAAA/J,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAmK,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAnK;AAAA,AAAA,AAAAK,AAAAN,AAAAoK,AACOxO;AADP,AAAA,AAAA,AAAA2E,AAAA4J,AAEO,AAACR,AAAY5K,AAAG,AAACjG,AAAIiI,AAAGnF,AACxB,AAAC0O,AAAa1O;;AAHrB,AAAA,AAAAwO,AAAA;;;;AAAA;;;;;AAAA,AAAA5J,AAAA,AAAAC,AAAA0J,AAAA,AAAAE,AAAA,AAAA1J,AAAAuJ;;AAAA,AAAA1J,AAAA,AAAAC,AAAA0J,AAAA;;;AAAA,AAAA,AAAA7M,AAAA4M,AACOtO;AADP,AAAA,AAAAgF,AAAA,AAAAyJ,AAAA,AAAAxJ,AAAAqJ,AAEO,AAACP,AAAY5K,AAAG,AAACjG,AAAIiI,AAAGnF,AACxB,AAAC0O,AAAa1O;;;AAHrB;;;;AAAA,AAAA;;AAAA,AAAA,AAAA8D,AACS,AAAC6F,AAAM,AAACrF,AAAMa;;AAR3B,AAAA,AAA0BjC;AAY1B,AAAA,AAAApG,AAAAC,AAAA,AAAU8R,AAEP1L,AAAGnD;AAFN,AAAA,AAAA,AAGQpD,AAAI,AAAC0G,AAAUH;AACf/G,AAAI,AAAA,AAACH,AAAI,AAAA,AAASW;AAClBP,AAAI,AAAA,AAACJ,AAAI,AAAA,AAASW;AAClBmO,AAAI,AAAA,AAAC9O,AAAI,AAAA,AAASW;AAN1B,AAAA,AAAA+B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAqE,AAQK,AAAAiB,AAAgB,AAAA,AAASrH;AAAzB,AAAA,AAAAqH;AAAA,AAAA,AAAAA,AAAW7G;AAAX,AACE,AAAC4D,AAAqB5D;;AADxB;;AARL,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAgQ,AAYM,AAAA,AAACjL,AAAgBP,AAGjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAACF,AAAkBE,AAAqBvH,AAExC,AAAA,AAAA,AAAA,AAAA,AAAA,AAACqH,AAAkBE,AAAqBtH,AAElCkP,AACAA,AACyB,AAAA,AAASnO;AArB9C+R,AAAA,AAAA3S,AAAA2S;AAAA,AAAA1S,AAAA0S,AAAA,AAqBsBV;AArBtB,AAAAhS,AAAA0S,AAAA,AAqB2BvD;AArB3B,AAAAnP,AAAA0S,AAAA,AAqB+BxD;AArB/B,AAAA,AAAAyD,AAsBgBX;AAtBhB,AAAA,AAAAW;AAAA;AAAA;AAAA;AAAA;AAwBY,AAAA,AAAA,AAACjH,AAAqBxE;;;;AAxBlC,AA0BkB2L,AAAS,AAAAC,AAAkB3D;AAAlB4D,AAAsB7D;AAAtB,AAAA,AAAA4D,AAAAC,AAAAD,AAAAC;;AACTC,AAAS,AAAAC,AAAkB9D;AAAlB+D,AAAsBhE;AAAtB,AAAA,AAAA+D,AAAAC,AAAAD,AAAAC;;AA3B3B,AA4Bc,AAAA,AAAA,AAAA,AAAA,AAAA,AAAClM,AAAkBE,AACO2L,AACAG,AACA,AAAA,AAAQ,AAAGA,AAASH;;;AA/B5D,AAAA,AAAAnQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAmCiB,AAAA,AAAAC,AAAA,AAAA,AAAQ,AAAA,AAAUhC;AAnCnC,AAoCkB,AAAA,AAAC4C,AAAM2D,AAAGzD,AAAgBd;AApC5C,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AA+CiB;AAAA,AACE,AAAA,AAAA,AAAA,AAACa,AAAMrE,AAAGsE,AACM,AAAA,AAAA,AAAAwN,AAAkB9R,AAC3B,AAAKiU;AAAL,AAAS,AAACjQ,AAAMiQ,AAAG,AAAC9K,AAAM8K,AAAIxS;;AAlDxD,AAAA,AAAA+B,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAsDkB,AAAA,AAAA,AAACa,AAAM2D,AAAGxD;AAtD5B,AAAA,AAAAhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA2DY,AAAA,AAAU/B,AACd,AAACwR,AAAcjL;AA5DvB,AAAA,AACID;AA6DJ,AAAA,AAAMmM,AACHC,AAAKC;AADR,AAEE,AAAMC,AAAE,AAAAC,AAAA,AAAeF;AACjBG,AAAE,AAACC,AAAuBH;AAC1BxN,AAAE,AAAA,AAACvB;AAFT,AAGE,AAAM,AAAQuB,AAAG0N;;AACjB,AAAM,AAAY1N,AAAGsN;;AACrB,AAAQtN;;AAEZ,AAAA,AAAM4N,AACHC,AAAIzP,AAAEC;AADT,AAEE,AAAME,AAAE,AAAAwP,AAAM,AAAA,AAACtP;AAAP,AAAA,AAAAsP,AAAA,AACgB3P;;AADhB,AAAA2P,AAAA,AAEiB1P;;AAFjB0P;;AAGFtR,AAAI,AAAA,AAAa8B;AAHvBuP,AAIwCD;AAJxCC,AAAA,AAAA9T,AAAA8T;AAAA,AAAA7T,AAAA6T,AAAA,AAIcE;AAJd,AAAA/T,AAAA6T,AAAA,AAIqBG;AACfC,AAAG,AAAA,AAAMD,AACJ,AAAAE,AAAM,AAAA,AAAC1P;AAAP,AAAA,AAAA0P,AAAA,AACcF;;AADdE;AADF;AAGHC,AAAE,AAAA,AAAA,AAAMF,AAAG,AAAA,AAAA,AAAYzR,AAAIyR,AAAO9P,AAAEC;AACpCgQ,AAAM,AAACvG,AACA,AAAAhG,AAAA,AAAAwM;AAAA,AAAA,AAAAtM,AAAA,AAAA;AAAA,AAAA,AAAAsM,AAAAA;;AAAA,AAAA,AAAArM,AAAA,AAAAC,AAAAoM;AAAA,AAAA,AAAArM;AAAA,AAAA,AAAAqM,AAAArM;AAAA,AAAA,AAAA,AAAAE,AAAAmM;AAAA,AAAAlM,AAg1DoC,AAAAsa,AAAApO;AAh1DpCjM,AAAA,AAAAC,AAAAF;AAAAmM,AAAA,AAAA/L,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAmM,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAnM;AAAA,AAAAoM,AAAA,AAAA/L,AAAAN,AAAAoM;AAAA,AAAAtT,AAAAuT,AAAA,AAAA,AAAOzQ;AAAP0Q,AAAA,AAAAxT,AAAAuT,AAAA,AAAA;AAAAC,AAAA,AAAA1U,AAAA0U;AAAAA,AAA+B9T;AAA/B,AAAAX,AAAAyU,AAAA,AAAiBI;AAAjB,AAAA,AACY,AAAClS,AAAIkS;AADjB,AAAA,AAAAnM,AAAA4L,AAEE,AAACpO,AACA,AAAA,AAASvF,AACJ,AAAA,AAAA,AAACkP,AAAO,AAAA,AAASlP,AACjB,AAACiE,AACD,AAACD,AAAenC,AAChB,AAACnD;;AAPT,AAAA,AAAAkV,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAA5L,AAAA,AAAAC,AAAA0L,AAAA,AAAAI,AAAA,AAAA5L,AAAAuL;;AAAA,AAAA1L,AAAA,AAAAC,AAAA0L,AAAA;;;AAAA,AAAAK,AAAA,AAAAlP,AAAA4O;AAAA,AAAApT,AAAA0T,AAAA,AAAA,AAAO5Q;AAAP6Q,AAAA,AAAA3T,AAAA0T,AAAA,AAAA;AAAAC,AAAA,AAAA7U,AAAA6U;AAAAA,AAA+BjU;AAA/B,AAAAX,AAAA4U,AAAA,AAAiBC;AAAjB,AAAA,AACY,AAAClS,AAAIkS;AADjB,AAAA9L,AAAA,AAAA2L,AAAA,AAAA1L,AAAAqL,AAEE,AAACnO,AACA,AAAA,AAASvF,AACJ,AAAA,AAAA,AAACkP,AAAO,AAAA,AAASlP,AACjB,AAACiE,AACD,AAACD,AAAenC,AAChB,AAACnD;;AAPT,AAAA,AAAA2J,AAAAqL;;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAxM,AAAmCkM;;AAVhD,AAkBE,AAAAe,AACC,AAAKC,AAAQC;AAAb,AACE,AAAS1Q,AAAE,AAAKiP;AAAL,AAAQ,AAAA0B,AAAA,AAAA,AAAA,AAAiB1B,AAAQa;AAAzB,AAAA,AAAAa,AAAAA,AAACF,AAAAA,AAAAA;AAApB;;;AAGP,AAAA,AAAMG,AACH/Q,AAAEC;AADL,AAEE,AAAO,AAACuP,AAAa,AAAC3T,AAAI,AAAA,AAAA,AAAAgR,AAAU9R,AAAI,AAAA,AAAA8R,AAAA,AAAChR,AAAKd,AAAqBiF,AAAEC,AAC9D,AAAA+Q;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAArV,AAAAqV;AAAA,AAAApV,AAAAoV,AAAA,AAAaC;AAAb,AACE,AAAA,AAACjC,AAAgC,AAAA,AAAA,AAACkC,AAAkB,AAAC1Q,AAAQyQ;;AAC7D,AAAA,AAACjC,AACkB,AAAA,AAAA,AAACkC,AACA,AAAA,AAAA,AAAA,AAAC1Q,AAAgByQ,AACI,AAAc,AAAAE;;;AAIlE,AAAA,AAAMC,AACHrR,AAAEC;AADL,AAEE,AAAO,AAACuP,AAAa,AAAC3T,AAAI,AAAA,AAAA,AAAAgR,AAAU9R,AAAI,AAAA,AAAA8R,AAAA,AAAChR,AAAKd,AAAqBiF,AAAEC,AAC9D,AAAAqR;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA3V,AAAA2V;AAAA,AAAA1V,AAAA0V,AAAA,AAAaC;AAAb,AACE,AAAA,AAACvC,AAA+BuC;;;AAE3C,AAAA,AAAMC,AACHxP;AADH,AAEE,AAAA0O,AACC,AAAKC,AAAQC;AAAb,AACE,AAAMa,AAAG,AAAAC,AAAM,AAAAC;AAAN,AAAA,AAAAD,AACiB1P;;AADjB0P;;AAAT,AAEC,AAAM,AAASD,AAAIb;;AACnB,AAAA,AAAM,AAAaa;AAAnB,AAAwB,AAAAG,AAAS,AAAUH;AAAnB,AAAA,AAAAG,AAAAA,AAACjB,AAAAA,AAAAA;;;;AAE/B,AAAA,AAAMkB,AACH9R,AAAEC;AADL,AAEE,AAAC8R,AACA,AAACtO,AACA,AAAAC,AAAA,AAAAsO;AAAA,AAAA,AAAApO,AAAA,AAAA;AAAA,AAAA,AAAAoO,AAAAA;;AAAA,AAAA,AAAAnO,AAAA,AAAAC,AAAAkO;AAAA,AAAA,AAAAnO;AAAA,AAAA,AAAAmO,AAAAnO;AAAA,AAAA,AAAA,AAAAE,AAAAiO;AAAA,AAAAhO,AAoyD+C,AAAAsa,AAAAtM;AApyD/C/N,AAAA,AAAAC,AAAAF;AAAAiO,AAAA,AAAA7N,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAiO,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAjO;AAAA,AAAAkO,AAAA,AAAA7N,AAAAN,AAAAkO;AAAA,AAAApV,AAAAqV,AAAA,AAAA,AAAOG;AAAP,AAAAxV,AAAAqV,AAAA,AAAA,AAAkBI;AAAlB,AAAA,AAAA,AAAAhO,AAAA0N,AACE,AAAO,AAACzC,AAAa+C,AAAMvS,AAAEC,AACtB;AAAAuS;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA7W,AAAA6W;AAAA,AAAA5W,AAAA4W,AAAA,AAAajB;AAAb,AAAA3V,AAAA4W,AAAA,AAAmBvB;AAAnB,AACE,AAAO,AAACO,AAAaD,AACd;AAAKoB;AAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqB,AAAA,AAAA,AAA6BN,AAC/B,AAAC7R,AAAQyQ,AACP,AAAA,AAAA,AAA6BoB,AAC/B,AAAA,AAAA,AAAA,AAAC7R,AAAgByQ,AACI,AAAc,AAAAE,AACjC,AAAA,AAAA,AAA6BkB,AAC7B,AAACO,AAAKD,AAAK,AAAA;;;;;;AAXlD,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAA1N,AAAA,AAAAC,AAAAwN,AAAA,AAAAG,AAAA,AAAAzN,AAAAqN;;AAAA,AAAAxN,AAAA,AAAAC,AAAAwN,AAAA;;;AAAA,AAAAI,AAAA,AAAA/Q,AAAA0Q;AAAA,AAAAlV,AAAAuV,AAAA,AAAA,AAAOC;AAAP,AAAAxV,AAAAuV,AAAA,AAAA,AAAkBE;AAAlB,AAAA,AAAA3N,AACE,AAAO,AAAC4K,AAAa+C,AAAMvS,AAAEC,AACtB;AAAAyS;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA/W,AAAA+W;AAAA,AAAA9W,AAAA8W,AAAA,AAAanB;AAAb,AAAA3V,AAAA8W,AAAA,AAAmBzB;AAAnB,AACE,AAAO,AAACO,AAAaD,AACd,AAAKoB;AAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqB,AAAA,AAAA,AAA6BN,AAC/B,AAAC7R,AAAQyQ,AACP,AAAA,AAAA,AAA6BoB,AAC/B,AAAA,AAAA,AAAA,AAAC7R,AAAgByQ,AACI,AAAc,AAAAE,AACjC,AAAA,AAAA,AAA6BkB,AAC7B,AAACO,AAAKD,AAAK,AAAA;;;AAXlD,AAAAR,AAAA,AAAAvN,AAAAmN;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAtO,AAAyB,AAAA,AAAA,AAAAmJ,AAAU9R;;;AAavC,AAAA,AAAM+X,AACH9S,AAAEC;AADL,AAEM,AAAC6R,AAA2B9R,AAAEC,AAC9B,AAAO,AAAK8S;AAAL,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACtS,AACUuS,AACgB,AAAA,AAAA,AAAA,AAAA,AAACC,AAAyBC,AAAIH;;;AAGxE,AAAA,AAAKI;AACL,AAAA,AAAKC;AAEL,AAAA,AAAMC,AACHC;AADH,AAGO,AAACC,AACA,AAAKC,AAIN,AAACC;AAJA,AACE,AAAA,AAAQ,AAAC/Q,AAAK8Q;AACZA;;AACA,AAAA,AAAC9H,AAAO8H;;AALbF;;AAQP,AAAA,AAAMI,AACHJ;AADH,AAEE,AAAUK,AAAuBR,AACvB,AAACE,AAAkBC;;AAE/B,AAAA,AAAMM,AACHC;AADH,AAEE,AAAC7G,AAAOjS,AACA,AAAA,AAAC+Y,AAAOD,AACA,AAAKE;AAAL,AACE,AAAA,AAACd,AACK,AAAAvP,AAAA,AAAAsQ;AAAA,AAAA,AAAApQ,AAAA,AAAA;AAAA,AAAA,AAAAoQ,AAAAA;;AAAA,AAAA,AAAAnQ,AAAA,AAAAC,AAAAkQ;AAAA,AAAA,AAAAnQ;AAAA,AAAA,AAAAmQ,AAAAnQ;AAAA,AAAA,AAAA,AAAAE,AAAAiQ;AAAA,AAAAhQ,AAsvDyB,AAAAsa,AAAAtK;AAtvDzB/P,AAAA,AAAAC,AAAAF;AAAAiQ,AAAA,AAAA7P,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAiQ,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAjQ;AAAA,AAAAkQ,AAAA,AAAA7P,AAAAN,AAAAkQ;AAAA,AAAApX,AAAAqX,AAAA,AAAA,AAAOG;AAAP,AAAAxX,AAAAqX,AAAA,AAAA,AAAUI;AAAV,AAAA,AAAA,AAAAhQ,AAAA0P,AAAA,AACGK,AAAG,AAAA,AAACR,AAAOS,AACA;AAAKvF;AAAL,AACE,AAAA,AAACiE,AACK,AAAAvP,AAAA;AAAA8Q;AAAA,AAAA,AAAA5Q,AAAA,AAAA;;AAAA,AAAA,AAAA4Q,AAAAA;;AAAA,AAAA,AAAA3Q,AAAA,AAAAC,AAAA0Q;AAAA,AAAA,AAAA3Q;AAAA,AAAA,AAAA2Q,AAAA3Q;AAAA,AAAA,AAAA,AAAAE,AAAAyQ;AAAA,AAAAxQ,AAkvDG,AAAAsa,AAAA9J;AAlvDHvQ,AAAA,AAAAC,AAAAF;AAAAyQ,AAAA,AAAArQ,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAyQ,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzQ;AAAA,AAAA0Q,AAAA,AAAArQ,AAAAN,AAAA0Q;AAAA,AAAA5X,AAAA6X,AAAA,AAAA,AAAOS;AAAP,AAAAtY,AAAA6X,AAAA,AAAA,AAAUU;AAAV,AAAA,AAAA,AAAA9Q,AAAAkQ,AAAA,AACGW,AAAG,AAACrT,AAAMsT,AAAE,AAACxV,AAAc,AAAA,AAASwV;;AADvC,AAAA,AAAAX,AAAA;;;;AAAA;;;;;AAAA,AAAAlQ,AAAA,AAAAC,AAAAgQ,AAAA,AAAAG,AAAA,AAAAjQ,AAAA6P;;AAAA,AAAAhQ,AAAA,AAAAC,AAAAgQ,AAAA;;;AAAA,AAAAI,AAAA,AAAAvT,AAAAkT;AAAA,AAAA1X,AAAA+X,AAAA,AAAA,AAAOO;AAAP,AAAAtY,AAAA+X,AAAA,AAAA,AAAUQ;AAAV,AAAA,AAAAzQ,AAAA,AAAA,AAAAgQ,AAAA,AAAA/P,AAAA2P,AACGY,AAAG,AAACrT,AAAMsT,AAAE,AAACxV,AAAc,AAAA,AAASwV;;;AADvC;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAA3R,AAAasL;;;;;AAJnC,AAAA,AAAAkF,AAAA;;;;AAAA;;;;;AAAA,AAAA1P,AAAA,AAAAC,AAAAwP,AAAA,AAAAG,AAAA,AAAAzP,AAAAqP;;AAAA,AAAAxP,AAAA,AAAAC,AAAAwP,AAAA;;;AAAA,AAAAI,AAAA,AAAA/S,AAAA0S;AAAA,AAAAlX,AAAAuX,AAAA,AAAA,AAAOC;AAAP,AAAAxX,AAAAuX,AAAA,AAAA,AAAUE;AAAV,AAAA,AAAA3P,AAAA,AACG0P,AAAG,AAAA,AAACR,AAAOS,AACA;AAAKvF;AAAL,AACE,AAAA,AAACiE,AACK,AAAAvP,AAAA,AAAAoR;AAAA,AAAA,AAAAlR,AAAA,AAAA;AAAA,AAAA,AAAAkR,AAAAA;;AAAA,AAAA,AAAAjR,AAAA,AAAAC,AAAAgR;AAAA,AAAA,AAAAjR;AAAA,AAAA,AAAAiR,AAAAjR;AAAA,AAAA,AAAA,AAAAE,AAAA+Q;AAAA,AAAA9Q,AAkvDG,AAAAsa,AAAAxJ;AAlvDH7Q,AAAA,AAAAC,AAAAF;AAAA+Q,AAAA,AAAA3Q,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA+Q,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA/Q;AAAA,AAAAgR,AAAA,AAAA3Q,AAAAN,AAAAgR;AAAA,AAAAlY,AAAAmY,AAAA,AAAA,AAAOG;AAAP,AAAAtY,AAAAmY,AAAA,AAAA,AAAUI;AAAV,AAAA,AAAA,AAAA9Q,AAAAwQ,AAAA,AACGK,AAAG,AAACrT,AAAMsT,AAAE,AAACxV,AAAc,AAAA,AAASwV;;AADvC,AAAA,AAAAL,AAAA;;;;AAAA;;;;;AAAA,AAAAxQ,AAAA,AAAAC,AAAAsQ,AAAA,AAAAG,AAAA,AAAAvQ,AAAAmQ;;AAAA,AAAAtQ,AAAA,AAAAC,AAAAsQ,AAAA;;;AAAA,AAAAI,AAAA,AAAA7T,AAAAwT;AAAA,AAAAhY,AAAAqY,AAAA,AAAA,AAAOC;AAAP,AAAAtY,AAAAqY,AAAA,AAAA,AAAUE;AAAV,AAAA,AAAAzQ,AAAA,AAAA,AAAAsQ,AAAA,AAAArQ,AAAAiQ,AACGM,AAAG,AAACrT,AAAMsT,AAAE,AAACxV,AAAc,AAAA,AAASwV;;;AADvC;;;;AAAA,AAAA;;AAAA,AAAA,AAAA3R,AAAasL;;;AAJnC,AAAAoF,AAAA,AAAAvP,AAAAmP;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAtQ,AAAaqQ;;;;AAOvC,AAAA,AAAMuB;AAAN,AAEE,AAAAzR,AAAoB,AAAA0R,AAAQ5B;AAAR4B,AAAA,AAAA,AAAAA,AAAA,AAAA,AACQ,AAAAA,AAAUpC;AADlB,AAAA,AAAA,AAAAoC,AAAA;AAAA;;AAEQ,AAAAA,AAACC;;;AAF7B,AAAA,AAAA3R;AAAA,AAAA,AAAAA,AAAWgQ;AAAX,AAGE,AAACD,AAAYC;;AAHf;;;AAKF,AAAA,AAAM4B;AAAN,AAEE,AAAA,AAACxG,AAA+B,AAAA,AAAApC,AAACwG,AAAmBtY;;AAItD,AAAA,AAAA2B,AAAAC,AAAA,AAAU+Y,AACP1V,AAAEC;AADL,AAAA,AAAA,AAAA1B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAM6B,AAAKE;AAAL,AACE,AAAAoF,AAAa,AAACvC,AAAM,AAAS,AAAU7C;AAAvC,AAAA,AAAAoF;AAAA,AAAA,AAAAA,AAAWhC;AAAX,AACE,AAAA,AAAA,AAAA,AAACzC,AAAMrE,AAAG6M,AACM,AAAA,AAAA,AAAAiF,AAAkB9R,AAC3B,AAACwU,AAAuB1N;;AAHjC;;AAP/B,AAAA,AAAAtD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAa6B,AAAA,AAAA,AAAA,AAACa,AAAMrE,AAAGsE,AACM,AAAA,AAAA,AAAAwN,AAAkB9R,AAC3B4a;AAfpC,AAAA,AAAApX,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAwBuB,AAAKE;AAAL,AACM,AAACqU,AAA0B9S,AAAEC,AAC7B,AAAO2V;AA1BpC,AAAA,AAAA,AAAArX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AA8BoE,AAACwS,AAAe/Q,AAAEC;AA9BtF,AAAA,AAAA1B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AA+BoE,AAAC8S,AAAcrR,AAAEC;AA/BrF,AAAA,AAAA1B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAqC0E,AAACkX;AArC3E,AAAA,AAAAlX,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA2CuB,AAAKE;AAAL,AACE,AAAAoF,AAAa,AAACvC,AAAM,AAAS,AAAU7C;AAAvC,AAAA,AAAAoF;AAAA,AAAA,AAAAA,AAAWhC;AAAX,AACE,AAAM6P,AAAG,AAAAmE,AAAM,AAAAjE;AAAN,AAAA,AAAAiE,AAAA,AACehU;;AADfgU;;AAAT,AAEE,AAAA,AAAM,AAAanE;AAAnB,AACO,AAACkC,AAAY,AAAC4B,AAAgB,AAAU9D;;;AAJnD;;AA5CzB,AAAA,AAiDG,AAACoE;AAjDJ,AAAA;AAoDA,AAAA,AAAMC,AACHzD,AAAW0D;AADd,AAEM,AAACC,AAASD,AACV,AAAO,AAAKtE,AACZ;AADO,AAAS,AAAOA;AAChB,AAAKwE;AAAL,AACE,AAAA,AAAAC,AAAC/W,AAAMrE;AAAP,AACe,AAAAob,AAAA,AAAA,AAAA,AAAA,AAACvO,AAAkB0K,AACA,AAAC8D,AAAO,AAAC7M,AACD,AAAC8M,AAAI3W,AAAc,AAACxE,AAAQgb,AACvD,AAAA,AAACnX,AAAsBuT;;;;AAErD,AAAA,AAAMgE,AACHC;AADH,AAEE,AAAA,AAAA,AAAA,AAACnX,AAAMrE,AAAGsE,AACM,AAAA,AAAA,AAAAwN,AAAkB9R,AAC3B,AAAKiU;AAAL,AACE,AAACjQ,AAAMiQ,AACA,AAAC9K,AAAM8K,AACP,AAAA,AAAA,AAACjQ,AAAM,AAACc,AACA,AAAA,AAAA,AAAC4H,AAAOxM,AAA0Bsb;;;AAE5D,AAAA,AAAA7Z,AAAAC,AAAA,AAAUka;AAAV,AAAA,AAAA,AAEQC,AAAY,AAACC,AAAK,AAAA,AAAClb,AAAIZ;AAF/Bub,AAG6C,AAAC7Y,AAAc,AAAC2D,AAAMwV;AAHnE,AAAAha,AAAA0Z,AAAA,AAAA,AAGSD;AAHT,AAAAzZ,AAAA0Z,AAAA,AAAA,AAGwBQ;AAHxB,AAAA,AAAAzY,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAQgB;AAAA,AAAO,AAAC+X,AAAWC;AARnC,AAAA,AAAAhY,AAAA,AAAA,AAUcgY,AACG,AAAK9X;AAAL,AAAS,AAAAwY,AAAqB,AAAS,AAAUxY;AAAxC,AAAA,AAAAwY,AAAAA,AAACD,AAAAA,AAAAA;AAX3B,AAAA,AAAAvT,AAAA,AAAAC,AAAA,AAAA+S;AAAA,AAAA,AAAA7S,AAAA,AAAA;AAAA,AAAA,AAAA6S,AAAAA;;AAAA,AAAA,AAAA5S,AAAA,AAAAC,AAAA2S;AAAA,AAAA,AAAA5S;AAAA,AAAA,AAAA4S,AAAA5S;AAAA,AAAA,AAAA,AAAAE,AAAA0S;AAAA,AAAAzS,AAypDmD,AAAAsa,AAAA7H;AAzpDnDxS,AAAA,AAAAC,AAAAF;AAAA0S,AAAA,AAAAtS,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA0S,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA1S;AAAA,AAAA,AAAAK,AAAAN,AAAA2S,AAYYO;AAZZ,AAAA,AAAA,AAAA3S,AAAAmS,AAAA,AAAAnY,AAAA,AAAA,AAAA,AAAA,AAAAqE,AAauBsU,AAAWA,AAAIA;;AAbtC,AAAA,AAAAP,AAAA;;;;AAAA;;;;;AAAA,AAAAnS,AAAA,AAAAC,AAAAiS,AAAA,AAAAE,AAAA,AAAAjS,AAAA8R;;AAAA,AAAAjS,AAAA,AAAAC,AAAAiS,AAAA;;;AAAA,AAAA,AAAApV,AAAAmV,AAYYS;AAZZ,AAAA,AAAAtS,AAAA,AAAArG,AAAA,AAAA,AAAA,AAAA,AAAAqE,AAAA,AAAAgU,AAAA,AAAA/R,AAAA4R,AAauBS,AAAWA,AAAIA;;;AAbtC;;;;AAAA,AAAA;;AAAA,AAAA,AAAAxT,AAYeoT;;AAZf,AAAA;AAgBA,AAAA,AAAApa,AAAAC,AAAA,AAAUgb,AACPC,AAAYhI;AADf,AAAA,AAAA,AAAArR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAkF,AAAA,AAAAC,AAAA,AAAAyT,AAGG,AAACN;AAHJ,AAAA,AAAAjT,AAAA,AAAA;AAAA,AAAA,AAAAuT,AAAAA;;AAAA,AAAA,AAAAtT,AAAA,AAAAC,AAAAqT;AAAA,AAAA,AAAAtT;AAAA,AAAA,AAAAsT,AAAAtT;AAAA,AAAA,AAAA,AAAAE,AAAAoT;AAAA,AAAAnT,AAyoDmD,AAAAsa,AAAAnH;AAzoDnDlT,AAAA,AAAAC,AAAAF;AAAAoT,AAAA,AAAAhT,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAoT,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAApT;AAAA,AAAAqT,AAAA,AAAAhT,AAAAN,AAAAqT;AAAA,AAAAva,AAAAwa,AAAA,AAAA,AAKW1X;AALX2X,AAAA,AAAAza,AAAAwa,AAAA,AAAA;AAAAC,AAAA,AAAA3b,AAAA2b;AAAAA,AAKmC/a;AALnC,AAAAX,AAAA0b,AAAA,AAKqB7G;AALrB,AAAA,AAMgB,AAAClS,AAAIkS;AANrB,AAAA,AAAAnM,AAAA6S,AAOM,AAAC9I,AAAa,AAACG,AAAgB,AAAA,AAAA,AAAA,AAACoJ,AAAc9c,AAAY6c,AAAoBhY,AAAIA,AAChFA;;AARR,AAAA,AAAAyX,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAA7S,AAAA,AAAAC,AAAA2S,AAAA,AAAAI,AAAA,AAAA7S,AAAAwS;;AAAA,AAAA3S,AAAA,AAAAC,AAAA2S,AAAA;;;AAAA,AAAAK,AAAA,AAAAnW,AAAA6V;AAAA,AAAAra,AAAA2a,AAAA,AAAA,AAKW7X;AALX8X,AAAA,AAAA5a,AAAA2a,AAAA,AAAA;AAAAC,AAAA,AAAA9b,AAAA8b;AAAAA,AAKmClb;AALnC,AAAAX,AAAA6b,AAAA,AAKqBhH;AALrB,AAAA,AAMgB,AAAClS,AAAIkS;AANrB,AAAA9L,AAAA,AAAA4S,AAAA,AAAA3S,AAAAsS,AAOM,AAAC7I,AAAa,AAACG,AAAgB,AAAA,AAAA,AAAA,AAACoJ,AAAc9c,AAAY6c,AAAoBhY,AAAIA,AAChFA;;AARR,AAAA,AAAAiF,AAAAsS;;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAzT,AAKuCkM;;AALvC,AAAA;AAaA,AAAA,AAAMkI,AACHC;AADH,AAEE,AAACzW,AACA,AAAC0W,AAAO,AAAAna,AAAI,AAAAoa,AAAA,AAAApL,AAAU9R;AAAVkd,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAA,AAAA;AAAA;;AAAqB,AAAAA,AAACC,AAAK1Z;;;AAA/B,AAAA,AAAAX;AAAAA;;AAAA;AAAA,AACK,AAAA;;;AACL,AAACwY,AAAI8B,AACA,AAACC,AAAOL,AACR,AAAA,AAACnT,AACK,AAAAlB,AAAA,AAAA2U;AAAA,AAAA,AAAAzU,AAAA,AAAA;AAAA,AAAA,AAAAyU,AAAAA;;AAAA,AAAA,AAAAxU,AAAA,AAAAC,AAAAuU;AAAA,AAAA,AAAAxU;AAAA,AAAA,AAAAwU,AAAAxU;AAAA,AAAA,AAAA,AAAAE,AAAAsU;AAAA,AAAArU,AAonD6B,AAAAsa,AAAAjG;AApnD7BpU,AAAA,AAAAC,AAAAF;AAAAsU,AAAA,AAAAlU,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAsU,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAtU;AAAA,AAAA,AAAAK,AAAAN,AAAAuU,AAAM3Y;AAAN,AAAA,AAAA,AAAA2E,AAAA+T,AACE,AAAA,AAAA,AAAU,AAAA,AAAK1Y;;AADjB,AAAA,AAAA2Y,AAAA;;;;AAAA;;;;;AAAA,AAAA/T,AAAA,AAAAC,AAAA6T,AAAA,AAAAE,AAAA,AAAA7T,AAAA0T;;AAAA,AAAA7T,AAAA,AAAAC,AAAA6T,AAAA;;;AAAA,AAAA,AAAAhX,AAAA+W,AAAMzY;AAAN,AAAA,AAAAgF,AAAA,AAAA4T,AAAA,AAAA3T,AAAAwT,AACE,AAAA,AAAA,AAAU,AAAA,AAAKzY;;;AADjB;;;;AAAA,AAAA;;AAAA,AAAA,AAAA8D,AAAQ,AAAC6F;;;AAG/B,AAAA,AAAA7M,AAAAC,AAAA,AAAU+b,AACPC,AAAI5E;AADP,AAAA,AAAA,AAAA0E,AAEqC,AAAA,AAAC9a;AAFtC,AAAAb,AAAA2b,AAAA,AAAA,AAESnG;AAFT,AAAAxV,AAAA2b,AAAA,AAAA,AAEoBG;AAFpB,AAAA,AAAAra,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAOgB;AAAA,AACE,AAAMsa,AAAM,AAACf,AAAsBxF;AAAnC,AACC,AAAA,AAAAwG,AAAC1Z,AAAMrE;AAAP,AAEY,AAAA+d,AAAA,AAAChF,AAAevU,AAAMsZ,AAAM,AAAChd,AAAIkY,AAAG4E,AACpC,AAAA,AAAC5Z,AAAsB8Z;;AAZtD,AAAA,AAAA,AAAAta,AAAA,AAAA,AAAA,AAcqB+T,AACG,AAAS7T;AAAT,AACE,AAAAsa,AAAiB,AAAS,AAAUta;AAApC,AAAA,AAAAsa,AAAAA,AAACH,AAAAA,AAAAA;AAhB3B;AAAA,AAAA;AAmBA,AAAA,AAAMI,AACHC,AAAGC,AAASC;AADf,AAEE,AAAAC,AAAQH;AAARG,AAAA,AACO,AAAAA,AAAA,AAACtF,AAAe6B,AAAOuD;;AAD9BE,AAAA,AAEO,AAAAA,AAAA,AAACtF,AAAevU,AAAM4Z,AAAS,AAACtd,AAAI,AAAA,AAASod,AAAIC;;AAFxD,AAAA,AAIE,AAACrO,AAAEqO,AAAS,AAAA,AAAiBD;AAC7B,AAAAG,AAAA,AAACra,AAAsBoa;;AALzBC;;;AAOF,AAAA,AAAA1c,AAAAC,AAAA,AAAU4c,AACPxF,AAAGmF;AADN,AAAA,AAAA,AAAAG,AAEiC,AAAC1b,AAAcub;AAFhD,AAAApc,AAAAuc,AAAA,AAAA,AAESF;AAFT,AAAArc,AAAAuc,AAAA,AAAA,AAEkBG;AAFlBF,AAGiC,AAAA,AAAC3b;AAHlC,AAAAb,AAAAwc,AAAA,AAAA,AAGSG;AAHT,AAAA3c,AAAAwc,AAAA,AAAA,AAGkBI;AACVC,AAAO,AAACC,AAAU7F,AAAGoF;AAJ7B,AAAA,AAKQM;AALR,AAAAlb,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AASkB,AAAA,AAAA,AAACmb,AAAAA,AAAAA;AATnB,AAAA;;AAAA,AAAAnb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAauB,AAAAV,AAAIsb;AAAJ,AAAA,AAAAtb;AAAAA;;AAAA;;AAbvB,AAe0B,AAASY;AAAT,AACE,AAAAob,AAAe,AAAS,AAAUpb;AAAlC,AAAA,AAAAob,AAAAA,AAACL,AAAAA,AAAAA;AAhB7B,AAAA,AAAAjb,AAAA,AAAA,AAAA,AAAA,AAmB0Bob,AACD,AAAKlb;AAAL,AACE,AAAA,AAAA,AAACib,AAAAA,AAAAA;;AACD,AAACta,AAAMrE,AAAGie,AAAgBE,AAASC;AAtB9D,AAAA,AAAA5a,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAyB0B,AAAA,AAAA,AAACmb,AAAAA,AAAAA;AAzB3B;;AAAA,AAAA;AA2BA,AAAA,AAAAI,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAAne,AAAAme;AAAAA,AACsCd;AADtC,AAAApd,AAAAke,AAAA,AACWE;AADX,AAAApe,AAAAke,AAAA,AACkBG;AADlB,AAEE,AAAA,AAACC,AAA+BD,AAAe,AAACnD,AAAKkD;;AACrD,AACE,AAACL,AAAUK,AAAOC;AAAgBjB;;AADpC,AAEE,AAACmB,AAAOH;AAA0BhB;;AAFpC,AAGoC,AAAA,AAACla,AAAMka,AAAmB,AAACoB,AAAOJ;;;;;AAExE,AAAA,AAAMK,AACHrB,AAAG3G;AADN,AAEM2G,AACA,AAAA,AAACnF,AAAe6B,AAAOrD,AACvB,AAAC0H;;AAEP,AAAA,AAAAtd,AAAAC,AAAA,AAAU6d,AACPzG,AAAGzB;AADN,AAAA,AAAA,AAAAiI,AAEiC,AAAA,AAAC5c;AAFlC,AAAAb,AAAAyd,AAAA,AAAA,AAESd;AAFT,AAAA3c,AAAAyd,AAAA,AAAA,AAEkBb;AAFlB,AAAA,AAGQD;AAHR,AAAAlb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAQkB,AAAA,AAAA,AAACmb,AAAAA,AAAAA;AARnB,AAAA;;AAAA,AAAAnb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAckB,AAAKE;AAAL,AACE,AAAA,AAAA,AAACib,AAAAA,AAAAA;;AACD,AAACta,AAAMrE,AAAGuf,AAAgBhI;AAhB9C,AAAA,AAAA,AAAA/T,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAmB0B,AAAA,AAAA,AAACmb,AAAAA,AAAAA;AAnB3B;;AAAA,AAAA;AAqBA,AAAA,AAAAhd,AAAAC,AAAA,AAAUue,AACPvC,AAAI5E;AADP,AAAA,AAAA,AAAAxV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkF,AAAA,AAAAC,AAAA,AAAA+W,AAGS,AAAC9N,AAAUoH;AAHpB,AAAA,AAAAnQ,AAAA,AAAA;AAAA,AAAA,AAAA6W,AAAAA;;AAAA,AAAA,AAAA5W,AAAA,AAAAC,AAAA2W;AAAA,AAAA,AAAA5W;AAAA,AAAA,AAAA4E,AAAA5E;AAAA,AAAA,AAAA6W,AAAA,AAAApZ,AAAAmH;AAAA,AAAA3L,AAAA4d,AAAA,AAAA,AAKapI;AALb,AAAAxV,AAAA4d,AAAA,AAAA,AAKwBnI;AALxB,AAAA,AAAA7J,AAAA;AAAAiS;AAAA,AAAA,AAAA/W,AAAA,AAAA;;AAAA,AAAA,AAAA+W,AAAAA;;AAAA,AAAA,AAAA9W,AAAA,AAAAC,AAAA6W;AAAA,AAAA,AAAA9W;AAAA,AAAA,AAAA8W,AAAA9W;AAAA,AAAA,AAAA,AAAAE,AAAA4W;AAAA,AAAA3W,AAuhDmD,AAAAsa,AAAA3D;AAvhDnD1W,AAAA,AAAAC,AAAAF;AAAA4W,AAAA,AAAAxW,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA4W,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA5W;AAAA,AAAA,AAAAK,AAAAN,AAAA6W,AAMY1a;AANZ,AAAA,AAAA,AAAAoE,AAAAqW,AAAA,AAAAE,AAOc3a;AAPd2a,AAAA,AAAA,AAAAA,AAAA/R,AAAA,AAAA+R,AAAA;AAAA,AAAA,AAAAA;AAAA;AAQkB,AAACxM,AAAa,AAACiL,AAAcxF,AAAGzB,AAAY,AAAKnS,AAAEmS;;;AARrE;AASkB,AAAChE,AAAa,AAACkM,AAAczG,AAAGzB,AAAY,AAAKnS,AAAEmS;;;AATrE;AAAA,AAAA/T,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAU8B,AAAK4B,AAAEmS,AACZ,AAACzH,AAAEyH,AAAWqG;;;AAXvC;AAAA,AAAApa,AAAA,AAAA,AAAA,AAAA,AAYgC,AAAK4B,AAAEmS,AAELA,AACG,AAACzH,AAAE8N,AAAIrG;;AAf5C,AAgBqC,AAAA,AAAClT,AAAMrE,AAAGwE,AAAsB+S;;AAhBrE;;;;AAAA,AAAA,AAAA3S,AAAA,AAAA,AAAAmb;;;;;AAAA,AAAA,AAAAD,AAAA;;;;AAAA;;;;;AAAA,AAAArW,AAAA,AAAAC,AAAAmW,AAAA,AAAAG,AAAA,AAAApW,AAAAgW;;AAAA,AAAAnW,AAAA,AAAAC,AAAAmW,AAAA;;;AAAA,AAAA,AAAAtZ,AAAAqZ,AAMYxa;AANZ,AAAA,AAAAyE,AAAA,AAAAoW,AAOc7a;AAPd6a,AAAA,AAAA,AAAAA,AAAAjS,AAAA,AAAAiS,AAAA;AAAA,AAAA,AAAAA;AAAA;AAQkB,AAAC1M,AAAa,AAACiL,AAAcxF,AAAGzB,AAAY,AAAKnS,AAAEmS;;;AARrE;AASkB,AAAChE,AAAa,AAACkM,AAAczG,AAAGzB,AAAY,AAAKnS,AAAEmS;;;AATrE;AAAA,AAAA/T,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAU8B,AAAK4B,AAAEmS,AACZ,AAACzH,AAAEyH,AAAWqG;;;AAXvC;AAAA,AAAApa,AAAA,AAAA,AAAA,AAAA,AAYgC,AAAK4B,AAAEmS,AAELA,AACG,AAACzH,AAAE8N,AAAIrG;;AAf5C,AAgBqC,AAAA,AAAClT,AAAMrE,AAAGwE,AAAsB+S;;AAhBrE;;;;AAAA,AAAA,AAAA3S,AAAA,AAAA,AAAAqb;;;AAAA,AAAAD,AAAA,AAAAlW,AAAA8V;;;AAAA;;;;;AAAA,AAAA;;;AAAAzR,AAAA,AAAApF,AAAA,AAAA4E,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAQ;AAAA,AAAAC,AAAAD,AAAA,AAAA+R,AAAA,AAAApW,AAAA4V;;AAAA,AAAA,AAAA5V,AAAA4V;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAA/W,AAK+B,AAACyX,AAAQ7Z,AAAMyS;AAL9C,AAkBG,AAAC2E,AAAoBC,AAAI5E;AAlB5B,AAAA;AAoBA,AAAA,AAAArX,AAAAC,AAAA,AAAUif,AACPpf,AAAEqf,AAAGC;AADR,AAAA,AAAA,AAEQ,AAAAzf,AAAKG;AAAL,AAAA,AAAAH;AAAA,AAAAA,AAAOwf;AAAP,AAAA,AAAAxf;AAAUyf;;AAAVzf;;;AAAAA;;;AAFR,AAAA,AAAAkC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkF,AAAA,AAAAC,AAAA,AAAA0X,AAGiBS,AACCC,AACC,AAAA,AAAA,AAAYD,AAAOC,AAMb,AAAA,AAAKD,AACJ,AAAA,AAAKC;AAZ/B,AAAA,AAAAlY,AAAA,AAAA;AAAA,AAAA,AAAAwX,AAAAA;;AAAA,AAAA,AAAAvX,AAAA,AAAAC,AAAAsX;AAAA,AAAA,AAAAvX;AAAA,AAAA,AAAAuX,AAAAvX;AAAA,AAAA,AAAA,AAAAE,AAAAqX;AAAA,AAAApX,AAmgDmD,AAAAsa,AAAAlD;AAngDnDnX,AAAA,AAAAC,AAAAF;AAAAqX,AAAA,AAAAjX,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAqX,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAArX;AAAA,AAAA,AAAAK,AAAAN,AAAAsX,AAgBW1b;AAhBX,AAAA,AAAA,AAAA2E,AAAA8W,AAAA,AAAA9c,AAAA,AAAA,AAAA,AAAA,AAiBoBqB,AACD,AAAGA,AAAE,AAAGic,AAAGrf,AACX,AAAGoD,AAAE,AAAGic,AAAGrf,AAAQsf;;AAnBtC,AAAA,AAAAR,AAAA;;;;AAAA;;;;;AAAA,AAAA9W,AAAA,AAAAC,AAAA4W,AAAA,AAAAE,AAAA,AAAA5W,AAAAyW;;AAAA,AAAA5W,AAAA,AAAAC,AAAA4W,AAAA;;;AAAA,AAAA,AAAA/Z,AAAA8Z,AAgBWxb;AAhBX,AAAA,AAAAgF,AAAA,AAAArG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAgd,AAAA,AAAA1W,AAAAuW,AAiBoBxb,AACD,AAAGA,AAAE,AAAGic,AAAGrf,AACX,AAAGoD,AAAE,AAAGic,AAAGrf,AAAQsf;;;AAnBtC;;;;AAAA,AAAA;;AAAA,AAAA,AAAApY,AAgBa,AAAA,AAAC6F,AAAQ/M;AAhBtB,AAAAiH,AAAA,AAAAC,AAAA,AAAA8X;AAAA,AAAA,AAAA5X,AAAA,AAAA;AAAA,AAAA,AAAA4X,AAAAA;;AAAA,AAAA,AAAA3X,AAAA,AAAAC,AAAA0X;AAAA,AAAA,AAAA3X;AAAA,AAAA,AAAA2X,AAAA3X;AAAA,AAAA,AAAA,AAAAE,AAAAyX;AAAA,AAAAxX,AAmgDmD,AAAAsa,AAAA9C;AAngDnDvX,AAAA,AAAAC,AAAAF;AAAAyX,AAAA,AAAArX,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAyX,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzX;AAAA,AAAA,AAAAK,AAAAN,AAAA0X,AAoBW9b;AApBX,AAAA,AAAA,AAAA2E,AAAAkX,AAAA,AAAAld,AAAA,AAAA,AAAA,AAAA,AAqBoBqB,AACK,AAAGA,AAAE,AAAGkc,AAAGtf,AACjBqf,AAAO,AAAGjc,AAAE,AAAGkc,AAAGtf;;AAvBrC,AAAA,AAAAkf,AAAA;;;;AAAA;;;;;AAAA,AAAAlX,AAAA,AAAAC,AAAAgX,AAAA,AAAAE,AAAA,AAAAhX,AAAA6W;;AAAA,AAAAhX,AAAA,AAAAC,AAAAgX,AAAA;;;AAAA,AAAA,AAAAna,AAAAka,AAoBW5b;AApBX,AAAA,AAAAgF,AAAA,AAAArG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAod,AAAA,AAAA9W,AAAA2W,AAqBoB5b,AACK,AAAGA,AAAE,AAAGkc,AAAGtf,AACjBqf,AAAO,AAAGjc,AAAE,AAAGkc,AAAGtf;;;AAvBrC;;;;AAAA,AAAA;;AAAA,AAAA,AAAAkH,AAoBa,AAAA,AAAC6F,AAAQ/M;;;AApBtB;;AAAA,AAAA;AAyBA,AAAA,AAAAE,AAAAC,AAAA,AAAU0gB;AAAV,AAAA,AAAA,AAGQjgB,AAAK,AAACC;AACN2C,AAAExE;AACFyE,AAAExE;AALVsgB,AAOmD,AAAC7Y,AAAUnI;AAP9DghB,AAAA,AAAAngB,AAAAmgB;AAAA,AAAAlgB,AAAAkgB,AAAA,AAOgB9B;AAPhB,AAAApe,AAAAkgB,AAAA,AAOuB7B;AAPvB,AAAAre,AAAAkgB,AAAA,AAOsCuB;AAPtCtB,AAQ0C,AAACngB,AAAIoe,AAAOC;AARtD8B,AAAA,AAAApgB,AAAAogB;AAAA,AAAAngB,AAAAmgB,AAAA,AAQgBpM;AARhB,AAAA/T,AAAAmgB,AAAA,AAQuBnM;AARvB,AAAA,AAAAtR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkF,AAAA,AAAAC,AAAA,AAAAuY;AAAA,AAAA,AAAArY,AAAA,AAAA;AAAA,AAAA,AAAAqY,AAAAA;;AAAA,AAAA,AAAApY,AAAA,AAAAC,AAAAmY;AAAA,AAAA,AAAApY;AAAA,AAAA,AAAAoY,AAAApY;AAAA,AAAA,AAAA,AAAAE,AAAAkY;AAAA,AAAAjY,AA0+CmD,AAAAsa,AAAArC;AA1+CnDhY,AAAA,AAAAC,AAAAF;AAAAkY,AAAA,AAAA9X,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAkY,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAlY;AAAA,AAAAmY,AAAA,AAAA9X,AAAAN,AAAAmY;AAAA,AAAArf,AAAAsf,AAAA,AAAA,AAsBcmB;AAtBdlB,AAAA,AAAAvf,AAAAsf,AAAA,AAAA;AAAAC,AAAA,AAAAzgB,AAAAygB;AAAA,AAAAxgB,AAAAwgB,AAAA,AAsB2BmB;AAtB3B,AAAA,AAAA,AAAAjZ,AAAA2X,AAAA,AAAA3d,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAuBqB,AAAKgf,AACeA;;AAxBzC,AAwByD,AAACxH,AAAawH,AAAKC;;AAxB5E;;AAAA,AAAA,AAAArB,AAAA;;;;AAAA;;;;;AAAA,AAAA3X,AAAA,AAAAC,AAAAyX,AAAA,AAAAI,AAAA,AAAA3X,AAAAsX;;AAAA,AAAAzX,AAAA,AAAAC,AAAAyX,AAAA;;;AAAA,AAAAK,AAAA,AAAAjb,AAAA2a;AAAA,AAAAnf,AAAAyf,AAAA,AAAA,AAsBcgB;AAtBdf,AAAA,AAAA1f,AAAAyf,AAAA,AAAA;AAAAC,AAAA,AAAA5gB,AAAA4gB;AAAA,AAAA3gB,AAAA2gB,AAAA,AAsB2BgB;AAtB3B,AAAA,AAAA5Y,AAAA,AAAArG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAuBqB,AAAKgf,AACeA;;AAxBzC,AAwByD,AAACxH,AAAawH,AAAKC;;AAxB5E,AAAA,AAAAlB,AAAA,AAAAzX,AAAAoX;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAvY,AAsBmC,AAAA,AAAC7H,AAAIZ;AAtBxC,AAAAsD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAoE,AA2BM,AAACuY,AAAYhB,AAAeD,AAG5B,AAACvE,AAAa1V,AAAEC,AAGP,AAAAwd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgB,AAAA,AAAK,AAAA,AAAGzd,AAAE5E,AAAWC,AACpB,AAAA,AAAK,AAAA,AAAG4E,AAAE7E,AAAWC;AADtC,AAAA,AAGEwU;AAAiB,AAAA4N,AAAA,AAAA,AAAA,AAAC1e,AAAwB,AAAA,AAAA,AAAY8Q;;AAHxD4N;;AAjCf,AAAA,AAAA,AAAAha,AAAA,AAAAC,AAAA,AAAA+Y;AAAA,AAAA,AAAA7Y,AAAA,AAAA;AAAA,AAAA,AAAA6Y,AAAAA;;AAAA,AAAA,AAAA5Y,AAAA,AAAAC,AAAA2Y;AAAA,AAAA,AAAA5Y;AAAA,AAAA,AAAA4Y,AAAA5Y;AAAA,AAAA,AAAA,AAAAE,AAAA0Y;AAAA,AAAAzY,AA0+CmD,AAAAsa,AAAA7B;AA1+CnDxY,AAAA,AAAAC,AAAAF;AAAA0Y,AAAA,AAAAtY,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA0Y,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA1Y;AAAA,AAAA2Y,AAAA,AAAAtY,AAAAN,AAAA2Y;AAAA,AAAA7f,AAAA8f,AAAA,AAAA,AAsCchd;AAtCd,AAAA9C,AAAA8f,AAAA,AAAA,AAsCgBpgB;AAtChB,AAAA,AAuCmB,AAAAH,AAAK,AAAA,AAASG;AAAd,AAAA,AAAAH;AAAiB,AAACmC,AAAI,AAAAX,AAAI,AAAA,AAASrB;AAAb,AAAA,AAAAqB;AAAAA;;AAAgB,AAAA,AAAUrB;;;;AAAhDH;;;AAvCnB,AAAAwgB,AAwC6B,AAAC/gB,AAAY,AAAA,AAASU;AAxCnD,AAAAM,AAAA+f,AAAA,AAAA,AAwCoBvf;AAxCpB,AAAAR,AAAA+f,AAAA,AAAA,AAwCsBtf;AAxCtB,AAAAT,AAAA+f,AAAA,AAAA,AAwCwB7c;AAxCxB,AAAAlD,AAAA+f,AAAA,AAAA,AAwC0B5c;AAxC1B,AAAA,AAAA,AAAAsE,AAAAmY,AAyCc9c,AACA,AAAC0O,AAAa,AAAA,AAAA,AAAA,AAACvR,AACA,AAAA,AAASP,AACT,AAAA,AAAGc,AAAElC,AAAWC,AAChB,AAAA,AAAGkC,AAAEnC,AAAWC,AACP6e,AAAuBta;;AA9C7D,AAAA,AAAA+c,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAAnY,AAAA,AAAAC,AAAAiY,AAAA,AAAAI,AAAA,AAAAnY,AAAA8X;;AAAA,AAAAjY,AAAA,AAAAC,AAAAiY,AAAA;;;AAAA,AAAAK,AAAA,AAAAzb,AAAAmb;AAAA,AAAA3f,AAAAigB,AAAA,AAAA,AAsCcnd;AAtCd,AAAA9C,AAAAigB,AAAA,AAAA,AAsCgBvgB;AAtChB,AAAA,AAuCmB,AAAAH,AAAK,AAAA,AAASG;AAAd,AAAA,AAAAH;AAAiB,AAACmC,AAAI,AAAAX,AAAI,AAAA,AAASrB;AAAb,AAAA,AAAAqB;AAAAA;;AAAgB,AAAA,AAAUrB;;;;AAAhDH;;;AAvCnB,AAAA2gB,AAwC6B,AAAClhB,AAAY,AAAA,AAASU;AAxCnD,AAAAM,AAAAkgB,AAAA,AAAA,AAwCoB1f;AAxCpB,AAAAR,AAAAkgB,AAAA,AAAA,AAwCsBzf;AAxCtB,AAAAT,AAAAkgB,AAAA,AAAA,AAwCwBhd;AAxCxB,AAAAlD,AAAAkgB,AAAA,AAAA,AAwC0B/c;AAxC1B,AAAA,AAAA2E,AAAA,AAAAkY,AAAA,AAAAjY,AAAA4X,AAyCc7c,AACA,AAAC0O,AAAa,AAAA,AAAA,AAAA,AAACvR,AACA,AAAA,AAASP,AACT,AAAA,AAAGc,AAAElC,AAAWC,AAChB,AAAA,AAAGkC,AAAEnC,AAAWC,AACP6e,AAAuBta;;AA9C7D,AAAA,AAAAiF,AAAA4X;;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAA/Y,AAsCmBkM;AAtCnB,AAAA,AAAA,AAAA,AAAArR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAgDa+e,AACJ,AAAC1B,AAAe0B,AACA,AAAA,AAAGtd,AAAE5E,AAAWC,AAChB,AAAA,AAAG4E,AAAE7E,AAAWC,AAIjB,AAAAwC,AAAIyf;AAAJ,AAAA,AAAAzf;AAAAA;;AAAA;;AAvDxB,AAAA,AAyD2B,AAAKY;AAAL,AACE,AAAMif,AAAE,AAAS,AAAUjf;AAA3B,AACE,AAAA,AAACW,AAAMrE,AAAGwE,AACH,AAAAoe,AAAMD;AAAN,AAAA,AAAAC;AAAA;AAAA;;;;AAEED;;;;AA9DxC,AAAA,AAAAnf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkF,AAAA,AAAAC,AAAA,AAAAuZ;AAAA,AAAA,AAAArZ,AAAA,AAAA;AAAA,AAAA,AAAAqZ,AAAAA;;AAAA,AAAA,AAAApZ,AAAA,AAAAC,AAAAmZ;AAAA,AAAA,AAAApZ;AAAA,AAAA,AAAAoZ,AAAApZ;AAAA,AAAA,AAAA,AAAAE,AAAAkZ;AAAA,AAAAjZ,AA0+CmD,AAAAsa,AAAArB;AA1+CnDhZ,AAAA,AAAAC,AAAAF;AAAAkZ,AAAA,AAAA9Y,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAkZ,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAlZ;AAAA,AAAA,AAAAK,AAAAN,AAAAmZ,AAgEcvd;AAhEd,AAAA,AAAA,AAAA2E,AAAA2Y,AAAA,AAAA3e,AAAA,AAAA,AAAA,AAiEyBqB,AAAS,AAAKA,AAAI,AAAKA;;AAjEhD,AAAA,AAAAud,AAAA;;;;AAAA;;;;;AAAA,AAAA3Y,AAAA,AAAAC,AAAAyY,AAAA,AAAAE,AAAA,AAAAzY,AAAAsY;;AAAA,AAAAzY,AAAA,AAAAC,AAAAyY,AAAA;;;AAAA,AAAA,AAAA5b,AAAA2b,AAgEcrd;AAhEd,AAAA,AAAAgF,AAAA,AAAArG,AAAA,AAAA,AAAA,AAAA,AAAA6e,AAAA,AAAAvY,AAAAoY,AAiEyBrd,AAAS,AAAKA,AAAI,AAAKA;;;AAjEhD;;;;AAAA,AAAA;;AAAA,AAAA,AAAA8D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAmEK,AAACiU,AAAWuC,AAAetK;AAnEhC,AAAA,AACI9M;AAoEJ,AAAA,AAAwB8a;AAAxB,AAEE,AAACC,AAAa9iB,AAAGqY;;AAEnB,AAAA,AAAuB0K;AAAvB,AAEE,AAAMC,AAAG,AAAA,AAAiBC;AAA1B,AAEE,AAACC,AAAUljB,AAAGqY,AACC,AAAKpD,AAAEA,AAAEA,AAAEkO,AAEX,AAACC;AAFD,AACE,AAACzK,AAAsBwK;AACzB;;AAEf,AAACE,AAAU,AAACf,AAAMU;;AAEd,AAGA,AAACM;AAHD,AACE,AAAAxgB,AAAI,AAACyX;AAAL,AAAA,AAAAzX;AAAAA;;AACI,AAAA,AAAA,AAACkY;;AACP","names":["gauge/static-input-data","js/gauge","js/gauge.db","gauge/db","cljs.core.atom","gauge/config-json","cljs.core.js__GT_clj","js/JSON.parse","gauge/draw-scale","gauge/disp-scale","js/window.innerWidth","js/window.innerHeight","gauge/screen-width","gauge/screen-height","p__45586","map__45587","cljs.core/--destructure-map","cljs.core.get","gauge/shape->bbox","radius","x0","y0","width","height","sh","and__4149__auto__","halfw","halfh","d","js/console.error","rum.core/lazy-build","rum.core/build-defc","vec__45588","map__45591","cljs.core.nth","gauge/bitmap-canvas-drag","bmap","ix","iy","k","cref","rum.core/create-ref","x","y","mousedown","drag-state","set-drag-state!","rum.core/use-state","pos-top","or__4160__auto__","pos-left","scaled-x","js/Math.round","scaled-y","rum.core.use_effect_BANG_","cvs","rum.core/deref","ctx","js/React","daiquiri.core/create-element","cljs.core/not","ev","ox","oy","cx","cy","G__45595","cljs.core.assoc","dx","dy","G__45596","G__45597","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/update","cljs.core/assoc","var_args","G__45599","gauge/render-gauge*","js/Error","i","gauge.render_gauge_STAR_","scl","vec__45600","w","h","bbox","c","G__45603","js/document.createElement","G__45604","e45605","js/renderGauge","cljs.core/clj->js","ex","js/console.log","gauge/static-bitmap-canvas","G__45612","gauge/update-gauge*","args-arr__4792__auto__","len__4771__auto__","i__4772__auto__","argseq__4793__auto__","cljs.core/IndexedSeq","seq45607","G__45608","cljs.core/first","cljs.core/next","G__45609","G__45610","G__45611","self__4758__auto__","a","f","av","cljs.core.merge","G__45613","v","G__45614","G__45615","G__45616","more","cljs.core.apply","cljs.core.list_STAR_","map__45617","attrs45618","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.interpreter/interpret","gauge/gaugeparam-slider","rum.core/reactive","da","props","params","rum.core/react","gauge.update_gauge_STAR_","js/parseFloat","map__45619","gauge/gaugeparam-text","gauge/font-size-options","map__45620","cljs.core.into_array","iter__4564__auto__","s__45622","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4562__auto__","size__4563__auto__","cljs.core/count","b__45624","cljs.core/chunk-buffer","i__45623","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45621","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","gauge/gaugeparam-fontsize","fs","p__45625","map__45626","map__45627","s__45629","b__45631","i__45630","map__45632","iter__45628","map__45633","gauge/gaugeparam-select","options","def","o","value","label","p__45634","map__45635","vec__45636","map__45639","gauge/float-input","on-change","decimal-places","text","valid","st","set-st!","fx","nv","js/isNaN","js/Math.abs","js/Math.pow","G__45640","clojure.string/replace","n","v?","G__45641","p__45643","map__45644","map__45645","gauge/gaugeparam-plusminus","opts","cljs.core.get_in","cljs.core/dec","p1__45642#","cljs.core/assoc-in","cljs.core/inc","p__45647","map__45648","map__45649","gauge/gaugeparam-plusminus-fixed","p1__45646#","map__45650","gauge/gaugeparam-color","clojure.string/starts-with?","map__45651","map__45652","s__45654","xs__6360__auto__","iterys__4560__auto__","s__45656","b__45658","i__45657","G__45659","cljs.core/Keyword","iter__45655","G__45660","fs__4561__auto__","cljs.core.concat","iter__45653","gauge/edit-spectrum","spectrum","cljs.core.range","t","color","cljs.core/vec","cljs.core.take","cljs.core.drop","cljs.core/conj","map__45661","s__45663","map__45668","s__45665","b__45667","i__45666","G__45669","map__45670","iter__45664","G__45671","map__45672","iter__45662","gauge/edit-colorvals","val","minv","cljs.core._EQ_","maxv","max","min","majdivs","subdivs","step","map__45675","map__45676","gauge/spectrum-or-colorvals","colorvals","kq","p1__45673#","cljs.core.dissoc","G__45682","s__45684","b__45686","i__45685","iter__45683","cljs.core/reverse","p1__45674#","js/returnColorVals","rum.core/build-defcs","p__45687","map__45688","map__45689","map__45690","gauge/edit-multitext","rum.core.local","cls","cljs.core/not-empty","G__45692","cljs.core/deref","clojure.string.join","G__45693","cljs.core/reset!","clojure.string.split","map__45694","gauge/textbox-mode-switcher","gauge/gauge-editor-map","js/setupWidgets","gauge/type->fields","fs?","cljs.core.ex_info","p__45695","map__45696","gauge/gauge-field","key","type","G__45698","map__45699","gauge/generic-gauge","ty","s__45705","b__45707","i__45706","iter__45704","rum.core/with-key","map__45716","G__45717","gauge/onegauge-editor","real-min","x__4252__auto__","y__4253__auto__","real-max","x__4249__auto__","y__4250__auto__","gs","gauge/ask-download-file","path","contents","b","js/Blob","u","js/URL.createObjectURL","gauge/render-panel","pdb","map__45718","G__45719","gauges","background-image","bg","G__45720","_","+calc","s__45722","b__45724","i__45723","vec__45725","map__45728","iter__45721","vec__45729","map__45732","deleted","js/Promise","resolve","reject","G__45733","gauge/download-json!","p__45734","map__45735","data","js/JSON.stringify","js/Date","gauge/download-png!","p__45736","map__45737","image","gauge/blob->base64","fr","G__45738","js/FileReader","G__45739","gauge/make-dynamic-repo-request*","js/Promise.all","s__45741","b__45743","i__45742","vec__45744","iter__45740","vec__45749","panel-name","panel","p__45747","map__45748","p__45752","map__45753","base","cljs.core.subs","gauge/make-dynamic-repo-request","filesets","js/window.location.origin","cljs.core.into","cljs.core/cat","gauge/localstorage-db-key","gauge/save-watch-key","gauge/encode-edn-string","dbval","clojure.walk/prewalk","j","cljs.core.pr_str","gauge/save-to-localstorage!","js/window.localStorage","gauge/restore-db!","saved-db","cljs.core.update","ps","s__45755","b__45757","i__45756","vec__45758","iter__45754","vec__45771","pk","p","s__45762","b__45764","i__45763","vec__45765","iter__45761","vec__45768","s__45775","b__45777","i__45776","vec__45778","iter__45774","vec__45781","gk","g","gauge/load-from-localstorage!","G__45784","clojure.edn.read_string","gauge/download-edn!","gauge/app-controls","cljs.core/dissoc","dynamic-repo/send-dynamic-repo-request!","G__45795","dynamic-repo/repo-result-modal","gauge/reload-json!","url","js/fetch","jd","p1__45796#","cljs.core/zipmap","cljs.core.map","gauge/new-gauge!","new-gauge-type","vec__45797","s__45802","b__45804","i__45803","iter__45801","gauge/gauge-list-controls","gauge-types","cljs.core/keys","set-new-gauge-type!","G__45800","gt","s__45806","b__45808","i__45807","vec__45809","map__45812","iter__45805","vec__45813","map__45816","gauge/gauge-list","which-panel","rum.core/cursor-in","gauge/get-panel-unique-name","proposed","cljs.core.filter","G__45818","cljs.core.comp","cljs.core/str","cljs.core.repeat","s__45820","b__45822","i__45821","iter__45819","vec__45824","gauge/panel-list-controls","sel","set-panel-name!","uname","p1__45823#","G__45827","gauge/do-panel-rename","db","old-name","new-name","G__45828","vec__45829","vec__45832","gauge/panel-renamer","set-new-name!","collapse","set-collapse!","taken?","cljs.core/contains?","G__45835","p__45836","map__45837","gauge/ensure-selected-panel","panels","selected-panel","cljs.core.println","cljs.core/empty?","cljs.core/ffirst","gauge/do-panel-delete","vec__45838","gauge/panel-deleter","s__45842","vec__45847","s__45844","b__45846","i__45845","G__45850","iter__45843","G__45851","iter__45841","gauge/panel-list*","cljs.core.sort_by","s__45853","b__45855","i__45854","iter__45852","s__45857","b__45859","i__45858","iter__45856","gauge/alignment-grid","ww","hh","map__45860","map__45861","s__45875","b__45877","i__45876","vec__45878","map__45881","iter__45874","vec__45882","map__45885","s__45888","b__45890","i__45889","vec__45891","vec__45894","iter__45887","vec__45897","vec__45900","s__45907","b__45909","i__45908","iter__45906","gauge/root","align-divs","name","file","G__45886","s","G__45903","gauge/stop","cljs.core/remove-watch","gauge/init","el","js/document","cljs.core/add-watch","new","goog.functions/throttle","rum.core/mount","js/setTimeout","cljs.core/chunk-first"],"sourcesContent":["(ns gauge\n  (:require\n   [clojure.edn :as edn]\n   [goog.string :as gstring]\n   [clojure.string :as string]\n   [shadow.resource :as rc]\n   [goog.functions :as gfunc]\n   [clojure.walk :as walk]\n   [rum.core :as rum]\n   [dynamic-repo]))\n\n\n(def static-input-data [])\n\n(defonce db (atom {}))\n\n(def config-json (js->clj (js/JSON.parse (rc/inline \"gauges/config.json\"))))\n\n(def draw-scale 2)\n\n(def disp-scale\n  (if (and (< 2000 js/window.innerWidth)\n           (< 600 js/window.innerHeight))\n    2\n    1))\n\n(def screen-width 318)\n(def screen-height 159)\n\n(defn shape->bbox\n  [{:strs [radius x0 y0 width height] :as sh}]\n  (cond\n    (and width height x0 y0)\n    (let [halfw (* 0.5 width)\n          halfh (* 0.5 height)]\n      [(- x0 halfw) (- y0 halfh) width height])\n    \n    (and radius x0 y0)\n    (let [d (* 2 radius)]\n      [(- x0 radius) (- y0 radius) d d])\n\n    :else (js/console.error \"Cannot determine bounding box\" sh)))\n\n\n(rum/defc bitmap-canvas-drag\n  [bmap ix iy k]\n  (let [cref (rum/create-ref)\n        [{:keys [x y mousedown] :as drag-state} set-drag-state!] (rum/use-state {})\n        pos-top (str (or y iy) \"px\")\n        pos-left (str (or x ix) \"px\")\n        scaled-x (js/Math.round\n                  (/ (+ (/ (or x ix) disp-scale)\n                        (* 0.5 (.-width bmap)))\n                     draw-scale))\n        scaled-y (js/Math.round\n                  (/ (+ (/ (or y iy) disp-scale)\n                        (* 0.5 (.-height bmap)))\n                     draw-scale))]\n    (rum/use-effect!\n     (fn []\n       (let [cvs (rum/deref cref)\n             ctx (.getContext cvs \"2d\")]\n         (.clearRect ctx 0 0 (.-width bmap) (.-height bmap))\n         (.drawImage ctx bmap 0 0)))\n     [bmap])\n    (rum/fragment\n     (when mousedown\n       [:div\n        {:style {:position :absolute\n                 :top pos-top\n                 :left pos-left}}\n        (str scaled-x \",\" scaled-y)])\n     \n     [:canvas {:ref cref\n               :width (.-width bmap)\n               :height (.-height bmap)\n               :style {:position :absolute\n                       ;; :background-color (if (:mousedown drag-state) \"tomato\" \"peachpuff\")\n                       :width (* disp-scale (.-width bmap))\n                       :height (* disp-scale (.-height bmap))\n                       ;; :outline \"1px solid blue\"\n                       :outline (if-not mousedown \"none\" \"1px solid #fff\")\n                       :top pos-top\n                       :left pos-left\n                       :z-index (if mousedown 998 0)\n                       :user-select (if mousedown \"none\" \"auto\")}\n               :onMouseDown (fn [^js ev]\n                              (let [ox (.-offsetX (.-nativeEvent ev))\n                                    oy (.-offsetY (.-nativeEvent ev))\n                                    cx (.-clientX ev)\n                                    cy (.-clientY ev)]\n                                (set-drag-state! (assoc drag-state\n                                                        :mousedown true\n                                                        :xinit cx\n                                                        :yinit cy))))\n               :onMouseMove (fn [^js ev]\n                              (when mousedown\n                                (let [dx (- (:xinit drag-state)\n                                            (.-clientX ev))\n                                      dy (- (:yinit drag-state)\n                                            (.-clientY ev))]\n                                  (set-drag-state! (assoc drag-state\n                                                          :x (- (.-offsetLeft (.-target ev))\n                                                                dx)\n                                                          :y (- (.-offsetTop (.-target ev))\n                                                                dy)\n                                                          :xinit (.-clientX ev)\n                                                          :yinit (.-clientY ev))))))\n               :onMouseUp (fn [^js ev]\n                            (set-drag-state! (assoc drag-state :mousedown nil :x nil :y nil))\n                            (when (and x y)\n                              (swap! db update-in k update :params assoc\n                                     \"x0\" scaled-x\n                                     \"y0\" scaled-y)))}])))\n\n(defn render-gauge*\n  ([i] (render-gauge* i draw-scale))\n  ([i scl]\n   (let [[x y w h :as bbox] (shape->bbox i)\n         c (doto (js/document.createElement \"canvas\")\n             (aset \"width\" (* w scl))\n             (aset \"height\" (* h scl)))\n         ctx (doto (.getContext c \"2d\")\n               (.scale scl scl)\n               (.translate (- x) (- y)))]\n     (try\n       (js/renderGauge ctx (clj->js i))\n       (catch :default ex (js/console.log \"Render exception\" ex)))\n     {:bitmap c\n      :params i})))\n\n(rum/defc static-bitmap-canvas\n  [bmap]\n  (let [cref (rum/create-ref)]\n    (rum/use-effect!\n     (fn []\n       (when (rum/deref cref)\n        (let [cvs (rum/deref cref)\n              ctx (.getContext cvs \"2d\")]\n          (.clearRect ctx 0 0 (.-width bmap) (.-height bmap))\n          (.drawImage ctx bmap 0 0))))\n     [bmap])\n    [:canvas {:ref cref\n              :width (.-width bmap)\n              :height (.-height bmap)}]))\n\n(defn update-gauge*\n  ([a f] (swap! a (fn [av] (merge av (render-gauge* (f (:params av)))))))\n  ([a f k v] (swap! a (fn [av] (merge av (render-gauge* (f (:params av) k v))))))\n  ([a f k v & more]\n   (swap! a (fn [av] (merge av (render-gauge* (apply f (:params av) (list* k v more))))))))\n\n#_(rum/defc gaugeparam-slider\n  < rum/reactive\n  [da k props]\n  (let [{:keys [params]  :as d} (rum/react da)\n        v (get params k)]\n    [:input\n     (merge\n      {:type \"range\"\n       :min 0\n       :max 100\n       :value (or v 0)\n       :onChange (fn [^js ev] \n                   (update-gauge* da assoc k (js/parseFloat (.-value (.-target ev)))))}\n      props)]))\n\n(rum/defc gaugeparam-slider\n  < rum/reactive\n  [da k props]\n  (let [{:keys [params]  :as d} (rum/react da)\n        v (get params k)]\n    [:span {:style {:display \"inline-grid\"\n                    :grid-template-columns \"1fr 5fr\"\n                    :column-gap \"1ch\"\n                    :align-items \"center\"\n                    :justify-content \"space-between\"\n                    :width \"100%\"}}\n     [:span (str v)]\n     [:input \n      (merge\n       {:type \"range\"\n        :min 0\n        :max 100\n        :value (or v 0)\n        :onChange (fn [^js ev] \n                    (update-gauge* da assoc k (js/parseFloat (.-value (.-target ev)))))}\n       props)]]))\n\n\n(rum/defc gaugeparam-text < rum/reactive\n  [da k]\n  (let [{:keys [params] :as d} (rum/react da)\n        v (get params k)]\n    [:input {:type \"text\"\n             :value (or v \"\")\n             :onChange (fn [^js ev]\n                         (update-gauge* da assoc k (.-value (.-target ev))))}]))\n\n\n(def font-size-options [\"Mini\" \"Normal\" \"Bold\" \"Big\" \"Maxi\" \"None\"])\n\n(rum/defc gaugeparam-fontsize\n  < rum/reactive\n  [da k]\n  (let [{:keys [params]  :as d} (rum/react da)\n        v (get params k)]\n    [:select\n     {:value (or v \"Mini\")\n      :style {:width \"8em\"\n              :justify-self \"end\"}\n      :onChange (fn [ev]\n                  (update-gauge* da assoc k (.-value (.-target ev))))}\n     (for [fs font-size-options]\n       [:option {:key fs  :value fs} fs])]))\n\n(rum/defc gaugeparam-select\n  < rum/reactive\n  [da k {:strs [options def]}]\n  (let [{:keys [params]  :as d} (rum/react da)\n        v (get params k)]\n    [:select\n     {:value (or v def)\n      :style {:width \"12em\"\n              :justify-self \"end\"}\n      :onChange (fn [ev]\n                  (update-gauge* da assoc k (.-value (.-target ev))))}\n     (for [o options]\n       (if (string? o)\n         [:option {:key o  :value o} o]\n         (let [{:strs [value label]} o]\n           [:option {:key value :value value} label])))]))\n\n(rum/defc float-input\n  [{:keys [value on-change decimal-places] :or {decimal-places 2}}]\n  (let [[{:keys [text valid] :as st } set-st!] (rum/use-state {:text value :valid true})]\n    (rum/use-effect!\n     (fn []\n       (let [fx (.toFixed value decimal-places)\n             nv (js/parseFloat fx)\n             d (- nv (js/parseFloat text) )]\n         (when (or (js/isNaN d)\n                   (> (js/Math.abs d) (/ 1.0 (js/Math.pow 10 decimal-places))))\n           (set-st! {:valid true\n                     :text (-> fx\n                               (string/replace #\"\\.0+$\" \"\")\n                               (string/replace #\"00+$\" \"\"))})))\n       nil)\n     [value])\n    [:input {:type \"text\"\n             :value text\n             :style {:outline (if valid \"unset\" \"2px solid tomato\")}\n             :on-change (fn [^js ev]\n                          (let [n (js/parseFloat (.-value (.-target ev)))\n                                v? (not (js/isNaN n))]\n                            (set-st! {:text (.-value (.-target ev))\n                                      :valid v?})\n                            (when v? (on-change n))))}]))\n\n(rum/defc gaugeparam-plusminus < rum/reactive\n  [da k {:keys [d] :or {d 1} :as opts}]\n  (let [{:keys [params]} (rum/react da)\n        v (get-in params k)]\n    [:span.plusminus {}\n     [:input {:type \"button\"\n              :value \"-\"\n              :onClick #(update-gauge* da update-in k dec)}]\n     \n     (float-input {:value (or v 0)\n                   :on-change #(update-gauge* da assoc-in k %)})\n     \n     [:input {:type \"button\"\n              :value \"+\"\n              :onClick #(update-gauge* da update-in k inc)}]]))\n\n(rum/defc gaugeparam-plusminus-fixed < rum/reactive\n  [da k {:keys [d] :or {d 1} :as opts}]\n  (let [{:keys [params]} (rum/react da)\n        v (get params k)]\n    [:span.plusminus {}\n     [:input {:type \"button\"\n              :value \"-\"\n              :onClick #(update-gauge* da update k dec)}]\n     \n     (float-input {:value (or v 0)\n                   :on-change #(update-gauge* da assoc k %)})\n     \n     [:input {:type \"button\"\n              :value \"+\"\n              :onClick #(update-gauge* da update k inc)}]]))\n\n(rum/defc gaugeparam-color < rum/reactive\n  [da k]\n  (let [{:keys [params]} (rum/react da)\n        v (get params k)]\n    [:div {:style {:justify-self \"end\"\n                   :display \"grid\"\n                   :align-items \"center\"\n                   :column-gap \"2ex\"\n                   :grid-template-columns \"1.5em 8em\"}}\n     \n     (if (string/starts-with? k \"#\")\n       [:input\n        {:type :color\n         :value k\n         :onChange (fn [ev]\n                     (update-gauge* da assoc k (.-value (.-target ev))))}]\n       [:div\n        {:style {:height \"2ex\"\n                 :width \"4ex\"\n                 :background-color v}}])\n     \n     [:input\n      {:type \"text\"\n       :value (or v \"transparent\")\n       :onChange (fn [^js ev]\n                   (update-gauge* da assoc k (.-value (.-target ev))))}]]))\n\n(rum/defc edit-spectrum\n  < rum/reactive\n  [da]\n  (let [{:keys [params]} (rum/react da)\n        {:strs [spectrum]} params\n        n (count spectrum)]\n    [:div.edit-spectrum {}\n     (for [i (range n)\n           t [:label :swatch :delete]\n           :let [color (nth spectrum i)]]\n       (case t\n         :swatch\n         (if (string/starts-with? color \"#\")\n           [:input\n            {:type :color\n             :value color\n             :key (str \"cc\" i)\n             :onChange (fn [ev]\n                         (update-gauge* da assoc-in\n                                        [\"spectrum\" i]\n                                        (.-value (.-target ev))))}]\n           [:span\n            {:key (str \"w\" i)\n             :style {:height \"2ex\"\n                     :align-self \"center\"\n                     :width \"4ex\"\n                     :background-color color}}])\n         :label [:input\n                 {:type \"text\"\n                  :key (str \"c\" i)\n                  :value color\n                  :onChange (fn [^js ev]\n                              (update-gauge* da assoc-in\n                                             [\"spectrum\" i]\n                                             (.-value (.-target ev))))}]\n         :delete [:input.delete-button\n                  {:type :button\n                   :value \"-\"\n                   :key (str \"d\" i)\n                   :disabled (< n 2)\n                   :onClick (fn []\n                              (update-gauge* da update \"spectrum\"\n                                             (fn [v]\n                                               (if (< n 2)\n                                                 v\n                                                 (vec (concat (take i v)\n                                                              (drop (inc i) v))) ))))}]))\n     [:input\n      {:type \"button\"\n       :value \"+\"\n       :onClick #(update-gauge* da update \"spectrum\" conj \"red\")}]]))\n\n(rum/defc edit-colorvals\n  < rum/reactive\n  [da]\n  (let [{:keys [params]} (rum/react da)\n        cvs (get params \"colorvals\")\n        n (count cvs)]\n    [:div.colorvals {}\n     (for [i (range n)\n           :let [{:strs [val color]} (nth cvs i)\n                 minv (if (= i 0)\n                        (get params \"min\")\n                        (get (nth cvs (dec i)) \"val\"))\n                 maxv (if (= i (dec n))\n                        (get params \"max\")\n                        (get (nth cvs (inc i)) \"val\"))]\n           t [ :label :swatch :range :slider :delete]]\n       (case t\n         :delete [:input.delete-button\n                  {:type :button\n                   :key (str \"b\" i)\n                   :value \"-\"\n                   :disabled (< n 2)\n                   :onClick (fn []\n                              (update-gauge* da\n                                             update \"colorvals\"\n                                             (fn [v]\n                                               (if (< n 2)\n                                                 v\n                                                 (vec (concat (take i v)\n                                                              (drop (inc i) v))) ))))}]\n         :range [:div {:key (str \"l\" i)}\n                 (-> (.toFixed val 3)\n                     (string/replace #\"\\.0+$\" \"\")\n                     (string/replace #\"0+$\" \"\"))\n                 #_(str val)]\n         :swatch [:span\n                  {:key (str \"w\" i)\n                   :style {:height \"2ex\"\n                           :width \"4ex\"\n                           :background-color color}}]\n         :label [:input\n                 {:type \"text\"\n                  :key (str \"c\" i)\n                  :value color\n                  :onChange (fn [^js ev]\n                              (update-gauge* da assoc-in\n                                             [\"colorvals\" i \"color\"]\n                                             (.-value (.-target ev))))}]\n         :slider (let [{:strs [max min majdivs subdivs]} params\n                       step (/ (- max min)\n                                (* majdivs subdivs))]\n                   [:input\n                    {:type \"range\"\n                     :key (str \"s\" i)\n                     :min minv\n                     :max maxv\n                     :step step\n                     :value val\n                     :onChange (fn [^js ev]\n                                 (update-gauge* da assoc-in \n                                                [\"colorvals\" i \"val\"]\n                                                (js/parseFloat (.-value (.-target ev)))))}])))\n     [:input.add-arc\n      {:type \"button\"\n       :value \"+\"\n       :onClick\n       #(update-gauge* da update \"colorvals\" conj\n                       {\"color\" \"red\"\n                        \"val\" (get params \"max\")})}]]))\n\n(rum/defc spectrum-or-colorvals < rum/reactive\n  [da]\n  (let [{:keys [params] :as d} (rum/react da)\n        {:strs [colorvals spectrum min max] :as kq} params]\n    (cond\n      colorvals (rum/fragment\n                 [:div.edit-spectrum-label {}\n                  \"Manual colors\"\n                  [:input\n                   {:type \"button\"\n                    :value \"Auto\"\n                    :onClick (fn [^js ev]\n                               (update-gauge* da\n                                              #(-> %\n                                                   (dissoc \"colorvals\")\n                                                   (assoc \"spectrum\"\n                                                          (cond-> (for [c colorvals]\n                                                                    (get c \"color\"))\n                                                            true vec\n                                                            (< max min) reverse)))))}]]\n                 (edit-colorvals da))\n      \n      spectrum (rum/fragment\n                [:div.edit-spectrum-label {}\n                 \"Auto spectrum\"\n                 [:input\n                  {:type \"button\"\n                   :value \"Manual\"\n                   :onClick (fn [^js ev]\n                              (update-gauge* da\n                                             #(-> %\n                                                  (dissoc \"spectrum\")\n                                                  (assoc \"colorvals\"\n                                                         (js->clj\n                                                          (js/returnColorVals\n                                                           (clj->js spectrum)\n                                                           (get params  \"min\")\n                                                           (get params  \"max\")))))))\n                   :style {:margin-left \"2ex\"}}]]\n                (edit-spectrum da))\n      \n      :else \"Malformed gauge\")))\n\n(rum/defcs edit-multitext < rum/reactive (rum/local nil ::value)\n  [{::keys [value] :as cls} da]\n  (let [{:keys [params]} (rum/react da)\n        {:strs [text]} params]\n    [:textarea\n     {:rows (count text)\n      :value (or (not-empty (some-> value deref))\n               (string/join \"\\n\" text))\n      :onChange (fn [^js ev]\n                  (let [v (.-value (.-target ev))]\n                    (some-> value (reset! v))\n                    (update-gauge* da assoc \"text\"\n                                   (string/split v #\"\\n\"))))}]))\n\n(rum/defc textbox-mode-switcher < rum/reactive\n  [da]\n  (let [{:keys [params]  :as d} (rum/react da)]\n   [:div {}\n    [:input {:type \"button\" :value \"Line chosen by value\"\n             :disabled (= \"sequencedTextBox\" (get params \"type\"))\n             :onClick #(update-gauge* da assoc \"type\" \"sequencedTextBox\")}]\n    [:input {:type \"button\" :value \"Multi-line\"\n             :disabled (if (= \"stackedTextBox\" (get params \"type\")) true false)\n             :onClick #(update-gauge* da assoc \"type\" \"stackedTextBox\")}]]))\n\n(def gauge-editor-map (js->clj (js/setupWidgets)))\n\n(defn type->fields\n  [t]\n  (let [fs? (get gauge-editor-map t)\n        fs (if-not (string? fs?)\n             fs?\n             (get gauge-editor-map fs?))]\n    (when-not fs\n      (throw (ex-info (str \"Don't know about \" fs?) {:t t})))\n    fs))\n\n(rum/defc gauge-field\n  [da {:strs [key label type props]}]\n  (rum/fragment\n   (when label\n     [:span {} label])\n   (case type\n     \"plusminus\" (gaugeparam-plusminus-fixed da key)\n     \"fontsize\"  (gaugeparam-fontsize da key)\n     \"slider\"    (gaugeparam-slider da key props)\n     \"color\"     (gaugeparam-color da key)\n     \"select\"    (gaugeparam-select da key props)\n     \n     \"multitext\"             (edit-multitext da)\n     \"textbox-mode-switcher\" (textbox-mode-switcher da)\n     \"spectrum-or-colorvals\" (spectrum-or-colorvals da)\n     \n     (do (js/console.error \"No gauge type:\" type)\n         nil))))\n\n(rum/defc generic-gauge < rum/reactive\n  [da]\n  (let [{:keys [params] :as d} (rum/react da)\n        ty (get params \"type\")\n        fs (type->fields ty)]\n    (when-not (seq fs)\n      (js/console.error \"Cannot get field list\" params))\n    (rum/fragment\n     (for [i (range (count fs))]\n       (-> (gauge-field da (nth fs i))\n           (rum/with-key i))))))\n\n(rum/defc onegauge-editor\n  < rum/reactive\n  [da i]\n  (let [d   (rum/react da)\n        x0  (get (:params d) \"x0\")\n        y0  (get (:params d) \"y0\")\n        val (get (:params d) \"value\")]\n    [:div.onegauge {}\n     (when-let [bmap (:bitmap d)]\n       (static-bitmap-canvas bmap))\n     [:div.sliders\n      [:span.slider-label \"Label\"]\n      (gaugeparam-text da \"label\")\n      \n      [:span.slider-label \"X\"]\n      (gaugeparam-slider da \"x0\" {:min 0 :max screen-width})\n      [:span.slider-label \"Y\"]\n      (gaugeparam-slider da \"y0\" {:min 0 :max screen-height})\n\n      (when val [:span.slider-label \"Value\"])\n      (when val\n        (let [{:strs [type min max]} (:params d)]\n          (case type\n            (\"textBox\" \"rawText\" \"sequencedTextBox\" \"stackedTextBox\")\n            (gaugeparam-plusminus da  [\"value\"])\n            \n            (let [real-min (clojure.core/min min max)\n                  real-max (clojure.core/max min max)]\n              (gaugeparam-slider da \"value\"\n                                 {:min  real-min\n                                  :max  real-max\n                                  :step (* 0.01 (- real-max real-min))})))))]\n     [:div.controls\n      [:input\n       {:type    \"button\"\n        :value   (if-not (:editing d) \"Edit\" \"Finish\")\n        :onClick #(swap! da update :editing not)}]\n      \n      #_[:input\n         {:type    \"button\"\n          :value   (if-not (:hidden d) \"Hide\" \"Show\")\n          :onClick #(swap! da update :hidden not)}]\n      \n      [:input\n       {:type    \"button\"\n        :value   \"Duplicate\"\n\n        :onClick (fn []\n                   (swap! db update-in\n                          [:panels (:selected-panel @db) :gauges]\n                          (fn [gs] (assoc gs (count gs) d))))}]\n      [:input\n       {:type    \"button\"\n        :value   \"Delete\"\n        :onClick #(swap! da assoc :deleted true)}]]\n     [:div.sliders\n      {:style {:grid-column     \"1/4\"\n               :width           \"100%\"\n               :justify-content \"space-between\"}}\n      (when (:editing d)\n        (generic-gauge da))]]))\n\n(defn ask-download-file\n  [path contents]\n  (let [b (js/Blob. #js [contents])\n        u (js/URL.createObjectURL b)\n        a (js/document.createElement \"a\")]\n    (set! (.-href a) u)\n    (set! (.-download a) path)\n    (.click a)))\n\n(defn render-panel\n  [pdb w h]\n  (let [c (doto (js/document.createElement \"canvas\")\n            (aset \"width\" w)\n            (aset \"height\" h))\n        ctx (.getContext c \"2d\")\n        {:keys [gauges background-image]} pdb\n        bg (when background-image\n             (doto (js/document.createElement \"img\")\n               (aset \"src\" background-image)))\n        _ (when bg (.drawImage ctx bg 0 0 w h))\n        +calc (vec\n               (for [[i {:keys [deleted]  :as d}] gauges\n                     :when (not deleted)]\n                 (merge\n                  (:params d)\n                  (->> (dissoc (:params d) \"value\" \"label\")\n                       (clj->js)\n                       (js/renderGauge ctx)\n                       (js->clj)))))]\n    (js/Promise.\n     (fn [resolve reject]\n       (.toBlob c (fn [b] (resolve {:image b :data +calc}))\n                \"png\")))))\n\n(defn download-json!\n  [w h]\n  (.then (render-panel (get (:panels @db) (get @db :selected-panel)) w h)\n         (fn [{:keys [data]}]\n           (ask-download-file \"gauges.json\" (js/JSON.stringify (clj->js data) nil 2))\n           (ask-download-file \"gauges.new.json\"\n                              (js/JSON.stringify\n                               (clj->js {:panel data\n                                         :timestamp (.toISOString (js/Date.))})\n                               nil 2)))))\n\n\n(defn download-png!\n  [w h]\n  (.then (render-panel (get (:panels @db) (get @db :selected-panel)) w h)\n         (fn [{:keys [image]}]\n           (ask-download-file \"gauges.png\" image))))\n\n(defn blob->base64\n  [v]\n  (js/Promise.\n   (fn [resolve reject]\n     (let [fr (doto (js/FileReader.)\n               (.readAsDataURL v))]\n      (set! (.-error fr) reject)\n      (set! (.-onloadend fr) #(resolve (.-result fr)))))))\n\n(defn make-dynamic-repo-request*\n  [w h]\n  (js/Promise.all\n   (into-array\n    (for [[panel-name panel] (:panels @db)]\n      (.then (render-panel panel w h)\n             (fn [{:keys [image data]}]\n               (.then (blob->base64 image)\n                      (fn [base]\n                        #js [{:destination (str \"Apps/DFM-InsP/Panels/\" panel-name \".json\")\n                              :json-data (clj->js data)}\n                             {:destination (str \"Apps/DFM-InsP/Panels/\" panel-name \".new.json\")\n                              :json-data (clj->js {:panel data\n                                                   :timestamp (.toISOString (js/Date.))})}\n                             {:destination (str \"Apps/DFM-InsP/Panels/\" panel-name \".png\")\n                              :data-base64 (subs base (count \"data:image/png;base64,\"))}]))))))))\n\n(defn make-dynamic-repo-request\n  [w h]\n  (-> (make-dynamic-repo-request* w h)\n      (.then (fn [filesets]\n               (clj->js\n                {:yoururl js/window.location.origin\n                 :dynamic-files {\"Gauges\" (into [{:app \"DFM-InsP\"}] cat filesets)}})))))\n\n\n(def localstorage-db-key \"gauges-db\")\n(def save-watch-key :save-watch-key)\n\n(defn encode-edn-string\n  [dbval]\n  (->> dbval\n       (walk/prewalk\n        (fn [j]\n          (if-not (map? j)\n            j\n            (dissoc j :bitmap))))\n       (pr-str)))\n\n(defn save-to-localstorage!\n  [dbval]\n  (.setItem js/window.localStorage localstorage-db-key\n            (encode-edn-string dbval)))\n\n(defn restore-db!\n  [saved-db]\n  (reset! db\n          (update saved-db :panels\n                  (fn [ps]\n                    (into {}\n                          (for [[pk p] ps]\n                            [pk (update p :gauges\n                                        (fn [gs]\n                                          (into {}\n                                                (for [[gk g] gs]\n                                                  [gk (merge g (render-gauge* (:params g)))]))))]))))))\n\n(defn load-from-localstorage!\n  []\n  (when-let [saved-db (some-> js/window.localStorage\n                              (.getItem localstorage-db-key)\n                              (edn/read-string))]\n    (restore-db! saved-db))) \n\n(defn download-edn!\n  []\n  (ask-download-file \"panels.edn\" (encode-edn-string @db)))\n\n\n\n(rum/defc app-controls\n  [w h]\n  [:div\n   [:div [:h4 \"Background image\"]\n    [:ul\n     [:li [:input {:type \"file\"\n                   :onChange (fn [ev]\n                               (when-let [f (first (.-files (.-target ev)))]\n                                 (swap! db assoc-in\n                                        [:panels (:selected-panel @db) :background-image]\n                                        (js/URL.createObjectURL f))))}]]\n     [:li [:input {:type \"button\"\n                   :value \"Clear\"\n                   :onClick #(swap! db update-in\n                                    [:panels (:selected-panel @db)]\n                                    dissoc :background-image)}]]]]\n   [:div [:h4 \"Download\"]\n    [:p\n     \"When you are ready to install the Lua app along with all your created panels, \"\n     \"click here to get the URL to paste into Jeti studio: \"\n     [:input {:type \"button\"\n              :display \"inline\"\n              :value \"Create app source\"\n              :class \"dynamic-repo-button\"\n              :onClick (fn [ev]\n                         (-> (make-dynamic-repo-request w h)\n                             (.then dynamic-repo/send-dynamic-repo-request! )))}]]\n    \n    [:p \"You can also manually download this panel's configuration data:\"]\n    [:ul\n     [:li [:input {:type \"button\"  :value \"Download JSON\" :onClick #(download-json! w h)}]]\n     [:li [:input {:type \"button\"  :value \"Download PNG\"  :onClick #(download-png! w h)}]]]]\n   \n   [:div [:h4 \"Backup & restore\"]\n    [:p \"Data for ALL panels can be saved to a file and reloaded.  \"\n     \"Be careful - restoring replaces all your panels!\"]\n    [:ul\n     [:li [:input {:type \"button\"  :value \"Download EDN backup\" :onClick #(download-edn!)}]]\n     [:li [:label\n           \"Restore\"\n           [:input.delete-button\n            {:type \"file\"\n             :style {:margin-left \"1ch\"}\n             :onChange (fn [ev]\n                         (when-let [f (first (.-files (.-target ev)))]\n                           (let [fr (doto (js/FileReader.)\n                                      (.readAsText f \"utf-8\"))]\n                             (set! (.-onloadend fr)\n                                   #(restore-db! (edn/read-string (.-result fr)))))))}]]]]]\n   (dynamic-repo/repo-result-modal)])\n\n\n(defn reload-json!\n  [panel-name url]\n  (-> (js/fetch url)\n      (.then (fn [fr] (.json fr)))\n      (.then (fn [jd]\n               (swap! db #(-> %\n                              (assoc-in [:panels panel-name]\n                                        {:gauges (zipmap (range)\n                                                         (map render-gauge* (js->clj jd)))})\n                              (assoc :selected-panel panel-name)))))))\n\n(defn new-gauge!\n  [new-gauge-type]\n  (swap! db update-in\n         [:panels (:selected-panel @db) :gauges]\n         (fn [gs]\n           (assoc gs\n                  (count gs)\n                  (assoc (render-gauge*\n                          (get-in config-json [\"prototypes\" new-gauge-type])) :editing true)))))\n\n(rum/defc gauge-list-controls\n  []\n  (let [gauge-types (keys (get config-json \"prototypes\"))\n        [new-gauge-type set-new-gauge-type!] (rum/use-state (first gauge-types))]\n    [:div\n     [:input\n      {:type :button\n       :value \"New\"\n       :onClick (fn [] (new-gauge! new-gauge-type))}]\n     [:select\n      {:value new-gauge-type\n       :onChange (fn [ev] (set-new-gauge-type! (.-value (.-target ev))))}\n      (for [gt gauge-types]\n        [:option {:key gt  :value gt} gt])]]))\n\n\n(rum/defc gauge-list\n  [which-panel gauges]\n  [:div.gauge-list {}\n   (gauge-list-controls)\n   [:div\n    (for [[i {:keys [deleted]  :as d}] gauges\n          :when (not deleted)]\n      (rum/with-key (onegauge-editor (rum/cursor-in db [:panels which-panel :gauges i]) i)\n        i))]])\n\n\n\n\n(defn get-panel-unique-name\n  [proposed]\n  (first\n   (filter (or (some->> @db :panels (comp not))\n               #(do true))\n           (map str\n                (repeat proposed)\n                (cons nil\n                      (for [i (range)]\n                        (str \" (\" (inc i) \")\")))))))\n\n(rum/defc panel-list-controls\n  [sel ps]\n  (let [[panel-name set-panel-name!] (rum/use-state \"New panel\")]\n    [:div\n     [:input.save-panel-button\n      {:type \"button\"\n       :value \"Save this panel as:\"\n       :onClick (fn []\n                  (let [uname (get-panel-unique-name panel-name)]\n                   (swap! db\n                          #(-> %\n                               (update :panels assoc uname (get ps sel))\n                               (assoc :selected-panel uname)))))}]\n     [:input {:type \"text\"\n              :value panel-name\n              :onChange (fn [^js ev]\n                          (set-panel-name! (.-value (.-target ev))))}]]))\n\n\n(defn do-panel-rename\n  [db old-name new-name]\n  (cond-> db\n    true (update :panels dissoc old-name)\n    true (update :panels assoc new-name (get (:panels db) old-name))\n    \n    (= old-name (:selected-panel db))\n    (assoc :selected-panel new-name)))\n\n(rum/defc panel-renamer\n  [ps old-name]\n  (let [[new-name set-new-name!] (rum/use-state old-name)\n        [collapse set-collapse!] (rum/use-state true)\n        taken? (contains? ps new-name)]\n    (if collapse\n      [:input.panel-rename-button\n       {:type \"button\"\n        :value \"Rename\"\n        :onClick #(set-collapse! nil)}]\n      \n      [:div.panel-rename\n       [:input {:type \"text\"\n                :value (or new-name \"\")\n                :placeholder \"New name\"\n                :onChange (fn [^js ev]\n                            (set-new-name! (.-value (.-target ev))))}]\n       [:input {:type \"button\"\n                :value \"OK\"\n                :disabled taken?\n                :onClick (fn [ev]\n                           (set-collapse! true)\n                           (swap! db do-panel-rename old-name new-name))}]\n       [:input {:type \"button\"\n                :value \"Cancel\"\n                :onClick #(set-collapse! true)}]])))\n\n(defn ensure-selected-panel\n  [{:keys [panels selected-panel] :as db}]\n  (println \"Ensure SelectedPanel\" selected-panel (keys panels) )\n  (cond\n    (contains? panels selected-panel) db\n    (empty? panels)                   db\n    :else                             (assoc db :selected-panel (ffirst panels))))\n\n(defn do-panel-delete\n  [db panel-name]\n  (-> db\n      (update :panels dissoc panel-name)\n      (ensure-selected-panel)))\n\n(rum/defc panel-deleter\n  [ps panel-name]\n  (let [[collapse set-collapse!] (rum/use-state true)]\n    (if collapse\n      [:input.delete-button\n       {:type \"button\"\n        :value \"Delete\"\n        :style {:width \"8ex\" :justify-self \"end\"}\n        :onClick #(set-collapse! nil)}]\n      \n      [:div.panel-delete\n       [:input.delete-button\n        {:type \"button\"\n         :value \"Really delete\"\n         :onClick (fn [ev]\n                    (set-collapse! true)\n                    (swap! db do-panel-delete panel-name))}]\n       [:input {:type \"button\"\n                :value \"Cancel\"\n                :onClick #(set-collapse! true)}]])))\n\n(rum/defc panel-list*\n  [sel ps]\n  [:div {}\n   (when (not-empty ps)\n     [:div.panel-list {}\n      (for [[panel-name panel] (sort-by first ps)\n            c [:select :spacer :rename :delete]]\n        (case c\n          :rename (rum/with-key (panel-renamer ps panel-name) (str c panel-name))\n          :delete (rum/with-key (panel-deleter ps panel-name) (str c panel-name))\n          :spacer [:div {:key (str c panel-name)}\n                   (when (= panel-name sel) \"(editing)\")]\n          :select [:input {:key (str c panel-name)\n                           :type \"button\"\n                           :value panel-name\n                           :disabled (= sel panel-name)\n                           :onClick #(swap! db assoc :selected-panel panel-name)}]))])\n   \n   (panel-list-controls sel ps)])\n\n(rum/defc alignment-grid\n  [d ww hh]\n  (when (and d ww hh)\n   [:svg {:width ww\n          :height hh\n          :viewBox (str \"0 0 \" ww \" \" hh) \n          :style {:position :absolute\n                  :pointer-events \"none\"\n                  :z-index 999\n                  :top 0\n                  :left 0\n                  :width (str ww \"px\")\n                  :height (str hh \"px\")}}\n    [:g {:stroke \"#fff\"\n         :stroke-width 1\n         :stroke-dasharray \"8 5\"}\n     (for [i (range 1 d)]\n       [:line {:key i\n               :x1 (* i (/ ww d)) :y1 0\n               :x2 (* i (/ ww d)) :y2 hh}])\n     (for [i (range 1 d)]\n       [:line {:key i\n               :x1 0 :y1 (* i (/ hh d))\n               :x2 ww :y2 (* i (/ hh d))}])]]))\n\n(rum/defc root\n  < rum/reactive\n  []\n  (let [cref (rum/create-ref)\n        w screen-width\n        h screen-height\n        ;; {:keys [gauges panels align-divs background-image] :as gdb} (rum/react db)\n        {:keys [panels selected-panel align-divs]} (rum/react db)\n        {:keys [gauges background-image]} (get panels selected-panel)]\n    [:div.container\n     [:div {:style {:margin-left \"2ex\"\n                    :z-index 1000}}\n      [:h2 \"Instrument Panel creator\"]\n      #_[:p \"This app is for creating instrument panels for use with the companion app on the JETI transmitter.\"]\n      [:p \"This web app is for creating instrument panels for display on Jeti transmitters using a Jeti Lua app named DFM-InsP.\"]\n      [:p \"Once you have finished drawing your panels here, you will get a link to paste into Jeti studio that will install the Lua app and all of your panels using the Transmitter Wizard.\"]\n      [:p \"You assign telemetry sensors to the gauges in the Lua app menus to animate the gauges and text boxes. Fine tuning of labels and fonts can be done on the transmitter.\"]\n      \n      \n      [:h4 \"Example panels\"]\n      \n      [:div.example-panels\n       (for [[name {:strs [file]}] (get config-json \"examples\")]\n         [:div {:key (str name)}\n          [:input {:type \"button\" :value name  :onClick #(reload-json! name file)}]])]\n\n      [:h4 \"My panels\"]\n      (panel-list* selected-panel panels)\n      #_(panel-list selected-panel)\n      \n      (app-controls w h)]\n     [:div {}\n      [:div.composite\n       {:style (cond-> {:width (str (* w draw-scale disp-scale) \"px\")\n                        :height (str (* h draw-scale disp-scale) \"px\")\n                        :position :relative}\n                 background-image (assoc :background-image (str \"url(\" background-image \")\")\n                                         :background-size \"cover\"))}\n       (for [[i d] gauges\n             :when (and (:bitmap d) (not (or (:hidden d) (:deleted d))))\n             :let [[x y w h] (shape->bbox (:params d))]]\n         (->> i\n              (rum/with-key (bitmap-canvas-drag\n                             (:bitmap d)\n                             (* x draw-scale disp-scale)\n                             (* y draw-scale disp-scale)\n                             [:panels selected-panel :gauges i]))))\n       \n       (when align-divs\n         (alignment-grid align-divs\n                         (* w draw-scale disp-scale)\n                         (* h draw-scale disp-scale)))]\n      \n      [:label {:style {:z-index 1000}}\n       \"Alignment grid:\"\n       [:select {:value (or align-divs \"none\")\n                 :style {:margin-left \"2ex\"}\n                 :onChange (fn [ev]\n                             (let [s (.-value (.-target ev))]\n                               (swap! db assoc :align-divs\n                                      (case s\n                                        \"none\" nil\n                                        s))))}\n        [:option {:value \"none\"} \"none\"]\n        (for [i [2 3 4 5 6 7 8]]\n          [:option {:key i :value (str i)} (str i)])]]]\n     \n     (gauge-list selected-panel gauges)]))\n\n(defn ^:def/before-load stop\n  []\n  (remove-watch db save-watch-key))\n\n(defn ^:dev/after-load init\n  []\n  (let [el (.getElementById js/document \"root\")]\n    \n    (add-watch db save-watch-key\n               (-> (fn [_ _ _ new]\n                     (save-to-localstorage! new))\n                   (gfunc/throttle 5000)))\n    \n    (rum/mount (root) el)\n    \n    (-> (fn []\n          (or (load-from-localstorage!)\n              (reload-json! \"Turbine\" \"Turbine.json\")))\n        (js/setTimeout 0))))\n"]}