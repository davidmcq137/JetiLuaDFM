{
"version":3,
"file":"goog.log.log.js",
"lineCount":357,
"mappings":"AAWAA,IAAKC,CAAAA,OAAL,CAAa,UAAb,CAAA;AACAD,IAAKC,CAAAA,OAAL,CAAa,gBAAb,CAAA;AACAD,IAAKC,CAAAA,OAAL,CAAa,oBAAb,CAAA;AACAD,IAAKC,CAAAA,OAAL,CAAa,oBAAb,CAAA;AACAD,IAAKC,CAAAA,OAAL,CAAa,iBAAb,CAAA;AAEAD,IAAKE,CAAAA,OAAL,CAAa,cAAb,CAAA;AACAF,IAAKE,CAAAA,OAAL,CAAa,YAAb,CAAA;AAYAF,IAAKG,CAAAA,GAAIC,CAAAA,QAAT;AAGAJ,IAAKG,CAAAA,GAAIE,CAAAA,OAAT,GAAmBL,IAAKM,CAAAA,MAAL,CAAY,kBAAZ,EAAgCN,IAAKO,CAAAA,KAAMC,CAAAA,eAA3C,CAAnB;AAGAR,IAAKG,CAAAA,GAAIM,CAAAA,gBAAT,GAA4B,EAA5B;AA6BiB,IAAA,8BAKfC,QAAW,CAACC,IAAD,EAAOC,KAAP,CAAc;AAMvB,MAAKD,CAAAA,IAAL,GAAYA,IAAZ;AAMA,MAAKC,CAAAA,KAAL,GAAaA,KAAb;AAZuB,CALV;AAwBf,2BAAA,CAAA,SAAA,CAAA,QAAAC,GAAAA,QAAQ,EAAG;AACT,SAAO,IAAKF,CAAAA,IAAZ;AADS,CAAXE;AAxBFb,IAAKG,CAAAA,GAAIW,CAAAA,KAAT,GAAiB,2BAAjB;AAmCAd,IAAKG,CAAAA,GAAIW,CAAAA,KAAMC,CAAAA,GAAf,GAAqB,IAAIf,IAAKG,CAAAA,GAAIW,CAAAA,KAAb,CAAmB,KAAnB,EAA0BE,QAA1B,CAArB;AAQAhB,IAAKG,CAAAA,GAAIW,CAAAA,KAAMG,CAAAA,KAAf,GAAuB,IAAIjB,IAAKG,CAAAA,GAAIW,CAAAA,KAAb,CAAmB,OAAnB,EAA4B,IAA5B,CAAvB;AAQAd,IAAKG,CAAAA,GAAIW,CAAAA,KAAMI,CAAAA,MAAf,GAAwB,IAAIlB,IAAKG,CAAAA,GAAIW,CAAAA,KAAb,CAAmB,QAAnB,EAA6B,IAA7B,CAAxB;AAQAd,IAAKG,CAAAA,GAAIW,CAAAA,KAAMK,CAAAA,OAAf,GAAyB,IAAInB,IAAKG,CAAAA,GAAIW,CAAAA,KAAb,CAAmB,SAAnB,EAA8B,GAA9B,CAAzB;AAQAd,IAAKG,CAAAA,GAAIW,CAAAA,KAAMM,CAAAA,IAAf,GAAsB,IAAIpB,IAAKG,CAAAA,GAAIW,CAAAA,KAAb,CAAmB,MAAnB,EAA2B,GAA3B,CAAtB;AAQAd,IAAKG,CAAAA,GAAIW,CAAAA,KAAMO,CAAAA,MAAf,GAAwB,IAAIrB,IAAKG,CAAAA,GAAIW,CAAAA,KAAb,CAAmB,QAAnB,EAA6B,GAA7B,CAAxB;AAQAd,IAAKG,CAAAA,GAAIW,CAAAA,KAAMQ,CAAAA,IAAf,GAAsB,IAAItB,IAAKG,CAAAA,GAAIW,CAAAA,KAAb,CAAmB,MAAnB,EAA2B,GAA3B,CAAtB;AAQAd,IAAKG,CAAAA,GAAIW,CAAAA,KAAMS,CAAAA,KAAf,GAAuB,IAAIvB,IAAKG,CAAAA,GAAIW,CAAAA,KAAb,CAAmB,OAAnB,EAA4B,GAA5B,CAAvB;AAQAd,IAAKG,CAAAA,GAAIW,CAAAA,KAAMU,CAAAA,MAAf,GAAwB,IAAIxB,IAAKG,CAAAA,GAAIW,CAAAA,KAAb,CAAmB,QAAnB,EAA6B,GAA7B,CAAxB;AAQAd,IAAKG,CAAAA,GAAIW,CAAAA,KAAMW,CAAAA,GAAf,GAAqB,IAAIzB,IAAKG,CAAAA,GAAIW,CAAAA,KAAb,CAAmB,KAAnB,EAA0B,CAA1B,CAArB;AAQAd,IAAKG,CAAAA,GAAIW,CAAAA,KAAMY,CAAAA,iBAAf,GAAmC,CACjC1B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMC,CAAAA,GADkB,EACbf,IAAKG,CAAAA,GAAIW,CAAAA,KAAMG,CAAAA,KADF,EACSjB,IAAKG,CAAAA,GAAIW,CAAAA,KAAMI,CAAAA,MADxB,EAEjClB,IAAKG,CAAAA,GAAIW,CAAAA,KAAMK,CAAAA,OAFkB,EAETnB,IAAKG,CAAAA,GAAIW,CAAAA,KAAMM,CAAAA,IAFN,EAEYpB,IAAKG,CAAAA,GAAIW,CAAAA,KAAMO,CAAAA,MAF3B,EAGjCrB,IAAKG,CAAAA,GAAIW,CAAAA,KAAMQ,CAAAA,IAHkB,EAGZtB,IAAKG,CAAAA,GAAIW,CAAAA,KAAMS,CAAAA,KAHH,EAGUvB,IAAKG,CAAAA,GAAIW,CAAAA,KAAMU,CAAAA,MAHzB,EAIjCxB,IAAKG,CAAAA,GAAIW,CAAAA,KAAMW,CAAAA,GAJkB,CAAnC;AAcAzB,IAAKG,CAAAA,GAAIW,CAAAA,KAAMa,CAAAA,sBAAf,GAAwC,IAAxC;AAMA3B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMc,CAAAA,4BAAf,GAA8CC,QAAQ,EAAG;AACvD7B,MAAKG,CAAAA,GAAIW,CAAAA,KAAMa,CAAAA,sBAAf,GAAwC,EAAxC;AACA,OAAK,IAAIG,IAAI,CAAR,EAAWC,QAAAA,SAAhB,EAAuBA,KAAvB,GAA+B/B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMY,CAAAA,iBAAf,CAAiCI,CAAjC,CAA/B,EAAoEA,CAAA,EAApE,CAAyE;AACvE9B,QAAKG,CAAAA,GAAIW,CAAAA,KAAMa,CAAAA,sBAAf,CAAsCI,KAAMnB,CAAAA,KAA5C,CAAA,GAAqDmB,KAArD;AACA/B,QAAKG,CAAAA,GAAIW,CAAAA,KAAMa,CAAAA,sBAAf,CAAsCI,KAAMpB,CAAAA,IAA5C,CAAA,GAAoDoB,KAApD;AAFuE;AAFlB,CAAzD;AAcA/B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMkB,CAAAA,kBAAf,GAAoCC,QAAQ,CAACtB,IAAD,CAAO;AACjD,MAAI,CAACX,IAAKG,CAAAA,GAAIW,CAAAA,KAAMa,CAAAA,sBAApB;AACE3B,QAAKG,CAAAA,GAAIW,CAAAA,KAAMc,CAAAA,4BAAf,EAAA;AADF;AAIA,SAAO5B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMa,CAAAA,sBAAf,CAAsChB,IAAtC,CAAP,IAAsD,IAAtD;AALiD,CAAnD;AAcAX,IAAKG,CAAAA,GAAIW,CAAAA,KAAMoB,CAAAA,yBAAf,GAA2CC,QAAQ,CAACvB,KAAD,CAAQ;AACzD,MAAI,CAACZ,IAAKG,CAAAA,GAAIW,CAAAA,KAAMa,CAAAA,sBAApB;AACE3B,QAAKG,CAAAA,GAAIW,CAAAA,KAAMc,CAAAA,4BAAf,EAAA;AADF;AAIA,MAAIhB,KAAJ,IAAqCZ,IAAKG,CAAAA,GAAIW,CAAAA,KAAMa,CAAAA,sBAApD;AACE,WAAO3B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMa,CAAAA,sBAAf,CAAsCf,KAAtC,CAAP;AADF;AAIA,OAAK,IAAIkB,IAAI,CAAb,EAAgBA,CAAhB,GAAoB9B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMY,CAAAA,iBAAkBU,CAAAA,MAArD,EAA6D,EAAEN,CAA/D,CAAkE;AAChE,QAAIC,QAAQ/B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMY,CAAAA,iBAAf,CAAiCI,CAAjC,CAAZ;AACA,QAAIC,KAAMnB,CAAAA,KAAV,IAAmBA,KAAnB;AACE,aAAOmB,KAAP;AADF;AAFgE;AAMlE,SAAO,IAAP;AAfyD,CAA3D;AAoBkB,IAAA,8BAAA,QAAA,EAAA;CAAA;AAMhB,2BAAA,CAAA,SAAA,CAAA,OAAAM,GAAAA,QAAO,EAAG;CAAVA;AANFrC,IAAKG,CAAAA,GAAImC,CAAAA,MAAT,GAAkB,2BAAlB;AAgBAtC,IAAKG,CAAAA,GAAImC,CAAAA,MAAOxB,CAAAA,KAAhB,GAAwBd,IAAKG,CAAAA,GAAIW,CAAAA,KAAjC;AAWqB,IAAA,8BAInBJ,QAAW,CAAC6B,QAAD,CAAW;AAMpB,MAAKC,CAAAA,SAAL,GACI,MAAOD,SAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0CvC,IAAKG,CAAAA,GAAIsC,CAAAA,SAAUC,CAAAA,QADjE;AAQA,MAAKC,CAAAA,OAAL;AAQA,MAAKC,CAAAA,SAAL;AAOA,MAAKC,CAAAA,OAAL;AAEA,MAAKC,CAAAA,KAAL,EAAA;AA/BoB,CAJH;AA8CnB,2BAAA,CAAA,SAAA,CAAA,SAAAC,GAAAA,QAAS,CAAChB,KAAD,EAAQiB,GAAR,EAAaC,UAAb,CAAyB;AAChC,MAAI,CAAC,IAAKC,CAAAA,kBAAL,EAAL;AACE,WAAO,IAAIlD,IAAKG,CAAAA,GAAIgD,CAAAA,SAAb,CAAuBpB,KAAvB,EAA8BiB,GAA9B,EAAmCC,UAAnC,CAAP;AADF;AAGA,MAAMG,YAAY,IAAKR,CAAAA,SAAjBQ,GAA6B,CAA7BA,IAAkC,IAAKZ,CAAAA,SAA7C;AACA,MAAKI,CAAAA,SAAL,GAAiBQ,QAAjB;AACA,MAAI,IAAKP,CAAAA,OAAT,CAAkB;AAChB,QAAMQ,MAAM,IAAKV,CAAAA,OAAL,CAAaS,QAAb,CAAZ;AACAC,OAAIC,CAAAA,KAAJ,CAAUvB,KAAV,EAAiBiB,GAAjB,EAAsBC,UAAtB,CAAA;AACA,WAAOI,GAAP;AAHgB;AAKlB,MAAKR,CAAAA,OAAL,GAAeO,QAAf,IAA2B,IAAKZ,CAAAA,SAAhC,GAA4C,CAA5C;AACA,SAAO,IAAKG,CAAAA,OAAL,CAAaS,QAAb,CAAP,GACW,IAAIpD,IAAKG,CAAAA,GAAIgD,CAAAA,SAAb,CAAuBpB,KAAvB,EAA8BiB,GAA9B,EAAmCC,UAAnC,CADX;AAZgC,CAAlCF;AAuBA,2BAAA,CAAA,SAAA,CAAA,aAAAQ,GAAAA,QAAa,CAACC,IAAD,CAAO;AAClB,MAAMC,SAAS,IAAKd,CAAAA,OAApB;AAEA,MAAI,CAACc,MAAA,CAAO,CAAP,CAAL;AACE;AADF;AAGA,MAAML,WAAW,IAAKR,CAAAA,SAAtB;AACA,MAAId,IAAI,IAAKe,CAAAA,OAAL,GAAeO,QAAf,GAA0B,EAAlC;AACA,IAAG;AACDtB,KAAA,IAAKA,CAAL,GAAS,CAAT,IAAc,IAAKU,CAAAA,SAAnB;AACAgB,QAAA,CAAyCC,MAAA,CAAO3B,CAAP,CAAzC,CAAA;AAFC,GAAH,QAGSA,CAHT,KAGesB,QAHf;AARkB,CAApBG;AAiBA,2BAAA,CAAA,SAAA,CAAA,kBAAAL,GAAAA,QAAkB,EAAG;AACnB,SAAO,IAAKV,CAAAA,SAAZ,GAAwB,CAAxB;AADmB,CAArBU;AAOA,2BAAA,CAAA,SAAA,CAAA,MAAAQ,GAAAA,QAAM,EAAG;AACP,SAAO,IAAKb,CAAAA,OAAZ;AADO,CAATa;AAOA,2BAAA,CAAA,SAAA,CAAA,KAAAZ,GAAAA,QAAK,EAAG;AACN,MAAKH,CAAAA,OAAL,GAAe,IAAIgB,KAAJ,CAAU,IAAKnB,CAAAA,SAAf,CAAf;AACA,MAAKI,CAAAA,SAAL,GAAiB,EAAjB;AACA,MAAKC,CAAAA,OAAL,GAAe,KAAf;AAHM,CAARC;AApGF9C,IAAKG,CAAAA,GAAIsC,CAAAA,SAAT,GAAqB,2BAArB;AAgHAzC,IAAKG,CAAAA,GAAIsC,CAAAA,SAAUmB,CAAAA,SAAnB;AAOA5D,IAAKG,CAAAA,GAAIsC,CAAAA,SAAUC,CAAAA,QAAnB,GAA8B1C,IAAKM,CAAAA,MAAL,CAAY,+BAAZ,EAA6C,CAA7C,CAA9B;AAOAN,IAAKG,CAAAA,GAAIsC,CAAAA,SAAUoB,CAAAA,WAAnB,GAAiCC,QAAQ,EAAG;AAC1C,MAAI,CAAC9D,IAAKG,CAAAA,GAAIsC,CAAAA,SAAUmB,CAAAA,SAAxB;AACE5D,QAAKG,CAAAA,GAAIsC,CAAAA,SAAUmB,CAAAA,SAAnB,GACI,IAAI5D,IAAKG,CAAAA,GAAIsC,CAAAA,SAAb,CAAuBzC,IAAKG,CAAAA,GAAIsC,CAAAA,SAAUC,CAAAA,QAA1C,CADJ;AADF;AAIA,SAAO1C,IAAKG,CAAAA,GAAIsC,CAAAA,SAAUmB,CAAAA,SAA1B;AAL0C,CAA5C;AAaA5D,IAAKG,CAAAA,GAAIsC,CAAAA,SAAUS,CAAAA,kBAAnB,GAAwCa,QAAQ,EAAG;AACjD,SAAO/D,IAAKG,CAAAA,GAAIsC,CAAAA,SAAUoB,CAAAA,WAAnB,EAAiCX,CAAAA,kBAAjC,EAAP;AADiD,CAAnD;AAUqB,IAAA,8BAWnBxC,QAAW,CAACqB,KAAD,EAAQiB,GAAR,EAAaC,UAAb,EAAyBe,IAAzB,EAA+BC,cAA/B,CAA+C;AAMxD,MAAKC,CAAAA,MAAL;AAOA,MAAKC,CAAAA,WAAL;AAOA,MAAKC,CAAAA,IAAL;AAOA,MAAKC,CAAAA,KAAL;AAQA,MAAKC,CAAAA,eAAL;AAOA,MAAKC,CAAAA,UAAL,GAAkB,IAAlB;AAEA,MAAKjB,CAAAA,KAAL,CACIvB,KADJ,IACa/B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMC,CAAAA,GAD5B,EACiCiC,GADjC,EACsCC,UADtC,EACkDe,IADlD,EACwDC,cADxD,CAAA;AA5CwD,CAXvC;AAsEnB,2BAAA,CAAA,SAAA,CAAA,KAAAX,GAAAA,QAAK,CAACvB,KAAD,EAAQiB,GAAR,EAAaC,UAAb,EAAyBe,IAAzB,EAA+BC,cAA/B,CAA+C;AAClD,MAAKI,CAAAA,KAAL,GAAaL,IAAb,IAAqBhE,IAAKwE,CAAAA,GAAL,EAArB;AACA,MAAKN,CAAAA,MAAL,GAAcnC,KAAd;AACA,MAAKqC,CAAAA,IAAL,GAAYpB,GAAZ;AACA,MAAKmB,CAAAA,WAAL,GAAmBlB,UAAnB;AACA,MAAKsB,CAAAA,UAAL,GAAkB,IAAlB;AACA,MAAKD,CAAAA,eAAL,GAAuB,MAAOL,eAAP,KAA0B,QAA1B,GACnBA,cADmB,GAEnBjE,IAAKG,CAAAA,GAAIgD,CAAAA,SAAUsB,CAAAA,mBAFvB;AANkD,CAApDnB;AAiBA,2BAAA,CAAA,SAAA,CAAA,aAAAoB,GAAAA,QAAa,EAAG;AACd,SAAO,IAAKP,CAAAA,WAAZ;AADc,CAAhBO;AAUA,2BAAA,CAAA,SAAA,CAAA,aAAAC,GAAAA,QAAa,CAAChE,IAAD,CAAO;AAClB,MAAKwD,CAAAA,WAAL,GAAmBxD,IAAnB;AADkB,CAApBgE;AAUA,2BAAA,CAAA,SAAA,CAAA,YAAAC,GAAAA,QAAY,EAAG;AACb,SAAO,IAAKL,CAAAA,UAAZ;AADa,CAAfK;AASA,2BAAA,CAAA,SAAA,CAAA,YAAAC,GAAAA,QAAY,CAACC,SAAD,CAAY;AACtB,MAAKP,CAAAA,UAAL,GAAkBO,SAAlB;AADsB,CAAxBD;AASA,2BAAA,CAAA,SAAA,CAAA,QAAAE,GAAAA,QAAQ,EAAG;AACT,SAAO,IAAKb,CAAAA,MAAZ;AADS,CAAXa;AASA,2BAAA,CAAA,SAAA,CAAA,QAAAC,GAAAA,QAAQ,CAACjD,KAAD,CAAQ;AACd,MAAKmC,CAAAA,MAAL,GAAcnC,KAAd;AADc,CAAhBiD;AASA,2BAAA,CAAA,SAAA,CAAA,UAAAC,GAAAA,QAAU,EAAG;AACX,SAAO,IAAKb,CAAAA,IAAZ;AADW,CAAba;AAUA,2BAAA,CAAA,SAAA,CAAA,UAAAC,GAAAA,QAAU,CAAClC,GAAD,CAAM;AACd,MAAKoB,CAAAA,IAAL,GAAYpB,GAAZ;AADc,CAAhBkC;AASA,2BAAA,CAAA,SAAA,CAAA,SAAAC,GAAAA,QAAS,EAAG;AACV,SAAO,IAAKd,CAAAA,KAAZ;AADU,CAAZc;AASA,2BAAA,CAAA,SAAA,CAAA,SAAAC,GAAAA,QAAS,CAACpB,IAAD,CAAO;AACd,MAAKK,CAAAA,KAAL,GAAaL,IAAb;AADc,CAAhBoB;AAUA,2BAAA,CAAA,SAAA,CAAA,iBAAAC,GAAAA,QAAiB,EAAG;AAClB,SAAO,IAAKf,CAAAA,eAAZ;AADkB,CAApBe;AArLFrF,IAAKG,CAAAA,GAAIgD,CAAAA,SAAT,GAAqB,2BAArB;AAiMAnD,IAAKG,CAAAA,GAAIgD,CAAAA,SAAUsB,CAAAA,mBAAnB,GAAyC,CAAzC;AAOAzE,IAAKG,CAAAA,GAAImF,CAAAA,gBAAT;AAQ4B,IAAA,8BAK1B5E,QAAW,CAACC,IAAD,EAAO4E,MAAP,CAAsB;AAAfA,QAAA,GAAAA,MAAA,KAAA,SAAA,GAAS,IAAT,GAAAA,MAAA;AAOhB,MAAKxD,CAAAA,KAAL,GAAa,IAAb;AAOA,MAAKyD,CAAAA,QAAL,GAAgB,EAAhB;AAQA,MAAKD,CAAAA,MAAL,GAAcA,MAAd,IAAwB,IAAxB;AAQA,MAAKE,CAAAA,QAAL,GAAgB,EAAhB;AAMA,MAAKC,CAAAA,MAAL,GAA+C,CAACrD,QAASA,QAAA,EAAM1B;AAAAA,WAAAA,IAAAA;AAAAA,GAAhB,CAA/C;AApC+B,CALP;AAgD1B,2BAAA,CAAA,SAAA,CAAA,iBAAAgF,GAAAA,QAAiB,EAAG;AAClB,MAAI,IAAK5D,CAAAA,KAAT;AACE,WAAO,IAAKA,CAAAA,KAAZ;AADF;AAEO,QAAI,IAAKwD,CAAAA,MAAT;AACL,aAAO,IAAKA,CAAAA,MAAOI,CAAAA,iBAAZ,EAAP;AADK;AAFP;AAKA3F,MAAK4F,CAAAA,OAAQC,CAAAA,IAAb,CAAkB,+BAAlB,CAAA;AACA,SAAO7F,IAAKG,CAAAA,GAAIW,CAAAA,KAAMC,CAAAA,GAAtB;AAPkB,CAApB4E;AAiBA,2BAAA,CAAA,SAAA,CAAA,OAAAG,GAAAA,QAAO,CAACC,SAAD,CAAY;AACjB,MAAIC,SAAS,IAAb;AACA,SAAOA,MAAP,CAAe;AACbA,UAAOR,CAAAA,QAASS,CAAAA,OAAhB,CAAwB,QAAA,CAAAC,OAAA,CAAW;AACjCA,aAAA,CAAQH,SAAR,CAAA;AADiC,KAAnC,CAAA;AAGAC,UAAA,GAASA,MAAOT,CAAAA,MAAhB;AAJa;AAFE,CAAnBO;AAjEF9F,IAAKG,CAAAA,GAAIgG,CAAAA,gBAAT,GAA4B,2BAA5B;AAoFuB,IAAA,8BACrBzF,QAAW,EAAG;AAKZ,MAAK0F,CAAAA,OAAL,GAAe,EAAf;AAGA,MAAMC,uBACF,IAAIrG,IAAKG,CAAAA,GAAIgG,CAAAA,gBAAb,CAA8BnG,IAAKG,CAAAA,GAAIM,CAAAA,gBAAvC,CADJ;AAEA4F,sBAAqBtE,CAAAA,KAArB,GAA6B/B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMO,CAAAA,MAA5C;AACA,MAAK+E,CAAAA,OAAL,CAAapG,IAAKG,CAAAA,GAAIM,CAAAA,gBAAtB,CAAA,GAA0C4F,oBAA1C;AAXY,CADO;AAuBrB,2BAAA,CAAA,SAAA,CAAA,mBAAAC,GAAAA,QAAmB,CAAC3F,IAAD,EAAOoB,KAAP,CAAc;AAC/B,MAAMwE,QAAQ,IAAKH,CAAAA,OAAL,CAAazF,IAAb,CAAd;AACA,MAAI4F,KAAJ,CAAW;AACT,QAAIxE,KAAJ,KAAcyE,SAAd;AACED,WAAMxE,CAAAA,KAAN,GAAcA,KAAd;AADF;AAGA,WAAOwE,KAAP;AAJS,GAAX,KAKO;AAIL,QAAME,eAAe9F,IAAK+F,CAAAA,WAAL,CAAiB,GAAjB,CAArB;AACA,QAAMC,aAAahG,IAAKiG,CAAAA,MAAL,CAAY,CAAZ,EAAeH,YAAf,CAAnB;AACA,QAAMI,yBAAyB,IAAKP,CAAAA,mBAAL,CAAyBK,UAAzB,CAA/B;AAGA,QAAMG,mBACF,IAAI9G,IAAKG,CAAAA,GAAIgG,CAAAA,gBAAb,CAA8BxF,IAA9B,EAAoCkG,sBAApC,CADJ;AAEA,QAAKT,CAAAA,OAAL,CAAazF,IAAb,CAAA,GAAqBmG,gBAArB;AACAD,0BAAuBpB,CAAAA,QAASsB,CAAAA,IAAhC,CAAqCD,gBAArC,CAAA;AAEA,QAAI/E,KAAJ,KAAcyE,SAAd;AACEM,sBAAiB/E,CAAAA,KAAjB,GAAyBA,KAAzB;AADF;AAIA,WAAO+E,gBAAP;AAlBK;AAPwB,CAAjCR;AAiCA,2BAAA,CAAA,SAAA,CAAA,aAAAU,GAAAA,QAAa,EAAG;AAAA,MAAA,eAAA,IAAA;AACd,SAAOC,MAAOC,CAAAA,IAAP,CAAY,IAAKd,CAAAA,OAAjB,CACFe,CAAAA,GADE,CACE,QAAA,CAAAlE,UAAA,CAAuCyC;AAAAA,WAAzBA,YAAKU,CAAAA,OAALV,CAAazC,UAAbyC,CAAyBA,CAAAA,MAAAA;AAAAA,GADzC,CAAP;AADc,CAAhBsB;AAxDFhH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAT,GAAuB,2BAAvB;AAkEApH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYvD,CAAAA,WAArB,GAAmCwD,QAAQ,EAAG;AAC5C,MAAI,CAACrH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYxD,CAAAA,SAA1B;AACE5D,QAAKG,CAAAA,GAAIiH,CAAAA,WAAYxD,CAAAA,SAArB,GAAiC,IAAI5D,IAAKG,CAAAA,GAAIiH,CAAAA,WAA9C;AADF;AAGA,SAA6CpH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYxD,CAAAA,SAAlE;AAJ4C,CAA9C;AAWA5D,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYxD,CAAAA,SAArB;AAmBA5D,IAAKG,CAAAA,GAAImH,CAAAA,SAAT,GAAqBC,QAAQ,CAAC5G,IAAD,EAAOoB,KAAP,CAAc;AACzC,MAAI/B,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,CAAsB;AACpB,QAAMmH,cACFxH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYvD,CAAAA,WAArB,EAAmCyC,CAAAA,mBAAnC,CAAuD3F,IAAvD,EAA6DoB,KAA7D,CADJ;AAEA,WAAOyF,WAAY9B,CAAAA,MAAnB;AAHoB,GAAtB;AAKE,WAAO,IAAP;AALF;AADyC,CAA3C;AAiBA1F,IAAKG,CAAAA,GAAIsH,CAAAA,aAAT,GAAyBC,QAAQ,EAAG;AAClC,MAAI1H,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,CAAsB;AACpB,QAAMmH,cAAcxH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYvD,CAAAA,WAArB,EAAmCyC,CAAAA,mBAAnC,CAChBtG,IAAKG,CAAAA,GAAIM,CAAAA,gBADO,CAApB;AAEA,WAAO+G,WAAY9B,CAAAA,MAAnB;AAHoB,GAAtB;AAKE,WAAO,IAAP;AALF;AADkC,CAApC;AAmBA1F,IAAKG,CAAAA,GAAIwH,CAAAA,UAAT,GAAsBC,QAAQ,CAAClC,MAAD,EAASQ,OAAT,CAAkB;AAC9C,MAAIlG,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB,CAAgC;AAC9B,QAAM8B,cAAcxH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYvD,CAAAA,WAArB,EAAmCyC,CAAAA,mBAAnC,CAChBZ,MAAOrD,CAAAA,OAAP,EADgB,CAApB;AAEAmF,eAAYhC,CAAAA,QAASuB,CAAAA,IAArB,CAA0Bb,OAA1B,CAAA;AAH8B;AADc,CAAhD;AAiBAlG,IAAKG,CAAAA,GAAI0H,CAAAA,aAAT,GAAyBC,QAAQ,CAACpC,MAAD,EAASQ,OAAT,CAAkB;AACjD,MAAIlG,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB,CAAgC;AAC9B,QAAM8B,cAAcxH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYvD,CAAAA,WAArB,EAAmCyC,CAAAA,mBAAnC,CAChBZ,MAAOrD,CAAAA,OAAP,EADgB,CAApB;AAEA,QAAM0F,iBAAiBP,WAAYhC,CAAAA,QAASwC,CAAAA,OAArB,CAA6B9B,OAA7B,CAAvB;AACA,QAAI6B,cAAJ,KAAuB,EAAvB,CAA2B;AACzBP,iBAAYhC,CAAAA,QAASyC,CAAAA,MAArB,CAA4BF,cAA5B,EAA4C,CAA5C,CAAA;AACA,aAAO,IAAP;AAFyB;AAJG;AAShC,SAAO,KAAP;AAViD,CAAnD;AAwBA/H,IAAKG,CAAAA,GAAI6E,CAAAA,QAAT,GAAoBkD,QAAQ,CAACxC,MAAD,EAAS3D,KAAT,CAAgB;AAC1C,MAAI/B,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB,CAAgC;AAC9B,QAAM8B,cAAcxH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYvD,CAAAA,WAArB,EAAmCyC,CAAAA,mBAAnC,CAChBZ,MAAOrD,CAAAA,OAAP,EADgB,CAApB;AAEAmF,eAAYzF,CAAAA,KAAZ,GAAoBA,KAApB;AAH8B;AADU,CAA5C;AAmBA/B,IAAKG,CAAAA,GAAI4E,CAAAA,QAAT,GAAoBoD,QAAQ,CAACzC,MAAD,CAAS;AACnC,MAAI1F,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB,CAAgC;AAC9B,QAAM8B,cAAcxH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYvD,CAAAA,WAArB,EAAmCyC,CAAAA,mBAAnC,CAChBZ,MAAOrD,CAAAA,OAAP,EADgB,CAApB;AAEA,WAAOmF,WAAYzF,CAAAA,KAAnB;AAH8B;AAKhC,SAAO,IAAP;AANmC,CAArC;AAeA/B,IAAKG,CAAAA,GAAIwF,CAAAA,iBAAT,GAA6ByC,QAAQ,CAAC1C,MAAD,CAAS;AAC5C,MAAI1F,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB,CAAgC;AAC9B,QAAM8B,cAAcxH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYvD,CAAAA,WAArB,EAAmCyC,CAAAA,mBAAnC,CAChBZ,MAAOrD,CAAAA,OAAP,EADgB,CAApB;AAEA,WAAOmF,WAAY7B,CAAAA,iBAAZ,EAAP;AAH8B;AAKhC,SAAO3F,IAAKG,CAAAA,GAAIW,CAAAA,KAAMC,CAAAA,GAAtB;AAN4C,CAA9C;AAkBAf,IAAKG,CAAAA,GAAIkI,CAAAA,UAAT,GAAsBC,QAAQ,CAAC5C,MAAD,EAAS3D,KAAT,CAAgB;AAC5C,MAAI/B,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB,IAAkC3D,KAAlC;AACE,WAAOA,KAAMnB,CAAAA,KAAb,IAAsBZ,IAAKG,CAAAA,GAAIwF,CAAAA,iBAAT,CAA2BD,MAA3B,CAAmC9E,CAAAA,KAAzD;AADF;AAGA,SAAO,KAAP;AAJ4C,CAA9C;AAYAZ,IAAKG,CAAAA,GAAI6G,CAAAA,aAAT,GAAyBuB,QAAQ,EAAG;AAClC,MAAIvI,IAAKG,CAAAA,GAAIE,CAAAA,OAAb;AACE,WAAOL,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYvD,CAAAA,WAArB,EAAmCmD,CAAAA,aAAnC,EAAP;AADF;AAGA,SAAO,EAAP;AAJkC,CAApC;AAoBAhH,IAAKG,CAAAA,GAAIqI,CAAAA,YAAT,GAAwBC,QAAQ,CAAC/C,MAAD,EAAS3D,KAAT,EAAgBiB,GAAhB,EAAqB8B,SAArB,CAAgC;AAC9D,MAAMiB,YAAY/F,IAAKG,CAAAA,GAAIsC,CAAAA,SAAUoB,CAAAA,WAAnB,EAAiCd,CAAAA,SAAjC,CACdhB,KADc,IACL/B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMC,CAAAA,GADV,EACeiC,GADf,EACoB0C,MAAOrD,CAAAA,OAAP,EADpB,CAAlB;AAEA,MAAIyC,SAAJ;AACEiB,aAAUlB,CAAAA,YAAV,CAAuBC,SAAvB,CAAA;AADF;AAGA,SAAOiB,SAAP;AAN8D,CAAhE;AAkBA/F,IAAKG,CAAAA,GAAIuI,CAAAA,gBAAT,GAA4BC,QAAQ,CAACjD,MAAD,EAASK,SAAT,CAAoB;AACtD,MAAI/F,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB,IACI1F,IAAKG,CAAAA,GAAIkI,CAAAA,UAAT,CAAoB3C,MAApB,EAA4BK,SAAUhB,CAAAA,QAAV,EAA5B,CADJ,CACuD;AACrD,QAAMyC,cAAcxH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYvD,CAAAA,WAArB,EAAmCyC,CAAAA,mBAAnC,CAChBZ,MAAOrD,CAAAA,OAAP,EADgB,CAApB;AAEAmF,eAAY1B,CAAAA,OAAZ,CAAoBC,SAApB,CAAA;AAHqD;AAFD,CAAxD;AAqBA/F,IAAKG,CAAAA,GAAIA,CAAAA,GAAT,GAAeyI,QAAQ,CAAClD,MAAD,EAAS3D,KAAT,EAAgBiB,GAAhB,EAAqB8B,SAArB,CAAgC;AACrD,MAAI9E,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB,IAAkC1F,IAAKG,CAAAA,GAAIkI,CAAAA,UAAT,CAAoB3C,MAApB,EAA4B3D,KAA5B,CAAlC,CAAsE;AACpEA,SAAA,GAAQA,KAAR,IAAiB/B,IAAKG,CAAAA,GAAIW,CAAAA,KAAMC,CAAAA,GAAhC;AACA,QAAMyG,cAAcxH,IAAKG,CAAAA,GAAIiH,CAAAA,WAAYvD,CAAAA,WAArB,EAAmCyC,CAAAA,mBAAnC,CAChBZ,MAAOrD,CAAAA,OAAP,EADgB,CAApB;AAGA,QAAI,MAAOW,IAAX,KAAmB,UAAnB;AACEA,SAAA,GAAMA,GAAA,EAAN;AADF;AAGA,QAAM+C,YAAY/F,IAAKG,CAAAA,GAAIsC,CAAAA,SAAUoB,CAAAA,WAAnB,EAAiCd,CAAAA,SAAjC,CACdhB,KADc,EACPiB,GADO,EACF0C,MAAOrD,CAAAA,OAAP,EADE,CAAlB;AAEA,QAAIyC,SAAJ;AACEiB,eAAUlB,CAAAA,YAAV,CAAuBC,SAAvB,CAAA;AADF;AAIA0C,eAAY1B,CAAAA,OAAZ,CAAoBC,SAApB,CAAA;AAdoE;AADjB,CAAvD;AA6BA/F,IAAKG,CAAAA,GAAI0I,CAAAA,KAAT,GAAiBC,QAAQ,CAACpD,MAAD,EAAS1C,GAAT,EAAc8B,SAAd,CAAyB;AAChD,MAAI9E,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB;AACE1F,QAAKG,CAAAA,GAAIA,CAAAA,GAAT,CAAauF,MAAb,EAAqB1F,IAAKG,CAAAA,GAAIW,CAAAA,KAAMI,CAAAA,MAApC,EAA4C8B,GAA5C,EAAiD8B,SAAjD,CAAA;AADF;AADgD,CAAlD;AAgBA9E,IAAKG,CAAAA,GAAI4I,CAAAA,OAAT,GAAmBC,QAAQ,CAACtD,MAAD,EAAS1C,GAAT,EAAc8B,SAAd,CAAyB;AAClD,MAAI9E,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB;AACE1F,QAAKG,CAAAA,GAAIA,CAAAA,GAAT,CAAauF,MAAb,EAAqB1F,IAAKG,CAAAA,GAAIW,CAAAA,KAAMK,CAAAA,OAApC,EAA6C6B,GAA7C,EAAkD8B,SAAlD,CAAA;AADF;AADkD,CAApD;AAgBA9E,IAAKG,CAAAA,GAAI8I,CAAAA,IAAT,GAAgBC,QAAQ,CAACxD,MAAD,EAAS1C,GAAT,EAAc8B,SAAd,CAAyB;AAC/C,MAAI9E,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB;AACE1F,QAAKG,CAAAA,GAAIA,CAAAA,GAAT,CAAauF,MAAb,EAAqB1F,IAAKG,CAAAA,GAAIW,CAAAA,KAAMM,CAAAA,IAApC,EAA0C4B,GAA1C,EAA+C8B,SAA/C,CAAA;AADF;AAD+C,CAAjD;AAgBA9E,IAAKG,CAAAA,GAAIgJ,CAAAA,IAAT,GAAgBC,QAAQ,CAAC1D,MAAD,EAAS1C,GAAT,EAAc8B,SAAd,CAAyB;AAC/C,MAAI9E,IAAKG,CAAAA,GAAIE,CAAAA,OAAb,IAAwBqF,MAAxB;AACE1F,QAAKG,CAAAA,GAAIA,CAAAA,GAAT,CAAauF,MAAb,EAAqB1F,IAAKG,CAAAA,GAAIW,CAAAA,KAAMQ,CAAAA,IAApC,EAA0C0B,GAA1C,EAA+C8B,SAA/C,CAAA;AADF;AAD+C,CAAjD;;",
"sources":["goog/log/log.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Basic strippable logging definitions.\n * @see http://go/closurelogging\n */\n\ngoog.provide('goog.log');\ngoog.provide('goog.log.Level');\ngoog.provide('goog.log.LogBuffer');\ngoog.provide('goog.log.LogRecord');\ngoog.provide('goog.log.Logger');\n\ngoog.require('goog.asserts');\ngoog.require('goog.debug');\n\n\n/**\n * A message value that can be handled by a goog.log.Logger.\n *\n * Functions are treated like callbacks, but are only called when the event's\n * log level is enabled. This is useful for logging messages that are expensive\n * to construct.\n *\n * @typedef {string|function(): string}\n */\ngoog.log.Loggable;\n\n/** @define {boolean} Whether logging is enabled. */\ngoog.log.ENABLED = goog.define('goog.log.ENABLED', goog.debug.LOGGING_ENABLED);\n\n/** @const */\ngoog.log.ROOT_LOGGER_NAME = '';\n\n\n// TODO(user): Make goog.log.Level an enum.\n/**\n * The goog.log.Level class defines a set of standard logging levels that\n * can be used to control logging output.  The logging goog.log.Level objects\n * are ordered and are specified by ordered integers.  Enabling logging\n * at a given level also enables logging at all higher levels.\n * <p>\n * Clients should normally use the predefined goog.log.Level constants such\n * as goog.log.Level.SEVERE.\n * <p>\n * The levels in descending order are:\n * <ul>\n * <li>SEVERE (highest value)\n * <li>WARNING\n * <li>INFO\n * <li>CONFIG\n * <li>FINE\n * <li>FINER\n * <li>FINEST  (lowest value)\n * </ul>\n * In addition there is a level OFF that can be used to turn\n * off logging, and a level ALL that can be used to enable\n * logging of all messages.\n *\n * @final\n */\ngoog.log.Level = class Level {\n  /**\n   * @param {string} name The name of the level.\n   * @param {number} value The numeric value of the level.\n   */\n  constructor(name, value) {\n    /**\n     * The name of the level\n     * @type {string}\n     * @const\n     */\n    this.name = name;\n\n    /**\n     * The numeric value of the level\n     * @type {number}\n     */\n    this.value = value;\n  }\n\n  /**\n   * @return {string} String representation of the logger level.\n   * @override\n   */\n  toString() {\n    return this.name;\n  }\n};\n\n\n/**\n * OFF is a special level that can be used to turn off logging.\n * This level is initialized to <CODE>Infinity</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.OFF = new goog.log.Level('OFF', Infinity);\n\n\n/**\n * SHOUT is a message level for extra debugging loudness.\n * This level is initialized to <CODE>1200</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.SHOUT = new goog.log.Level('SHOUT', 1200);\n\n\n/**\n * SEVERE is a message level indicating a serious failure.\n * This level is initialized to <CODE>1000</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.SEVERE = new goog.log.Level('SEVERE', 1000);\n\n\n/**\n * WARNING is a message level indicating a potential problem.\n * This level is initialized to <CODE>900</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.WARNING = new goog.log.Level('WARNING', 900);\n\n\n/**\n * INFO is a message level for informational messages.\n * This level is initialized to <CODE>800</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.INFO = new goog.log.Level('INFO', 800);\n\n\n/**\n * CONFIG is a message level for static configuration messages.\n * This level is initialized to <CODE>700</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.CONFIG = new goog.log.Level('CONFIG', 700);\n\n\n/**\n * FINE is a message level providing tracing information.\n * This level is initialized to <CODE>500</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.FINE = new goog.log.Level('FINE', 500);\n\n\n/**\n * FINER indicates a fairly detailed tracing message.\n * This level is initialized to <CODE>400</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.FINER = new goog.log.Level('FINER', 400);\n\n/**\n * FINEST indicates a highly detailed tracing message.\n * This level is initialized to <CODE>300</CODE>.\n * @type {!goog.log.Level}\n */\n\ngoog.log.Level.FINEST = new goog.log.Level('FINEST', 300);\n\n\n/**\n * ALL indicates that all messages should be logged.\n * This level is initialized to <CODE>0</CODE>.\n * @type {!goog.log.Level}\n */\ngoog.log.Level.ALL = new goog.log.Level('ALL', 0);\n\n\n/**\n * The predefined levels.\n * @type {!Array<!goog.log.Level>}\n * @final\n */\ngoog.log.Level.PREDEFINED_LEVELS = [\n  goog.log.Level.OFF, goog.log.Level.SHOUT, goog.log.Level.SEVERE,\n  goog.log.Level.WARNING, goog.log.Level.INFO, goog.log.Level.CONFIG,\n  goog.log.Level.FINE, goog.log.Level.FINER, goog.log.Level.FINEST,\n  goog.log.Level.ALL\n];\n\n\n/**\n * A lookup map used to find the level object based on the name or value of\n * the level object.\n * @type {?Object}\n * @private\n */\ngoog.log.Level.predefinedLevelsCache_ = null;\n\n\n/**\n * Creates the predefined levels cache and populates it.\n */\ngoog.log.Level.createPredefinedLevelsCache_ = function() {\n  goog.log.Level.predefinedLevelsCache_ = {};\n  for (let i = 0, level; level = goog.log.Level.PREDEFINED_LEVELS[i]; i++) {\n    goog.log.Level.predefinedLevelsCache_[level.value] = level;\n    goog.log.Level.predefinedLevelsCache_[level.name] = level;\n  }\n};\n\n\n/**\n * Gets the predefined level with the given name.\n * @param {string} name The name of the level.\n * @return {!goog.log.Level|null} The level, or null if none found.\n */\ngoog.log.Level.getPredefinedLevel = function(name) {\n  if (!goog.log.Level.predefinedLevelsCache_) {\n    goog.log.Level.createPredefinedLevelsCache_();\n  }\n\n  return goog.log.Level.predefinedLevelsCache_[name] || null;\n};\n\n\n/**\n * Gets the highest predefined level <= #value.\n * @param {number} value goog.log.Level value.\n * @return {!goog.log.Level|null} The level, or null if none found.\n */\ngoog.log.Level.getPredefinedLevelByValue = function(value) {\n  if (!goog.log.Level.predefinedLevelsCache_) {\n    goog.log.Level.createPredefinedLevelsCache_();\n  }\n\n  if (value in /** @type {!Object} */ (goog.log.Level.predefinedLevelsCache_)) {\n    return goog.log.Level.predefinedLevelsCache_[value];\n  }\n\n  for (let i = 0; i < goog.log.Level.PREDEFINED_LEVELS.length; ++i) {\n    let level = goog.log.Level.PREDEFINED_LEVELS[i];\n    if (level.value <= value) {\n      return level;\n    }\n  }\n  return null;\n};\n\n\n/** @interface */\ngoog.log.Logger = class Logger {\n  /**\n   * Gets the name of the Logger.\n   * @return {string}\n   * @public\n   */\n  getName() {}\n};\n\n\n/**\n * Only for compatibility with goog.debug.Logger.Level, which is how many users\n * access Level.\n * TODO(user): Remove these definitions.\n * @final\n */\ngoog.log.Logger.Level = goog.log.Level;\n\n\n/**\n * A buffer for log records. The purpose of this is to improve\n * logging performance by re-using old objects when the buffer becomes full and\n * to eliminate the need for each app to implement their own log buffer. The\n * disadvantage to doing this is that log handlers cannot maintain references to\n * log records and expect that they are not overwriten at a later point.\n * @final\n */\ngoog.log.LogBuffer = class LogBuffer {\n  /**\n   * @param {number=} capacity The capacity of this LogBuffer instance.\n   */\n  constructor(capacity) {\n    /**\n     * The buffer's capacity.\n     * @type {number}\n     * @private\n     */\n    this.capacity_ =\n        typeof capacity === 'number' ? capacity : goog.log.LogBuffer.CAPACITY;\n\n    /**\n     * The array to store the records.\n     * @type {!Array<!goog.log.LogRecord|undefined>}\n     * @private\n     */\n    this.buffer_;\n\n    /**\n     * The index of the most recently added record, or -1 if there are no\n     * records.\n     * @type {number}\n     * @private\n     */\n    this.curIndex_;\n\n    /**\n     * Whether the buffer is at capacity.\n     * @type {boolean}\n     * @private\n     */\n    this.isFull_;\n\n    this.clear();\n  }\n\n\n  /**\n   * Adds a log record to the buffer, possibly overwriting the oldest record.\n   * @param {!goog.log.Level} level One of the level identifiers.\n   * @param {string} msg The string message.\n   * @param {string} loggerName The name of the source logger.\n   * @return {!goog.log.LogRecord} The log record.\n   */\n  addRecord(level, msg, loggerName) {\n    if (!this.isBufferingEnabled()) {\n      return new goog.log.LogRecord(level, msg, loggerName);\n    }\n    const curIndex = (this.curIndex_ + 1) % this.capacity_;\n    this.curIndex_ = curIndex;\n    if (this.isFull_) {\n      const ret = this.buffer_[curIndex];\n      ret.reset(level, msg, loggerName);\n      return ret;\n    }\n    this.isFull_ = curIndex == this.capacity_ - 1;\n    return this.buffer_[curIndex] =\n               new goog.log.LogRecord(level, msg, loggerName);\n  }\n\n  /**\n   * Calls the given function for each buffered log record, starting with the\n   * oldest one.\n   * TODO(user): Make this a [Symbol.iterator] once all usages of\n   * goog.debug.LogBuffer can be deleted.\n   * @param {!goog.log.LogRecordHandler} func The function to call.\n   */\n  forEachRecord(func) {\n    const buffer = this.buffer_;\n    // Corner case: no records.\n    if (!buffer[0]) {\n      return;\n    }\n    const curIndex = this.curIndex_;\n    let i = this.isFull_ ? curIndex : -1;\n    do {\n      i = (i + 1) % this.capacity_;\n      func(/** @type {!goog.log.LogRecord} */ (buffer[i]));\n    } while (i !== curIndex);\n  }\n\n  /**\n   * @return {boolean} Whether the log buffer is enabled.\n   */\n  isBufferingEnabled() {\n    return this.capacity_ > 0;\n  }\n\n  /**\n   * @return {boolean} Return whether the log buffer is full.\n   */\n  isFull() {\n    return this.isFull_;\n  }\n\n  /**\n   * Removes all buffered log records.\n   */\n  clear() {\n    this.buffer_ = new Array(this.capacity_);\n    this.curIndex_ = -1;\n    this.isFull_ = false;\n  }\n};\n\n\n/**\n * @type {!goog.log.LogBuffer|undefined}\n * @private\n */\ngoog.log.LogBuffer.instance_;\n\n\n/**\n * @define {number} The number of log records to buffer. 0 means disable\n * buffering.\n */\ngoog.log.LogBuffer.CAPACITY = goog.define('goog.debug.LogBuffer.CAPACITY', 0);\n\n\n/**\n * A static method that always returns the same instance of goog.log.LogBuffer.\n * @return {!goog.log.LogBuffer} The goog.log.LogBuffer singleton instance.\n */\ngoog.log.LogBuffer.getInstance = function() {\n  if (!goog.log.LogBuffer.instance_) {\n    goog.log.LogBuffer.instance_ =\n        new goog.log.LogBuffer(goog.log.LogBuffer.CAPACITY);\n  }\n  return goog.log.LogBuffer.instance_;\n};\n\n\n/**\n * Whether the log buffer is enabled.\n * @return {boolean}\n */\ngoog.log.LogBuffer.isBufferingEnabled = function() {\n  return goog.log.LogBuffer.getInstance().isBufferingEnabled();\n};\n\n\n/**\n * LogRecord objects are used to pass logging requests between the logging\n * framework and individual log handlers. These objects should not be\n * constructed or reset by application code.\n */\ngoog.log.LogRecord = class LogRecord {\n  /**\n   * @param {?goog.log.Level} level One of the level identifiers.\n   * @param {string} msg The string message.\n   * @param {string} loggerName The name of the source logger.\n   * @param {number=} time Time this log record was created if other than\n   *     now. If 0, we use #goog.now.\n   * @param {number=} sequenceNumber Sequence number of this log record.\n   *     This should only be passed in when restoring a log record from\n   *     persistence.\n   */\n  constructor(level, msg, loggerName, time, sequenceNumber) {\n    /**\n     * Level of the LogRecord.\n     * @type {!goog.log.Level}\n     * @private\n     */\n    this.level_;\n\n    /**\n     * Name of the logger that created the record.\n     * @type {string}\n     * @private\n     */\n    this.loggerName_;\n\n    /**\n     * Message associated with the record\n     * @type {string}\n     * @private\n     */\n    this.msg_;\n\n    /**\n     * Time the LogRecord was created.\n     * @type {number}\n     * @private\n     */\n    this.time_;\n\n    /**\n     * Sequence number for the LogRecord. Each record has a unique sequence\n     * number that is greater than all log records created before it.\n     * @type {number}\n     * @private\n     */\n    this.sequenceNumber_;\n\n    /**\n     * Exception associated with the record\n     * @type {?Object}\n     * @private\n     */\n    this.exception_ = null;\n\n    this.reset(\n        level || goog.log.Level.OFF, msg, loggerName, time, sequenceNumber);\n  };\n\n  /**\n   * Sets all fields of the log record.\n   * @param {!goog.log.Level} level One of the level identifiers.\n   * @param {string} msg The string message.\n   * @param {string} loggerName The name of the source logger.\n   * @param {number=} time Time this log record was created if other than\n   *     now. If 0, we use #goog.now.\n   * @param {number=} sequenceNumber Sequence number of this log record.\n   *     This should only be passed in when restoring a log record from\n   *     persistence.\n   */\n  reset(level, msg, loggerName, time, sequenceNumber) {\n    this.time_ = time || goog.now();\n    this.level_ = level;\n    this.msg_ = msg;\n    this.loggerName_ = loggerName;\n    this.exception_ = null;\n    this.sequenceNumber_ = typeof sequenceNumber === 'number' ?\n        sequenceNumber :\n        goog.log.LogRecord.nextSequenceNumber_;\n  };\n\n\n  /**\n   * Gets the source Logger's name.\n   *\n   * @return {string} source logger name (may be null).\n   */\n  getLoggerName() {\n    return this.loggerName_;\n  };\n\n\n  /**\n   * Sets the source Logger's name.\n   *\n   * @param {string} name The logger name.\n   */\n  setLoggerName(name) {\n    this.loggerName_ = name;\n  };\n\n\n  /**\n   * Gets the exception that is part of the log record.\n   *\n   * @return {?Object} the exception.\n   */\n  getException() {\n    return this.exception_;\n  };\n\n\n  /**\n   * Sets the exception that is part of the log record.\n   * @param {?Object} exception the exception.\n   */\n  setException(exception) {\n    this.exception_ = exception;\n  };\n\n\n  /**\n   * Gets the logging message level, for example Level.SEVERE.\n   * @return {!goog.log.Level} the logging message level.\n   */\n  getLevel() {\n    return this.level_;\n  };\n\n\n  /**\n   * Sets the logging message level, for example Level.SEVERE.\n   * @param {!goog.log.Level} level the logging message level.\n   */\n  setLevel(level) {\n    this.level_ = level;\n  };\n\n\n  /**\n   * Gets the \"raw\" log message, before localization or formatting.\n   * @return {string} the raw message string.\n   */\n  getMessage() {\n    return this.msg_;\n  };\n\n\n  /**\n   * Sets the \"raw\" log message, before localization or formatting.\n   *\n   * @param {string} msg the raw message string.\n   */\n  setMessage(msg) {\n    this.msg_ = msg;\n  };\n\n\n  /**\n   * Gets event time in milliseconds since 1970.\n   * @return {number} event time in millis since 1970.\n   */\n  getMillis() {\n    return this.time_;\n  };\n\n\n  /**\n   * Sets event time in milliseconds since 1970.\n   * @param {number} time event time in millis since 1970.\n   */\n  setMillis(time) {\n    this.time_ = time;\n  };\n\n\n  /**\n   * Gets the sequence number. Sequence numbers are normally assigned when a\n   * LogRecord is constructed or reset in incrementally increasing order.\n   * @return {number}\n   */\n  getSequenceNumber() {\n    return this.sequenceNumber_;\n  };\n};\n\n\n/**\n * A sequence counter for assigning increasing sequence numbers to LogRecord\n * objects.\n * @type {number}\n * @private\n */\ngoog.log.LogRecord.nextSequenceNumber_ = 0;\n\n\n/**\n * A type that describes a function that handles logs.\n * @typedef {function(!goog.log.LogRecord): ?}\n */\ngoog.log.LogRecordHandler;\n\n\n/**\n * A LogRegistryEntry contains data about a Logger.\n * @package\n * @final\n */\ngoog.log.LogRegistryEntry = class LogRegistryEntry {\n  /**\n   * @param {string} name\n   * @param {!goog.log.LogRegistryEntry|null=} parent\n   */\n  constructor(name, parent = null) {\n    /**\n     * The minimum log level that a message must be for it to be logged by the\n     * Logger corresponding to this LogRegistryEntry. If null, the parent's\n     * log level is used instead.\n     * @type {?goog.log.Level}\n     */\n    this.level = null;\n\n    /**\n     * A list of functions that will be called when the Logger corresponding to\n     * this LogRegistryEntry is used to log a message.\n     * @type {!Array<!goog.log.LogRecordHandler>}\n     */\n    this.handlers = [];\n\n    /**\n     * A reference to LogRegistryEntry objects that correspond to the direct\n     * ancestor of the Logger represented by this LogRegistryEntry object\n     * (via name, treated as a dot-separated namespace).\n     * @type {!goog.log.LogRegistryEntry|null}\n     */\n    this.parent = parent || null;\n\n    /**\n     * A list of references to LogRegistryEntry objects that correspond to the\n     * direct descendants of the Logger represented by this LogRegistryEntry\n     * object (via name, treated as a dot-separated namespace).\n     * @type {!Array<!goog.log.LogRegistryEntry>}\n     */\n    this.children = [];\n\n    /**\n     * A reference to the Logger itself.\n     * @type {!goog.log.Logger}\n     */\n    this.logger = /** @type {!goog.log.Logger} */ ({getName: () => name});\n  }\n\n  /**\n   * Returns the effective level of the logger based on its ancestors' levels.\n   * @return {!goog.log.Level} The level.\n   */\n  getEffectiveLevel() {\n    if (this.level) {\n      return this.level;\n    } else if (this.parent) {\n      return this.parent.getEffectiveLevel();\n    }\n    goog.asserts.fail('Root logger has no level set.');\n    return goog.log.Level.OFF;\n  };\n\n  /**\n   * Calls the log handlers associated with this Logger, followed by those of\n   * its parents, etc. until the root Logger's associated log handlers are\n   * called.\n   * @param {!goog.log.LogRecord} logRecord The log record to pass to each\n   *     handler.\n   */\n  publish(logRecord) {\n    let target = this;\n    while (target) {\n      target.handlers.forEach(handler => {\n        handler(logRecord);\n      });\n      target = target.parent;\n    }\n  }\n};\n\n\n/**\n * A LogRegistry owns references to all loggers, and is responsible for storing\n * all the internal state needed for loggers to operate correctly.\n *\n * @package\n * @final\n */\ngoog.log.LogRegistry = class LogRegistry {\n  constructor() {\n    /**\n     * Per-log information retained by this LogRegistry.\n     * @type {!Object<string, !goog.log.LogRegistryEntry>}\n     */\n    this.entries = {};\n\n    // The root logger.\n    const rootLogRegistryEntry =\n        new goog.log.LogRegistryEntry(goog.log.ROOT_LOGGER_NAME);\n    rootLogRegistryEntry.level = goog.log.Level.CONFIG;\n    this.entries[goog.log.ROOT_LOGGER_NAME] = rootLogRegistryEntry;\n  }\n\n  /**\n   * Gets the LogRegistry entry under the given name, creating the entry if one\n   * doesn't already exist.\n   * @param {string} name The name to look up.\n   * @param {?goog.log.Level=} level If provided, override the default logging\n   *     level of the returned Logger with the provided level.\n   * @return {!goog.log.LogRegistryEntry}\n   */\n  getLogRegistryEntry(name, level) {\n    const entry = this.entries[name];\n    if (entry) {\n      if (level !== undefined) {\n        entry.level = level;\n      }\n      return entry;\n    } else {\n      // The logger and its associated registry entry needs to be created.\n\n      // Get its parent first.\n      const lastDotIndex = name.lastIndexOf('.');\n      const parentName = name.substr(0, lastDotIndex);\n      const parentLogRegistryEntry = this.getLogRegistryEntry(parentName);\n\n      // Now create the new entry, linking it with its parent.\n      const logRegistryEntry =\n          new goog.log.LogRegistryEntry(name, parentLogRegistryEntry);\n      this.entries[name] = logRegistryEntry;\n      parentLogRegistryEntry.children.push(logRegistryEntry);\n\n      if (level !== undefined) {\n        logRegistryEntry.level = level;\n      }\n\n      return logRegistryEntry;\n    }\n  }\n\n  /**\n   * Get a list of all loggers.\n   * @return {!Array<!goog.log.Logger>}\n   */\n  getAllLoggers() {\n    return Object.keys(this.entries)\n        .map(loggerName => this.entries[loggerName].logger);\n  }\n};\n\n/**\n * A static method that always returns the same instance of LogRegistry.\n * @return {!goog.log.LogRegistry} The LogRegistry singleton instance.\n */\ngoog.log.LogRegistry.getInstance = function() {\n  if (!goog.log.LogRegistry.instance_) {\n    goog.log.LogRegistry.instance_ = new goog.log.LogRegistry();\n  }\n  return /** @type {!goog.log.LogRegistry} */ (goog.log.LogRegistry.instance_);\n};\n\n/**\n * @type {!goog.log.LogRegistry|undefined}\n * @private\n */\ngoog.log.LogRegistry.instance_;\n\n\n/**\n * Finds or creates a logger for a named subsystem. If a logger has already been\n * created with the given name it is returned. Otherwise, a new logger is\n * created. If a new logger is created, it will be configured to send logging\n * output to its parent's handlers.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n *     name and should normally be based on the package name or class name of\n *     the subsystem, such as goog.net.BrowserChannel.\n * @param {?goog.log.Level=} level If provided, override the default logging\n *     level with the provided level. This parameter is deprecated; prefer using\n *     goog.log.setLevel to set the logger's level instead.\n *     TODO(user): Delete this parameter.\n * @return {!goog.log.Logger|null} The named logger, or null if logging is\n *     disabled.\n */\ngoog.log.getLogger = function(name, level) {\n  if (goog.log.ENABLED) {\n    const loggerEntry =\n        goog.log.LogRegistry.getInstance().getLogRegistryEntry(name, level);\n    return loggerEntry.logger;\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Returns the root logger.\n *\n * @return {!goog.log.Logger|null} The root logger, or null if logging is\n *     disabled.\n */\ngoog.log.getRootLogger = function() {\n  if (goog.log.ENABLED) {\n    const loggerEntry = goog.log.LogRegistry.getInstance().getLogRegistryEntry(\n        goog.log.ROOT_LOGGER_NAME);\n    return loggerEntry.logger;\n  } else {\n    return null;\n  }\n};\n\n\n// TODO(johnlenz): try to tighten the types to these functions.\n/**\n * Adds a handler to the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.LogRecordHandler} handler Handler function to\n *     add.\n */\ngoog.log.addHandler = function(logger, handler) {\n  if (goog.log.ENABLED && logger) {\n    const loggerEntry = goog.log.LogRegistry.getInstance().getLogRegistryEntry(\n        logger.getName());\n    loggerEntry.handlers.push(handler);\n  }\n};\n\n\n/**\n * Removes a handler from the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.LogRecordHandler} handler Handler function to\n *     remove.\n * @return {boolean} Whether the handler was removed.\n */\ngoog.log.removeHandler = function(logger, handler) {\n  if (goog.log.ENABLED && logger) {\n    const loggerEntry = goog.log.LogRegistry.getInstance().getLogRegistryEntry(\n        logger.getName());\n    const indexOfHandler = loggerEntry.handlers.indexOf(handler);\n    if (indexOfHandler !== -1) {\n      loggerEntry.handlers.splice(indexOfHandler, 1);\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Set the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value goog.log.Level.OFF can be used to turn off logging. If the\n * new level is null, it means that this node should inherit its level from its\n * nearest ancestor with a specific (non-null) level value.\n *\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.Level|null} level The new level.\n */\ngoog.log.setLevel = function(logger, level) {\n  if (goog.log.ENABLED && logger) {\n    const loggerEntry = goog.log.LogRegistry.getInstance().getLogRegistryEntry(\n        logger.getName());\n    loggerEntry.level = level;\n  }\n};\n\n\n/**\n * Gets the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value goog.log.Level.OFF can be used to turn off logging. If the\n * level is null, it means that this node should inherit its level from its\n * nearest ancestor with a specific (non-null) level value.\n *\n * @param {?goog.log.Logger} logger\n * @return {!goog.log.Level|null} The level.\n */\ngoog.log.getLevel = function(logger) {\n  if (goog.log.ENABLED && logger) {\n    const loggerEntry = goog.log.LogRegistry.getInstance().getLogRegistryEntry(\n        logger.getName());\n    return loggerEntry.level;\n  }\n  return null;\n};\n\n\n/**\n * Returns the effective level of the logger based on its ancestors' levels.\n * @param {?goog.log.Logger} logger\n * @return {!goog.log.Level} The level.\n */\ngoog.log.getEffectiveLevel = function(logger) {\n  if (goog.log.ENABLED && logger) {\n    const loggerEntry = goog.log.LogRegistry.getInstance().getLogRegistryEntry(\n        logger.getName());\n    return loggerEntry.getEffectiveLevel();\n  }\n  return goog.log.Level.OFF;\n};\n\n\n/**\n * Checks if a message of the given level would actually be logged by this\n * logger. This check is based on the goog.log.Loggers effective level, which\n * may be inherited from its parent.\n * @param {?goog.log.Logger} logger\n * @param {?goog.log.Level} level The level to check.\n * @return {boolean} Whether the message would be logged.\n */\ngoog.log.isLoggable = function(logger, level) {\n  if (goog.log.ENABLED && logger && level) {\n    return level.value >= goog.log.getEffectiveLevel(logger).value;\n  }\n  return false;\n};\n\n\n/**\n * Gets a list of all loggers.\n * @return {!Array<!goog.log.Logger>}\n */\ngoog.log.getAllLoggers = function() {\n  if (goog.log.ENABLED) {\n    return goog.log.LogRegistry.getInstance().getAllLoggers();\n  }\n  return [];\n};\n\n\n/**\n * Creates a log record. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * TODO(user): Delete this method from the public API.\n * @param {?goog.log.Logger} logger\n * @param {?goog.log.Level} level One of the level identifiers.\n * @param {string} msg The message to log.\n * @param {?Error|?Object=} exception An exception associated with the\n *     message.\n * @return {!goog.log.LogRecord}\n */\ngoog.log.getLogRecord = function(logger, level, msg, exception) {\n  const logRecord = goog.log.LogBuffer.getInstance().addRecord(\n      level || goog.log.Level.OFF, msg, logger.getName());\n  if (exception) {\n    logRecord.setException(exception);\n  }\n  return logRecord;\n};\n\n\n/**\n * Logs a goog.log.LogRecord. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * TODO(user): Delete this method from the public API.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.LogRecord} logRecord A log record to log.\n */\ngoog.log.publishLogRecord = function(logger, logRecord) {\n  if (goog.log.ENABLED && logger &&\n      goog.log.isLoggable(logger, logRecord.getLevel())) {\n    const loggerEntry = goog.log.LogRegistry.getInstance().getLogRegistryEntry(\n        logger.getName());\n    loggerEntry.publish(logRecord);\n  }\n};\n\n\n/**\n * Logs a message. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * TODO(user): The level parameter should be made required.\n * @param {?goog.log.Logger} logger\n * @param {?goog.log.Level} level One of the level identifiers.\n * @param {!goog.log.Loggable} msg The message to log.\n * @param {?Error|?Object=} exception An exception associated with the\n *     message.\n */\ngoog.log.log = function(logger, level, msg, exception) {\n  if (goog.log.ENABLED && logger && goog.log.isLoggable(logger, level)) {\n    level = level || goog.log.Level.OFF;\n    const loggerEntry = goog.log.LogRegistry.getInstance().getLogRegistryEntry(\n        logger.getName());\n    // Message callbacks can be useful when a log message is expensive to build.\n    if (typeof msg === 'function') {\n      msg = msg();\n    }\n    const logRecord = goog.log.LogBuffer.getInstance().addRecord(\n        level, msg, logger.getName());\n    if (exception) {\n      logRecord.setException(exception);\n    }\n    // Publish logs.\n    loggerEntry.publish(logRecord);\n  }\n};\n\n\n/**\n * Logs a message at the goog.log.Level.SEVERE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.Loggable} msg The message to log.\n * @param {?Error|?Object=} exception An exception associated with the\n *     message.\n */\ngoog.log.error = function(logger, msg, exception) {\n  if (goog.log.ENABLED && logger) {\n    goog.log.log(logger, goog.log.Level.SEVERE, msg, exception);\n  }\n};\n\n\n/**\n * Logs a message at the goog.log.Level.WARNING level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.Loggable} msg The message to log.\n * @param {?Error|?Object=} exception An exception associated with the\n *     message.\n */\ngoog.log.warning = function(logger, msg, exception) {\n  if (goog.log.ENABLED && logger) {\n    goog.log.log(logger, goog.log.Level.WARNING, msg, exception);\n  }\n};\n\n\n/**\n * Logs a message at the goog.log.Level.INFO level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.Loggable} msg The message to log.\n * @param {?Error|?Object=} exception An exception associated with the\n *     message.\n */\ngoog.log.info = function(logger, msg, exception) {\n  if (goog.log.ENABLED && logger) {\n    goog.log.log(logger, goog.log.Level.INFO, msg, exception);\n  }\n};\n\n\n/**\n * Logs a message at the goog.log.Level.FINE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {?goog.log.Logger} logger\n * @param {!goog.log.Loggable} msg The message to log.\n * @param {?Error|?Object=} exception An exception associated with the\n *     message.\n */\ngoog.log.fine = function(logger, msg, exception) {\n  if (goog.log.ENABLED && logger) {\n    goog.log.log(logger, goog.log.Level.FINE, msg, exception);\n  }\n};\n"],
"names":["goog","provide","require","log","Loggable","ENABLED","define","debug","LOGGING_ENABLED","ROOT_LOGGER_NAME","constructor","name","value","toString","Level","OFF","Infinity","SHOUT","SEVERE","WARNING","INFO","CONFIG","FINE","FINER","FINEST","ALL","PREDEFINED_LEVELS","predefinedLevelsCache_","createPredefinedLevelsCache_","goog.log.Level.createPredefinedLevelsCache_","i","level","getPredefinedLevel","goog.log.Level.getPredefinedLevel","getPredefinedLevelByValue","goog.log.Level.getPredefinedLevelByValue","length","getName","Logger","capacity","capacity_","LogBuffer","CAPACITY","buffer_","curIndex_","isFull_","clear","addRecord","msg","loggerName","isBufferingEnabled","LogRecord","curIndex","ret","reset","forEachRecord","func","buffer","isFull","Array","instance_","getInstance","goog.log.LogBuffer.getInstance","goog.log.LogBuffer.isBufferingEnabled","time","sequenceNumber","level_","loggerName_","msg_","time_","sequenceNumber_","exception_","now","nextSequenceNumber_","getLoggerName","setLoggerName","getException","setException","exception","getLevel","setLevel","getMessage","setMessage","getMillis","setMillis","getSequenceNumber","LogRecordHandler","parent","handlers","children","logger","getEffectiveLevel","asserts","fail","publish","logRecord","target","forEach","handler","LogRegistryEntry","entries","rootLogRegistryEntry","getLogRegistryEntry","entry","undefined","lastDotIndex","lastIndexOf","parentName","substr","parentLogRegistryEntry","logRegistryEntry","push","getAllLoggers","Object","keys","map","LogRegistry","goog.log.LogRegistry.getInstance","getLogger","goog.log.getLogger","loggerEntry","getRootLogger","goog.log.getRootLogger","addHandler","goog.log.addHandler","removeHandler","goog.log.removeHandler","indexOfHandler","indexOf","splice","goog.log.setLevel","goog.log.getLevel","goog.log.getEffectiveLevel","isLoggable","goog.log.isLoggable","goog.log.getAllLoggers","getLogRecord","goog.log.getLogRecord","publishLogRecord","goog.log.publishLogRecord","goog.log.log","error","goog.log.error","warning","goog.log.warning","info","goog.log.info","fine","goog.log.fine"]
}
