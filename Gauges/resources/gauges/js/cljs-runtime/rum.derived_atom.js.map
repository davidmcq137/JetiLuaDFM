{"version":3,"sources":["rum/derived_atom.cljc"],"mappings":"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","names":["var_args","G__52149","rum.derived-atom/derived-atom","js/Error","refs","key","f","rum.derived_atom.derived_atom","opts","map__52151","cljs.core/--destructure-map","cljs.core.get","ref","check-equals?","recalc","G__52154","cljs.core/count","vec__52155","cljs.core.nth","a","G__52158","cljs.core/deref","vec__52159","b","G__52162","G__52163","vec__52164","c","G__52167","G__52168","G__52169","cljs.core.apply","cljs.core.map","sink","G__52170","cljs.core/reset!","cljs.core.atom","watch","_","new-val","cljs.core.not_EQ_","seq__52172","cljs.core/seq","chunk__52173","count__52174","i__52175","temp__5804__auto__","cljs.core/chunked-seq?","c__4591__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","cljs.core/add-watch"],"sourcesContent":["(ns ^:no-doc rum.derived-atom)\n\n(defn derived-atom\n  ([refs key f]\n   (derived-atom refs key f {}))\n  ([refs key f opts]\n   (let [{:keys [ref check-equals?]\n          :or {check-equals? true}} opts\n         recalc (case (count refs)\n                  1 (let [[a] refs] #(f @a))\n                  2 (let [[a b] refs] #(f @a @b))\n                  3 (let [[a b c] refs] #(f @a @b @c))\n                  #(apply f (map deref refs)))\n         sink   (if ref\n                  (doto ref (reset! (recalc)))\n                  (atom (recalc)))\n         watch  (if check-equals?\n                  (fn [_ _ _ _]\n                    (let [new-val (recalc)]\n                      (when (not= @sink new-val)\n                        (reset! sink new-val))))\n                  (fn [_ _ _ _]\n                    (reset! sink (recalc))))]\n     (doseq [ref refs]\n       (add-watch ref key watch))\n     sink)))\n"]}