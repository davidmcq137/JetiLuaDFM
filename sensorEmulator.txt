   sensorEmulator.lua

   This module is intended to be used with the Jeti DC/DS-24
   emulator. It reads a file (sensorEmulator.jsn) that defines a set
   of "pseudosensors" that can be created from the proportional
   controls (e.g. sliders) in the emulator. You can define a simple
   linear range of telemetry signal values that behave as standard
   telemetry sensors as the sliders move. A sample JSON file is
   included below.
   
   For more complex sensor behavior, you can specify a function string
   (funcString) in the jsn file for each sensor which can be any valid
   lua expression that is executed each time the sensor is read. The
   environment in which that string is evaluated by the lua
   interpreter is set up so that variable name s is the pseudo sensor
   value (returned as sensor.value), t is the system time in seconds
   (t = system.getTimeCounter() / 1000), and most of the lua math
   library is available - without the "math." prefix (see code below
   .. table env). Also available are a triangle wave function tri()
   with a period of 1s and a square wave function sq() with a period
   of 1s. The triangle and square wave functions have an amplitude of
   +/-1.

   In addition, you can specify a json array of auxiliary
   controls. These are other proportional controls in addition to the
   primary one specified by the "control" key in the json, and the
   value of these controls will also be available in the lua
   environment and can be used in your lua expression. They go into a
   json array with key "auxcontrol".  See the example jsn file
   below. They are available as "raw" values (-1 to 1) by their Jeti
   name e.g. P6, and for convenience they are also available with an
   "S" (e.g. S6) going from (0 to 1). The primary control, for example
   P5, is available as noted above scaled from "controlmin" to
   "controlmax" as variable s, and is also available as the "raw"
   value via variables P5 and S5 going from (-1 to 1) and (0 to 1)
   respectively.
   
   For example "funcString":"s*sin(2*pi*t/10)" gives a 10 second
   period sine wave whose amplitude is set by the slider.

   "funcString":"s*sin(2*pi*t/10) + S6*rand() gives the same sine wave
   with a variable anount of noise added from the math.random
   function, with the noise amplitude going from 0 to 1 controlled by
   slider S6.

   Also available is a print function prt() that can be used in
   expressions for info or debugging. It is a variadic function and
   can take any list of args that would go to the normal lua print
   statement. The prt() function always returns 0 so you can add it
   (perhaps several times) to the end of your expression:
   "funcString":"s*sin(2*pi*t/10) + prt('amp:', s) + prt('per:',10)".
   Note the use of single quotes around the strings in the expression.

   Future enhancements could be the addition of switches to emulate
   the behavior of table entry <sensor.valid>. Currently we always
   return sensor.valid = true.

   Replaying a file with a specific set of sensor values, perhaps
   logged from a flight, would also be a nice addition. Since I
   already figured out how to read Jeti log files for the LSO app,
   this one might be up next :-)

   Perhaps to avoid excessive CPU load we might only return a new
   value (running the lua interpreter) every 200 msec or so to
   simulate actual telemetry sensor behavior?
   
   At present, several less common table entries (see source code) are
   not implemented e.g. date and time and GPS.

   The module file sensorEmulator.lua is intended to be in the /Apps
   directory along with the lua source files. The sensorEmulator.jsn
   file is expected to be lua-program-specific so it resides in the
   lua program's own directory, e.g. Apps/DFM-Smoke/sensorEmulator.jsn
   for the lua program /Apps/DFM-Smoke.lua

   Usage: 

   Put the sourcecode file sensorEmulator.lua in the /Apps directory
   so it is available to all lua programs

   Put a copy of the sensorEmulator.jsn file into the directory for
   the lua function that is going to use it, and edit it as required
   for that lua app.

   By putting the sensorEmulator.jsn file into the app's own
   directory each app can define its own sensor names, ranges, etc

   To use the sensor emulator, assuming your app is called
   DFM-Test.lua, and has a directort DFM-Test associated with it, add
   the following code to init():

   -- *** code snippet to add to init() ***

   local pcallOK, emulator

   pcallOK, emulator = pcall(require, "sensorEmulator")
   if not pcallOK then print("Error:", emulator) end
   if pcallOK and emulator then emulator.init("DFM-Test") end
   
   -- *** end of code snippet to add to init() ***
   
   This makes sure the emulator init function is only called if the
   <require> was done successfully to load the emulator module. This
   will fail on the transmitter since the emulator module should not
   be there, but even if it is, the module will detect that it is
   running on the TX and will return immediately and not execute the
   emulation functions.

   You can put these "require" lines where you like in init(), but it
   must be before you call system.getSensors(), which is also
   typically called from init().

   Upon startup in the Jeti emulator of a lua program that includes the
   module, it asks if you want to use the pseudosensors or not,
   default if no key pressed after a few seconds is "no".

   If you press "yes" and do elect to use the module, the
   emulator.init() routine automatically changes the system function
   calls for system.getSensors(), system.getSensorById() and
   system.getSensorValueById() to instead be handled by the emulator
   module functions with the pseudosensor functionality. Your
   sourcecode does not change and still has the calls to the system
   names in any case which is very convenient for debugging.

   The <require> statements and call to emulator.init() can be left in
   production code. When calling emulator.init() on the actual
   transmitter, it returns immediately, does not read the JSON file
   and leaves the system routines in place. The sensorEmulator.lua and
   .jsn files are not intended to be put on the Tx

   The funcString capability is inspired by Jeti's (very cool!)
   V-sensor.lua app

   Released under MIT license by DFM 2019

Example jsn file:

[

{"id":1,"param":0,"sensorName":"", "label":"PS1(P5)"},
{"id":1,"param":1,
"decimals":0,
"type":1,
"sensorName":"PS1(P5)",
"label":"EGT",
"unit":"Â°C",
"control":"P5",
"auxcontrol":["P6","P7"],
"controlmin":0,
"controlmax":800,
"funcString":"s / 2 * sin(2*pi*t / ( 30*(S6+1) ) ) + s / 2 + prt('S7',S7)"
},

{"id":2,"param":0,"sensorName":"", "label":"PS2(P6)"},
{"id":2,
"param":1,
"decimals":0,
"type":1,
"sensorName":"PS2(P6)",
"label":"Airspeed",
"unit":"m/s",
"control":"P6",
"controlmin":0,
"controlmax":200,
"funcString":"s / 2 * sq(t / 30) + s / 2 + s / 5 * rand() + s / 5"
},

{"id":3,"param":0,"sensorName":"", "label":"PS3(P7)"},
{"id":3,
"param":1,
"decimals":0,
"type":1,
"sensorName":"PS3(P7)",
"label":"G Force",
"unit":"g",
"control":"P7",
"controlmin":-10,
"controlmax":10,
"funcString":"abs(s)"
}

]
