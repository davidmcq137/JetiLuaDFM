   sensorEmulator.lua, sensorLogEm.lua

   Summary
   
   When writing lua scripts for the Jeti transmitters, telemetry
   sensors can be one of the most important sources of data for the
   script. If you develop lua scripts on the Jeti DC/DS-24 emulator as
   I do, it would be quite convenient to have a way to provide what
   look like actual sensor readings on the emulator. In the past, I
   had used a DEBUG variable, or I had queried the system routines to
   know I was running on the emulator, then would add lua code to my
   source files to insert computed values instead of calling the
   system telemetry routines. Typically I would use the analog sliders
   P5-P8 as data sources for this purpose. But the issue is that the
   code path for the debugging is then different than it is at
   runtime.

   For a long time I have wanted to have the ability to call the
   standard system routines (e.g. system.getSensorByID) and have them
   return values that are similar to what the lua app would encounter
   in actual flight. The tools described here are the first
   implementation of that vision. One tool, sensorEmulator.lua can
   read a json file that describes a set of sensors, and the values
   they return. On its initialization it replaces the system routines
   such as system.getSensors and system.getSensorByID and returns
   values in a way that is specified in the json file. the file allows
   the creation of a range from min to max for each analog slider and
   also allows you to specify a lua expression that transforms this
   simple linear range to whatever you like.

   The tool can also simulate GPS sensors by giving a lat,long origin
   and specifying the x and y values for a parametric equation that
   can do things such as generating an ellipse or lissajous figure
   flight path and return the appropriate GPS values in sensor.valGPS.

   There is also a separate tool sensorLogEm.lua that reads a Jeti TX
   log file and plays back selected sensors (these sensors are defined
   in a json file) so that calls to the system telemetry routines work
   as if the lua script is "flying" that flight.

   Details
   
   The module sensorEmulator.lua is intended to be used with the Jeti
   DC/DS-24 emulator. It reads a file (sensorEmulator.jsn) that
   defines a set of "pseudosensors" that can be created from the
   proportional controls (e.g. sliders) in the emulator. You can
   define a simple linear range of telemetry signal values that behave
   as standard telemetry sensors as the sliders move. A sample JSON
   file is included below.
   
   For more complex sensor behavior, you can specify a function string
   (funcString) in the jsn file for each sensor which can be any valid
   lua expression that is executed each time the sensor is read. The
   environment in which that string is evaluated by the lua
   interpreter is set up so that variable name s is the pseudo sensor
   value (returned as sensor.value), t is the system time in seconds
   (t = system.getTimeCounter() / 1000), and most of the lua math
   library is available - without the "math." prefix (see the code and
   look for table env). Also available are a triangle wave function
   tri() with a period of 1s and a square wave function sq() with a
   period of 1s. The triangle and square wave functions have an
   amplitude of +/-1. For convenience we also have the trig functions
   with a period of 1: sin1(), cos1() and tan1() .. this way you can
   use the same time argument as sq and tri .. e.g. sq(t/10) and
   sin1(t/10) will both have a period of 10 seconds. The regular trig
   functions have a period of 2*pi as expected.

   a Sequencing function is availble, seq(t, table) where t is the
   time argument and the second parameter is a table. seq() divides is
   period up into n equal time segments and steps through the entries
   in the table in order. The amplitude of the seq function is equal
   to the table entry. For example seq(t/20, {1,2,3,4}) creates a 20
   second period repeating "staircase" function. from t=0 to t=5 it
   has a value of 1, from t=5 to t=10 a value of 2, from t=10 to t=15
   a value of 3 and from t=15 to t=20 a value of 4, at which point it
   wraps around back to 1.

   In addition, you can specify a json array of auxiliary
   controls. These are other proportional controls in addition to the
   primary one specified by the "control" key in the json, and the
   value of these controls will also be available in the lua
   environment and can be used in your lua expression. They go into a
   json array with key "auxcontrol".  See the example jsn file
   below. They are available as "raw" values (-1 to 1) by their Jeti
   name e.g. P6, and for convenience they are also available with an
   "S" (e.g. S6) going from (0 to 1). The primary control, for example
   P5, is available as noted above scaled from "controlmin" to
   "controlmax" as variable s, and is also available as the "raw"
   value via variables P5 and S5 going from (-1 to 1) and (0 to 1)
   respectively.
   
   For example "funcString":"s*sin(2*pi*t/10)" gives a 10 second
   period sine wave whose amplitude is set by the slider.

   "funcString":"s*sin(2*pi*t/10) + S6*rand() gives the same sine wave
   with a variable anount of noise added from the math.random
   function, with the noise amplitude going from 0 to 1 controlled by
   slider S6.

   Also available is a print function prt() that can be used in
   expressions for info or debugging. It is a variadic function and
   can take any list of args that would go to the normal lua print
   statement. The prt() function always returns 0 so you can add it
   (perhaps several times) to the end of your expression:
   "funcString":"s*sin(2*pi*t/10) + prt('amp:', s) + prt('per:',10)".
   Note the use of single quotes around the strings in the expression.

   Support for generating GPS sensor info has also been added, along
   with a companion jsn file sensorEmulatorGPS.jsn that contains the
   local origin specified as lat, lon, the radius of the earth in the
   desired units (e.g. ft, m), and strings for creating a parametric
   equation of x and y (e.g. a Lissajous figure) for testing GPS
   applications. This file is also intended to be in the app's own
   directory.

   At present, several less common table entries (see source code) are
   not implemented e.g. date and time. Easy to add if desired, format
   of date and time values can be observed in sensorLogEm.lua.
   
   Future enhancements could be the addition of switches to emulate
   the behavior of table entry <sensor.valid>. Currently we always
   return sensor.valid = true.  Perhaps to avoid excessive CPU load we
   might only return a new value (running the lua interpreter) every
   200 msec or so to simulate actual telemetry sensor behavior. Could
   be an option in the jsn file.
   
   There is a companion lua program sensorLogEm.lua that is similar,
   except that it reads a Jeti TX log file and replays the log file
   and supplies sensor data for selected sensors as they occured
   during the flight. This allows you to debug a lua program with
   actual flight data from a prior flight with your lua code exactly
   as it would be when deployed on the TX.

   The module file sensorEmulator.lua is intended to be in the /Apps
   directory along with the lua source files. The sensorEmulator.jsn
   file and its GPS counterpart (if used) is expected to be
   lua-program-specific so it resides in the lua program's own
   directory, e.g. Apps/DFM-Smoke/sensorEmulator.jsn for use with the
   lua program /Apps/DFM-Smoke.lua

   Usage: 

   Put the sourcecode file sensorEmulator.lua in the /Apps directory
   so it is available to all lua programs

   Put a copy of the sensorEmulator.jsn file into the directory for
   the lua function that is going to use it, and edit it as required
   for that lua app. Ditto for sensorEmulatorGPS.jsn.

   By putting the sensorEmulator*.jsn file into the app's own
   directory each app can define its own sensor names, ranges, etc

   To use the sensor emulator, assuming your app is called
   DFM-Test.lua, and has a directory DFM-Test associated with it, add
   the following code to init():

   -- *** code snippet to add to init() ***

   local pcallOK, emulator

   pcallOK, emulator = pcall(require, "sensorEmulator")
   if not pcallOK then print("Error:", emulator) end
   if pcallOK and emulator then emulator.init("DFM-Test") end
   
   -- *** end of code snippet to add to init() ***
   
   This makes sure the emulator init function is only called if the
   <require> was done successfully to load the emulator module. This
   will fail on the transmitter since the emulator module should not
   be there, but even if it is, the module will detect that it is
   running on the TX and will return immediately and not execute the
   emulation functions.

   You can put these "require" lines where you like in init(), but it
   must be before you call system.getSensors(), which is also
   typically called from init(). I recommend you put them at the top.

   Upon startup in the Jeti emulator of a lua program that includes
   the module, it asks if you want to use the pseudosensors or not,
   default if no key pressed after a few seconds is "no".

   If you press "yes" and do elect to use the module, the
   emulator.init() routine automatically changes the system function
   calls for system.getSensors(), system.getSensorById() and
   system.getSensorValueById() to instead be handled by the emulator
   module functions with the pseudosensor functionality. Your
   sourcecode does not change and still has the calls to the system
   names in any case which is very convenient for debugging.

   The <require> statements and call to emulator.init() can be left in
   production code. When calling emulator.init() on the actual
   transmitter, it returns immediately, does not read the JSON file
   and leaves the system routines in place. The sensorEmulator.lua and
   .jsn files are not intended to be put on the Tx

   The funcString capability is inspired by Jeti's (very cool!)
   V-sensor.lua app

   Released under MIT license by DFM 2019

Example sensorEmulator.jsn file:

[

{"id":1,"param":0,"sensorName":"", "label":"PS1(P5)"},
{"id":1,"param":1,
"decimals":0,
"type":1,
"sensorName":"PS1(P5)",
"label":"EGT",
"unit":"°C",
"control":"P5",
"auxcontrol":["P6","P7"],
"controlmin":0,
"controlmax":800,
"funcString":"s / 2 * sin(2*pi*t / ( 30*(S7+1) ) ) + s / 2"
},

{"id":2,"param":0,"sensorName":"", "label":"PS2(P6)"},
{"id":2,
"param":1,
"decimals":0,
"type":1,
"sensorName":"PS2(P6)",
"label":"Airspeed",
"unit":"m/s",
"control":"P6",
"auxcontrol":["P7"],
"controlmin":0,
"controlmax":200,
"funcString":"s / 2 * sq(t / (30*(S7+1) ) ) + s / 2 + s / 5 * rand() + s / 5"
},

{"id":3,"param":0,"sensorName":"", "label":"PS3(Lat)"},
{"id":3,
"param":2,
"decimals":0,
"type":9,
"auxcontrol":["P6","P7"],
"sensorName":"PS3(Lat)",
"label":"Latitude",
"unit":""
},

{"id":4,"param":0,"sensorName":"", "label":"PS3(Lon)"},
{"id":4,
"param":3,
"decimals":0,
"type":9,
"auxcontrol":["P5","P6"],
"sensorName":"PS3(Lon)",
"label":"Longitude",
"unit":""
}

]

Example sensorEmulatorGPS.jsn file:

{
    "lat0":41.00,
    "lon0":-73.00,
    "rE":21220539.7,
    "xString":"300*sin(2*pi*t/5)",
    "yString":"200*cos(2*pi*t/7)"
}
